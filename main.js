!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/cubing-algorithms/",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=n(5),i=n(6),o=n(7).Cube;window.onload=function(){document.getElementById("algorithms")&&a(),document.getElementById("specials")&&s(),document.getElementById("practice")&&u()};var a=function(){r.steps.forEach((function(e,t){e.algorithmGroups.forEach((function(n,r){n.algorithms.forEach((function(n,i){var a="cubeVis-"+t+"-"+r+"-"+i,s=document.getElementById(a);if(s){var u=new o;u.applyMoves(n.algorithm,!0),u.drawCube(s,"pll"==e.short)}}))}))}))},s=function(){i.forEach((function(e,t){var n="cubeVis-"+t,r=document.getElementById(n);if(r){var i=new o(e.cube_size);i.applyMoves(e.algorithm,!0),i.drawCube(r,e.pll)}}))},u=function(){var e=document.getElementById("cube"),t=document.getElementById("resultCube");if(e&&t){var n=document.getElementById("algorithmLabel"),i=(document.getElementById("practiceResult"),r.steps.map((function(e){var t=e.algorithmGroups.map((function(e){return e.algorithms})).flat().map((function(e){return e.algorithm}));return{name:e.name,short:e.short,algorithms:t}}))),a=i.map((function(e){return e.algorithms})).flat(),s=new o;s.drawCube(e,!0);var u=new o;u.drawCube(t,!0);var c=document.getElementById("practiceControls"),l=document.createElement("button");c.appendChild(l),l.classList.add("btn","btn-primary","btn-block"),l.textContent="random algorithm",l.addEventListener("click",(function(){var r=Math.floor(Math.random()*a.length),o=a[r];s.reset(e),s.applyMoves(o,!0),s.drawCube(e,r>=i[0].algorithms.length),u.reset(t),u.applyMoves(o,!1),u.drawCube(t,r>=i[0].algorithms.length),n.innerText=o}));var f=document.createElement("button");c.appendChild(f),f.classList.add("btn","btn-primary","btn-block"),f.textContent="random oll algorithm",f.addEventListener("click",(function(){var r=i[0].algorithms,o=r[Math.floor(Math.random()*r.length)];s.reset(e),s.applyMoves(o,!0),s.drawCube(e),u.reset(t),u.applyMoves(o,!1),u.drawCube(t),n.innerText=o}));var h=document.createElement("button");c.appendChild(h),h.classList.add("btn","btn-primary","btn-block"),h.textContent="random pll algorithm",h.addEventListener("click",(function(){var r=i[1].algorithms,o=r[Math.floor(Math.random()*r.length)];s.reset(e),s.applyMoves(o,!0),s.drawCube(e,!0),u.reset(t),u.applyMoves(o,!1),u.drawCube(t,!0),n.innerText=o}))}}},function(e,t,n){
/*!
  * Bootstrap v4.6.0 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i=r(t),o=r(n);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e){var t=this,n=!1;return i.default(this).one(l.TRANSITION_END,(function(){n=!0})),setTimeout((function(){n||l.triggerTransitionEnd(t)}),e),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var n=e.getAttribute("href");t=n&&"#"!==n?n.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=i.default(e).css("transition-duration"),n=i.default(e).css("transition-delay"),r=parseFloat(t),o=parseFloat(n);return r||o?(t=t.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(t)+parseFloat(n))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){i.default(e).trigger("transitionend")},supportsTransitionEnd:function(){return Boolean("transitionend")},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=t[r],a=o&&l.isElement(o)?"element":null==(s=o)?""+s:{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(i).test(a))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+i+'".')}var s},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){var t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?l.findShadowRoot(e.parentNode):null},jQueryDetection:function(){if(void 0===i.default)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=i.default.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};l.jQueryDetection(),i.default.fn.emulateTransitionEnd=c,i.default.event.special[l.TRANSITION_END]={bindType:"transitionend",delegateType:"transitionend",handle:function(e){if(i.default(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}};var f="alert",h=i.default.fn[f],d=function(){function e(e){this._element=e}var t=e.prototype;return t.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},t.dispose=function(){i.default.removeData(this._element,"bs.alert"),this._element=null},t._getRootElement=function(e){var t=l.getSelectorFromElement(e),n=!1;return t&&(n=document.querySelector(t)),n||(n=i.default(e).closest(".alert")[0]),n},t._triggerCloseEvent=function(e){var t=i.default.Event("close.bs.alert");return i.default(e).trigger(t),t},t._removeElement=function(e){var t=this;if(i.default(e).removeClass("show"),i.default(e).hasClass("fade")){var n=l.getTransitionDurationFromElement(e);i.default(e).one(l.TRANSITION_END,(function(n){return t._destroyElement(e,n)})).emulateTransitionEnd(n)}else this._destroyElement(e)},t._destroyElement=function(e){i.default(e).detach().trigger("closed.bs.alert").remove()},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.alert");r||(r=new e(this),n.data("bs.alert",r)),"close"===t&&r[t](this)}))},e._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}}]),e}();i.default(document).on("click.bs.alert.data-api",'[data-dismiss="alert"]',d._handleDismiss(new d)),i.default.fn[f]=d._jQueryInterface,i.default.fn[f].Constructor=d,i.default.fn[f].noConflict=function(){return i.default.fn[f]=h,d._jQueryInterface};var p=i.default.fn.button,_=function(){function e(e){this._element=e,this.shouldAvoidTriggerChange=!1}var t=e.prototype;return t.toggle=function(){var e=!0,t=!0,n=i.default(this._element).closest('[data-toggle="buttons"]')[0];if(n){var r=this._element.querySelector('input:not([type="hidden"])');if(r){if("radio"===r.type)if(r.checked&&this._element.classList.contains("active"))e=!1;else{var o=n.querySelector(".active");o&&i.default(o).removeClass("active")}e&&("checkbox"!==r.type&&"radio"!==r.type||(r.checked=!this._element.classList.contains("active")),this.shouldAvoidTriggerChange||i.default(r).trigger("change")),r.focus(),t=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains("active")),e&&i.default(this._element).toggleClass("active"))},t.dispose=function(){i.default.removeData(this._element,"bs.button"),this._element=null},e._jQueryInterface=function(t,n){return this.each((function(){var r=i.default(this),o=r.data("bs.button");o||(o=new e(this),r.data("bs.button",o)),o.shouldAvoidTriggerChange=n,"toggle"===t&&o[t]()}))},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}}]),e}();i.default(document).on("click.bs.button.data-api",'[data-toggle^="button"]',(function(e){var t=e.target,n=t;if(i.default(t).hasClass("btn")||(t=i.default(t).closest(".btn")[0]),!t||t.hasAttribute("disabled")||t.classList.contains("disabled"))e.preventDefault();else{var r=t.querySelector('input:not([type="hidden"])');if(r&&(r.hasAttribute("disabled")||r.classList.contains("disabled")))return void e.preventDefault();"INPUT"!==n.tagName&&"LABEL"===t.tagName||_._jQueryInterface.call(i.default(t),"toggle","INPUT"===n.tagName)}})).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',(function(e){var t=i.default(e.target).closest(".btn")[0];i.default(t).toggleClass("focus",/^focus(in)?$/.test(e.type))})),i.default(window).on("load.bs.button.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-toggle="buttons"] .btn')),t=0,n=e.length;t<n;t++){var r=e[t],i=r.querySelector('input:not([type="hidden"])');i.checked||i.hasAttribute("checked")?r.classList.add("active"):r.classList.remove("active")}for(var o=0,a=(e=[].slice.call(document.querySelectorAll('[data-toggle="button"]'))).length;o<a;o++){var s=e[o];"true"===s.getAttribute("aria-pressed")?s.classList.add("active"):s.classList.remove("active")}})),i.default.fn.button=_._jQueryInterface,i.default.fn.button.Constructor=_,i.default.fn.button.noConflict=function(){return i.default.fn.button=p,_._jQueryInterface};var m="carousel",v=".bs.carousel",g=i.default.fn[m],b={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},y={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},x={TOUCH:"touch",PEN:"pen"},E=function(){function e(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(".carousel-indicators"),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var t=e.prototype;return t.next=function(){this._isSliding||this._slide("next")},t.nextWhenVisible=function(){var e=i.default(this._element);!document.hidden&&e.is(":visible")&&"hidden"!==e.css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide("prev")},t.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(l.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(e){var t=this;this._activeElement=this._element.querySelector(".active.carousel-item");var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)i.default(this._element).one("slid.bs.carousel",(function(){return t.to(e)}));else{if(n===e)return this.pause(),void this.cycle();var r=e>n?"next":"prev";this._slide(r,this._items[e])}},t.dispose=function(){i.default(this._element).off(v),i.default.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(e){return e=u({},b,e),l.typeCheckConfig(m,e,y),e},t._handleSwipe=function(){var e=Math.abs(this.touchDeltaX);if(!(e<=40)){var t=e/this.touchDeltaX;this.touchDeltaX=0,t>0&&this.prev(),t<0&&this.next()}},t._addEventListeners=function(){var e=this;this._config.keyboard&&i.default(this._element).on("keydown.bs.carousel",(function(t){return e._keydown(t)})),"hover"===this._config.pause&&i.default(this._element).on("mouseenter.bs.carousel",(function(t){return e.pause(t)})).on("mouseleave.bs.carousel",(function(t){return e.cycle(t)})),this._config.touch&&this._addTouchEventListeners()},t._addTouchEventListeners=function(){var e=this;if(this._touchSupported){var t=function(t){e._pointerEvent&&x[t.originalEvent.pointerType.toUpperCase()]?e.touchStartX=t.originalEvent.clientX:e._pointerEvent||(e.touchStartX=t.originalEvent.touches[0].clientX)},n=function(t){e._pointerEvent&&x[t.originalEvent.pointerType.toUpperCase()]&&(e.touchDeltaX=t.originalEvent.clientX-e.touchStartX),e._handleSwipe(),"hover"===e._config.pause&&(e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout((function(t){return e.cycle(t)}),500+e._config.interval))};i.default(this._element.querySelectorAll(".carousel-item img")).on("dragstart.bs.carousel",(function(e){return e.preventDefault()})),this._pointerEvent?(i.default(this._element).on("pointerdown.bs.carousel",(function(e){return t(e)})),i.default(this._element).on("pointerup.bs.carousel",(function(e){return n(e)})),this._element.classList.add("pointer-event")):(i.default(this._element).on("touchstart.bs.carousel",(function(e){return t(e)})),i.default(this._element).on("touchmove.bs.carousel",(function(t){return function(t){t.originalEvent.touches&&t.originalEvent.touches.length>1?e.touchDeltaX=0:e.touchDeltaX=t.originalEvent.touches[0].clientX-e.touchStartX}(t)})),i.default(this._element).on("touchend.bs.carousel",(function(e){return n(e)})))}},t._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},t._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(e)},t._getItemByDirection=function(e,t){var n="next"===e,r="prev"===e,i=this._getItemIndex(t),o=this._items.length-1;if((r&&0===i||n&&i===o)&&!this._config.wrap)return t;var a=(i+("prev"===e?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},t._triggerSlideEvent=function(e,t){var n=this._getItemIndex(e),r=this._getItemIndex(this._element.querySelector(".active.carousel-item")),o=i.default.Event("slide.bs.carousel",{relatedTarget:e,direction:t,from:r,to:n});return i.default(this._element).trigger(o),o},t._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var t=[].slice.call(this._indicatorsElement.querySelectorAll(".active"));i.default(t).removeClass("active");var n=this._indicatorsElement.children[this._getItemIndex(e)];n&&i.default(n).addClass("active")}},t._updateInterval=function(){var e=this._activeElement||this._element.querySelector(".active.carousel-item");if(e){var t=parseInt(e.getAttribute("data-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}},t._slide=function(e,t){var n,r,o,a=this,s=this._element.querySelector(".active.carousel-item"),u=this._getItemIndex(s),c=t||s&&this._getItemByDirection(e,s),f=this._getItemIndex(c),h=Boolean(this._interval);if("next"===e?(n="carousel-item-left",r="carousel-item-next",o="left"):(n="carousel-item-right",r="carousel-item-prev",o="right"),c&&i.default(c).hasClass("active"))this._isSliding=!1;else if(!this._triggerSlideEvent(c,o).isDefaultPrevented()&&s&&c){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(c),this._activeElement=c;var d=i.default.Event("slid.bs.carousel",{relatedTarget:c,direction:o,from:u,to:f});if(i.default(this._element).hasClass("slide")){i.default(c).addClass(r),l.reflow(c),i.default(s).addClass(n),i.default(c).addClass(n);var p=l.getTransitionDurationFromElement(s);i.default(s).one(l.TRANSITION_END,(function(){i.default(c).removeClass(n+" "+r).addClass("active"),i.default(s).removeClass("active "+r+" "+n),a._isSliding=!1,setTimeout((function(){return i.default(a._element).trigger(d)}),0)})).emulateTransitionEnd(p)}else i.default(s).removeClass("active"),i.default(c).addClass("active"),this._isSliding=!1,i.default(this._element).trigger(d);h&&this.cycle()}},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this).data("bs.carousel"),r=u({},b,i.default(this).data());"object"==typeof t&&(r=u({},r,t));var o="string"==typeof t?t:r.slide;if(n||(n=new e(this,r),i.default(this).data("bs.carousel",n)),"number"==typeof t)n.to(t);else if("string"==typeof o){if(void 0===n[o])throw new TypeError('No method named "'+o+'"');n[o]()}else r.interval&&r.ride&&(n.pause(),n.cycle())}))},e._dataApiClickHandler=function(t){var n=l.getSelectorFromElement(this);if(n){var r=i.default(n)[0];if(r&&i.default(r).hasClass("carousel")){var o=u({},i.default(r).data(),i.default(this).data()),a=this.getAttribute("data-slide-to");a&&(o.interval=!1),e._jQueryInterface.call(i.default(r),o),a&&i.default(r).data("bs.carousel").to(a),t.preventDefault()}}},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"Default",get:function(){return b}}]),e}();i.default(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",E._dataApiClickHandler),i.default(window).on("load.bs.carousel.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-ride="carousel"]')),t=0,n=e.length;t<n;t++){var r=i.default(e[t]);E._jQueryInterface.call(r,r.data())}})),i.default.fn[m]=E._jQueryInterface,i.default.fn[m].Constructor=E,i.default.fn[m].noConflict=function(){return i.default.fn[m]=g,E._jQueryInterface};var T="collapse",w=i.default.fn[T],A={toggle:!0,parent:""},M={toggle:"boolean",parent:"(string|element)"},O=function(){function e(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll('[data-toggle="collapse"]')),r=0,i=n.length;r<i;r++){var o=n[r],a=l.getSelectorFromElement(o),s=[].slice.call(document.querySelectorAll(a)).filter((function(t){return t===e}));null!==a&&s.length>0&&(this._selector=a,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=e.prototype;return t.toggle=function(){i.default(this._element).hasClass("show")?this.hide():this.show()},t.show=function(){var t,n,r=this;if(!(this._isTransitioning||i.default(this._element).hasClass("show")||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter((function(e){return"string"==typeof r._config.parent?e.getAttribute("data-parent")===r._config.parent:e.classList.contains("collapse")}))).length&&(t=null),t&&(n=i.default(t).not(this._selector).data("bs.collapse"))&&n._isTransitioning))){var o=i.default.Event("show.bs.collapse");if(i.default(this._element).trigger(o),!o.isDefaultPrevented()){t&&(e._jQueryInterface.call(i.default(t).not(this._selector),"hide"),n||i.default(t).data("bs.collapse",null));var a=this._getDimension();i.default(this._element).removeClass("collapse").addClass("collapsing"),this._element.style[a]=0,this._triggerArray.length&&i.default(this._triggerArray).removeClass("collapsed").attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(a[0].toUpperCase()+a.slice(1)),u=l.getTransitionDurationFromElement(this._element);i.default(this._element).one(l.TRANSITION_END,(function(){i.default(r._element).removeClass("collapsing").addClass("collapse show"),r._element.style[a]="",r.setTransitioning(!1),i.default(r._element).trigger("shown.bs.collapse")})).emulateTransitionEnd(u),this._element.style[a]=this._element[s]+"px"}}},t.hide=function(){var e=this;if(!this._isTransitioning&&i.default(this._element).hasClass("show")){var t=i.default.Event("hide.bs.collapse");if(i.default(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",l.reflow(this._element),i.default(this._element).addClass("collapsing").removeClass("collapse show");var r=this._triggerArray.length;if(r>0)for(var o=0;o<r;o++){var a=this._triggerArray[o],s=l.getSelectorFromElement(a);null!==s&&(i.default([].slice.call(document.querySelectorAll(s))).hasClass("show")||i.default(a).addClass("collapsed").attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[n]="";var u=l.getTransitionDurationFromElement(this._element);i.default(this._element).one(l.TRANSITION_END,(function(){e.setTransitioning(!1),i.default(e._element).removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")})).emulateTransitionEnd(u)}}},t.setTransitioning=function(e){this._isTransitioning=e},t.dispose=function(){i.default.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(e){return(e=u({},A,e)).toggle=Boolean(e.toggle),l.typeCheckConfig(T,e,M),e},t._getDimension=function(){return i.default(this._element).hasClass("width")?"width":"height"},t._getParent=function(){var t,n=this;l.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var r='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(t.querySelectorAll(r));return i.default(o).each((function(t,r){n._addAriaAndCollapsedClass(e._getTargetFromElement(r),[r])})),t},t._addAriaAndCollapsedClass=function(e,t){var n=i.default(e).hasClass("show");t.length&&i.default(t).toggleClass("collapsed",!n).attr("aria-expanded",n)},e._getTargetFromElement=function(e){var t=l.getSelectorFromElement(e);return t?document.querySelector(t):null},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.collapse"),o=u({},A,n.data(),"object"==typeof t&&t?t:{});if(!r&&o.toggle&&"string"==typeof t&&/show|hide/.test(t)&&(o.toggle=!1),r||(r=new e(this,o),n.data("bs.collapse",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"Default",get:function(){return A}}]),e}();i.default(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',(function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var t=i.default(this),n=l.getSelectorFromElement(this),r=[].slice.call(document.querySelectorAll(n));i.default(r).each((function(){var e=i.default(this),n=e.data("bs.collapse")?"toggle":t.data();O._jQueryInterface.call(e,n)}))})),i.default.fn[T]=O._jQueryInterface,i.default.fn[T].Constructor=O,i.default.fn[T].noConflict=function(){return i.default.fn[T]=w,O._jQueryInterface};var R="dropdown",S=i.default.fn[R],P=new RegExp("38|40|27"),L={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},F={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},I=function(){function e(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=e.prototype;return t.toggle=function(){if(!this._element.disabled&&!i.default(this._element).hasClass("disabled")){var t=i.default(this._menu).hasClass("show");e._clearMenus(),t||this.show(!0)}},t.show=function(t){if(void 0===t&&(t=!1),!(this._element.disabled||i.default(this._element).hasClass("disabled")||i.default(this._menu).hasClass("show"))){var n={relatedTarget:this._element},r=i.default.Event("show.bs.dropdown",n),a=e._getParentFromElement(this._element);if(i.default(a).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar&&t){if(void 0===o.default)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var s=this._element;"parent"===this._config.reference?s=a:l.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&i.default(a).addClass("position-static"),this._popper=new o.default(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===i.default(a).closest(".navbar-nav").length&&i.default(document.body).children().on("mouseover",null,i.default.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),i.default(this._menu).toggleClass("show"),i.default(a).toggleClass("show").trigger(i.default.Event("shown.bs.dropdown",n))}}},t.hide=function(){if(!this._element.disabled&&!i.default(this._element).hasClass("disabled")&&i.default(this._menu).hasClass("show")){var t={relatedTarget:this._element},n=i.default.Event("hide.bs.dropdown",t),r=e._getParentFromElement(this._element);i.default(r).trigger(n),n.isDefaultPrevented()||(this._popper&&this._popper.destroy(),i.default(this._menu).toggleClass("show"),i.default(r).toggleClass("show").trigger(i.default.Event("hidden.bs.dropdown",t)))}},t.dispose=function(){i.default.removeData(this._element,"bs.dropdown"),i.default(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;i.default(this._element).on("click.bs.dropdown",(function(t){t.preventDefault(),t.stopPropagation(),e.toggle()}))},t._getConfig=function(e){return e=u({},this.constructor.Default,i.default(this._element).data(),e),l.typeCheckConfig(R,e,this.constructor.DefaultType),e},t._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);t&&(this._menu=t.querySelector(".dropdown-menu"))}return this._menu},t._getPlacement=function(){var e=i.default(this._element.parentNode),t="bottom-start";return e.hasClass("dropup")?t=i.default(this._menu).hasClass("dropdown-menu-right")?"top-end":"top-start":e.hasClass("dropright")?t="right-start":e.hasClass("dropleft")?t="left-start":i.default(this._menu).hasClass("dropdown-menu-right")&&(t="bottom-end"),t},t._detectNavbar=function(){return i.default(this._element).closest(".navbar").length>0},t._getOffset=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=u({},t.offsets,e._config.offset(t.offsets,e._element)||{}),t}:t.offset=this._config.offset,t},t._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),u({},e,this._config.popperConfig)},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this).data("bs.dropdown");if(n||(n=new e(this,"object"==typeof t?t:null),i.default(this).data("bs.dropdown",n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},e._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=[].slice.call(document.querySelectorAll('[data-toggle="dropdown"]')),r=0,o=n.length;r<o;r++){var a=e._getParentFromElement(n[r]),s=i.default(n[r]).data("bs.dropdown"),u={relatedTarget:n[r]};if(t&&"click"===t.type&&(u.clickEvent=t),s){var c=s._menu;if(i.default(a).hasClass("show")&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&i.default.contains(a,t.target))){var l=i.default.Event("hide.bs.dropdown",u);i.default(a).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&i.default(document.body).children().off("mouseover",null,i.default.noop),n[r].setAttribute("aria-expanded","false"),s._popper&&s._popper.destroy(),i.default(c).removeClass("show"),i.default(a).removeClass("show").trigger(i.default.Event("hidden.bs.dropdown",u)))}}}},e._getParentFromElement=function(e){var t,n=l.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},e._dataApiKeydownHandler=function(t){if(!(/input|textarea/i.test(t.target.tagName)?32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||i.default(t.target).closest(".dropdown-menu").length):!P.test(t.which))&&!this.disabled&&!i.default(this).hasClass("disabled")){var n=e._getParentFromElement(this),r=i.default(n).hasClass("show");if(r||27!==t.which){if(t.preventDefault(),t.stopPropagation(),!r||27===t.which||32===t.which)return 27===t.which&&i.default(n.querySelector('[data-toggle="dropdown"]')).trigger("focus"),void i.default(this).trigger("click");var o=[].slice.call(n.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)")).filter((function(e){return i.default(e).is(":visible")}));if(0!==o.length){var a=o.indexOf(t.target);38===t.which&&a>0&&a--,40===t.which&&a<o.length-1&&a++,a<0&&(a=0),o[a].focus()}}}},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"Default",get:function(){return L}},{key:"DefaultType",get:function(){return F}}]),e}();i.default(document).on("keydown.bs.dropdown.data-api",'[data-toggle="dropdown"]',I._dataApiKeydownHandler).on("keydown.bs.dropdown.data-api",".dropdown-menu",I._dataApiKeydownHandler).on("click.bs.dropdown.data-api keyup.bs.dropdown.data-api",I._clearMenus).on("click.bs.dropdown.data-api",'[data-toggle="dropdown"]',(function(e){e.preventDefault(),e.stopPropagation(),I._jQueryInterface.call(i.default(this),"toggle")})).on("click.bs.dropdown.data-api",".dropdown form",(function(e){e.stopPropagation()})),i.default.fn[R]=I._jQueryInterface,i.default.fn[R].Constructor=I,i.default.fn[R].noConflict=function(){return i.default.fn[R]=S,I._jQueryInterface};var C=i.default.fn.modal,N={backdrop:!0,keyboard:!0,focus:!0,show:!0},j={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},D=function(){function e(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(".modal-dialog"),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var t=e.prototype;return t.toggle=function(e){return this._isShown?this.hide():this.show(e)},t.show=function(e){var t=this;if(!this._isShown&&!this._isTransitioning){i.default(this._element).hasClass("fade")&&(this._isTransitioning=!0);var n=i.default.Event("show.bs.modal",{relatedTarget:e});i.default(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),i.default(this._element).on("click.dismiss.bs.modal",'[data-dismiss="modal"]',(function(e){return t.hide(e)})),i.default(this._dialog).on("mousedown.dismiss.bs.modal",(function(){i.default(t._element).one("mouseup.dismiss.bs.modal",(function(e){i.default(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return t._showElement(e)})))}},t.hide=function(e){var t=this;if(e&&e.preventDefault(),this._isShown&&!this._isTransitioning){var n=i.default.Event("hide.bs.modal");if(i.default(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var r=i.default(this._element).hasClass("fade");if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),i.default(document).off("focusin.bs.modal"),i.default(this._element).removeClass("show"),i.default(this._element).off("click.dismiss.bs.modal"),i.default(this._dialog).off("mousedown.dismiss.bs.modal"),r){var o=l.getTransitionDurationFromElement(this._element);i.default(this._element).one(l.TRANSITION_END,(function(e){return t._hideModal(e)})).emulateTransitionEnd(o)}else this._hideModal()}}},t.dispose=function(){[window,this._element,this._dialog].forEach((function(e){return i.default(e).off(".bs.modal")})),i.default(document).off("focusin.bs.modal"),i.default.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(e){return e=u({},N,e),l.typeCheckConfig("modal",e,j),e},t._triggerBackdropTransition=function(){var e=this,t=i.default.Event("hidePrevented.bs.modal");if(i.default(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._element.scrollHeight>document.documentElement.clientHeight;n||(this._element.style.overflowY="hidden"),this._element.classList.add("modal-static");var r=l.getTransitionDurationFromElement(this._dialog);i.default(this._element).off(l.TRANSITION_END),i.default(this._element).one(l.TRANSITION_END,(function(){e._element.classList.remove("modal-static"),n||i.default(e._element).one(l.TRANSITION_END,(function(){e._element.style.overflowY=""})).emulateTransitionEnd(e._element,r)})).emulateTransitionEnd(r),this._element.focus()}},t._showElement=function(e){var t=this,n=i.default(this._element).hasClass("fade"),r=this._dialog?this._dialog.querySelector(".modal-body"):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),i.default(this._dialog).hasClass("modal-dialog-scrollable")&&r?r.scrollTop=0:this._element.scrollTop=0,n&&l.reflow(this._element),i.default(this._element).addClass("show"),this._config.focus&&this._enforceFocus();var o=i.default.Event("shown.bs.modal",{relatedTarget:e}),a=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,i.default(t._element).trigger(o)};if(n){var s=l.getTransitionDurationFromElement(this._dialog);i.default(this._dialog).one(l.TRANSITION_END,a).emulateTransitionEnd(s)}else a()},t._enforceFocus=function(){var e=this;i.default(document).off("focusin.bs.modal").on("focusin.bs.modal",(function(t){document!==t.target&&e._element!==t.target&&0===i.default(e._element).has(t.target).length&&e._element.focus()}))},t._setEscapeEvent=function(){var e=this;this._isShown?i.default(this._element).on("keydown.dismiss.bs.modal",(function(t){e._config.keyboard&&27===t.which?(t.preventDefault(),e.hide()):e._config.keyboard||27!==t.which||e._triggerBackdropTransition()})):this._isShown||i.default(this._element).off("keydown.dismiss.bs.modal")},t._setResizeEvent=function(){var e=this;this._isShown?i.default(window).on("resize.bs.modal",(function(t){return e.handleUpdate(t)})):i.default(window).off("resize.bs.modal")},t._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._showBackdrop((function(){i.default(document.body).removeClass("modal-open"),e._resetAdjustments(),e._resetScrollbar(),i.default(e._element).trigger("hidden.bs.modal")}))},t._removeBackdrop=function(){this._backdrop&&(i.default(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(e){var t=this,n=i.default(this._element).hasClass("fade")?"fade":"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",n&&this._backdrop.classList.add(n),i.default(this._backdrop).appendTo(document.body),i.default(this._element).on("click.dismiss.bs.modal",(function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===t._config.backdrop?t._triggerBackdropTransition():t.hide())})),n&&l.reflow(this._backdrop),i.default(this._backdrop).addClass("show"),!e)return;if(!n)return void e();var r=l.getTransitionDurationFromElement(this._backdrop);i.default(this._backdrop).one(l.TRANSITION_END,e).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){i.default(this._backdrop).removeClass("show");var o=function(){t._removeBackdrop(),e&&e()};if(i.default(this._element).hasClass("fade")){var a=l.getTransitionDurationFromElement(this._backdrop);i.default(this._backdrop).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else e&&e()},t._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=Math.round(e.left+e.right)<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var t=[].slice.call(document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")),n=[].slice.call(document.querySelectorAll(".sticky-top"));i.default(t).each((function(t,n){var r=n.style.paddingRight,o=i.default(n).css("padding-right");i.default(n).data("padding-right",r).css("padding-right",parseFloat(o)+e._scrollbarWidth+"px")})),i.default(n).each((function(t,n){var r=n.style.marginRight,o=i.default(n).css("margin-right");i.default(n).data("margin-right",r).css("margin-right",parseFloat(o)-e._scrollbarWidth+"px")}));var r=document.body.style.paddingRight,o=i.default(document.body).css("padding-right");i.default(document.body).data("padding-right",r).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}i.default(document.body).addClass("modal-open")},t._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"));i.default(e).each((function(e,t){var n=i.default(t).data("padding-right");i.default(t).removeData("padding-right"),t.style.paddingRight=n||""}));var t=[].slice.call(document.querySelectorAll(".sticky-top"));i.default(t).each((function(e,t){var n=i.default(t).data("margin-right");void 0!==n&&i.default(t).css("margin-right",n).removeData("margin-right")}));var n=i.default(document.body).data("padding-right");i.default(document.body).removeData("padding-right"),document.body.style.paddingRight=n||""},t._getScrollbarWidth=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},e._jQueryInterface=function(t,n){return this.each((function(){var r=i.default(this).data("bs.modal"),o=u({},N,i.default(this).data(),"object"==typeof t&&t?t:{});if(r||(r=new e(this,o),i.default(this).data("bs.modal",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t](n)}else o.show&&r.show(n)}))},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"Default",get:function(){return N}}]),e}();i.default(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',(function(e){var t,n=this,r=l.getSelectorFromElement(this);r&&(t=document.querySelector(r));var o=i.default(t).data("bs.modal")?"toggle":u({},i.default(t).data(),i.default(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var a=i.default(t).one("show.bs.modal",(function(e){e.isDefaultPrevented()||a.one("hidden.bs.modal",(function(){i.default(n).is(":visible")&&n.focus()}))}));D._jQueryInterface.call(i.default(t),o,this)})),i.default.fn.modal=D._jQueryInterface,i.default.fn.modal.Constructor=D,i.default.fn.modal.noConflict=function(){return i.default.fn.modal=C,D._jQueryInterface};var B=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],U={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},z=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,k=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;function G(e,t,n){if(0===e.length)return e;if(n&&"function"==typeof n)return n(e);for(var r=(new window.DOMParser).parseFromString(e,"text/html"),i=Object.keys(t),o=[].slice.call(r.body.querySelectorAll("*")),a=function(e,n){var r=o[e],a=r.nodeName.toLowerCase();if(-1===i.indexOf(r.nodeName.toLowerCase()))return r.parentNode.removeChild(r),"continue";var s=[].slice.call(r.attributes),u=[].concat(t["*"]||[],t[a]||[]);s.forEach((function(e){(function(e,t){var n=e.nodeName.toLowerCase();if(-1!==t.indexOf(n))return-1===B.indexOf(n)||Boolean(e.nodeValue.match(z)||e.nodeValue.match(k));for(var r=t.filter((function(e){return e instanceof RegExp})),i=0,o=r.length;i<o;i++)if(n.match(r[i]))return!0;return!1})(e,u)||r.removeAttribute(e.nodeName)}))},s=0,u=o.length;s<u;s++)a(s);return r.body.innerHTML}var q="tooltip",V=i.default.fn[q],H=new RegExp("(^|\\s)bs-tooltip\\S+","g"),W=["sanitize","whiteList","sanitizeFn"],X={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},Y={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},K={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",customClass:"",sanitize:!0,sanitizeFn:null,whiteList:U,popperConfig:null},$={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},Z=function(){function e(e,t){if(void 0===o.default)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var t=e.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(e){if(this._isEnabled)if(e){var t=this.constructor.DATA_KEY,n=i.default(e.currentTarget).data(t);n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(t,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(i.default(this.getTipElement()).hasClass("show"))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),i.default.removeData(this.element,this.constructor.DATA_KEY),i.default(this.element).off(this.constructor.EVENT_KEY),i.default(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&i.default(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===i.default(this.element).css("display"))throw new Error("Please use show on visible elements");var t=i.default.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){i.default(this.element).trigger(t);var n=l.findShadowRoot(this.element),r=i.default.contains(null!==n?n:this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!r)return;var a=this.getTipElement(),s=l.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&i.default(a).addClass("fade");var u="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,c=this._getAttachment(u);this.addAttachmentClass(c);var f=this._getContainer();i.default(a).data(this.constructor.DATA_KEY,this),i.default.contains(this.element.ownerDocument.documentElement,this.tip)||i.default(a).appendTo(f),i.default(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new o.default(this.element,a,this._getPopperConfig(c)),i.default(a).addClass("show"),i.default(a).addClass(this.config.customClass),"ontouchstart"in document.documentElement&&i.default(document.body).children().on("mouseover",null,i.default.noop);var h=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,i.default(e.element).trigger(e.constructor.Event.SHOWN),"out"===t&&e._leave(null,e)};if(i.default(this.tip).hasClass("fade")){var d=l.getTransitionDurationFromElement(this.tip);i.default(this.tip).one(l.TRANSITION_END,h).emulateTransitionEnd(d)}else h()}},t.hide=function(e){var t=this,n=this.getTipElement(),r=i.default.Event(this.constructor.Event.HIDE),o=function(){"show"!==t._hoverState&&n.parentNode&&n.parentNode.removeChild(n),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),i.default(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),e&&e()};if(i.default(this.element).trigger(r),!r.isDefaultPrevented()){if(i.default(n).removeClass("show"),"ontouchstart"in document.documentElement&&i.default(document.body).children().off("mouseover",null,i.default.noop),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,i.default(this.tip).hasClass("fade")){var a=l.getTransitionDurationFromElement(n);i.default(n).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(e){i.default(this.getTipElement()).addClass("bs-tooltip-"+e)},t.getTipElement=function(){return this.tip=this.tip||i.default(this.config.template)[0],this.tip},t.setContent=function(){var e=this.getTipElement();this.setElementContent(i.default(e.querySelectorAll(".tooltip-inner")),this.getTitle()),i.default(e).removeClass("fade show")},t.setElementContent=function(e,t){"object"!=typeof t||!t.nodeType&&!t.jquery?this.config.html?(this.config.sanitize&&(t=G(t,this.config.whiteList,this.config.sanitizeFn)),e.html(t)):e.text(t):this.config.html?i.default(t).parent().is(e)||e.empty().append(t):e.text(i.default(t).text())},t.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},t._getPopperConfig=function(e){var t=this;return u({},{placement:e,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}},this.config.popperConfig)},t._getOffset=function(){var e=this,t={};return"function"==typeof this.config.offset?t.fn=function(t){return t.offsets=u({},t.offsets,e.config.offset(t.offsets,e.element)||{}),t}:t.offset=this.config.offset,t},t._getContainer=function(){return!1===this.config.container?document.body:l.isElement(this.config.container)?i.default(this.config.container):i.default(document).find(this.config.container)},t._getAttachment=function(e){return Y[e.toUpperCase()]},t._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach((function(t){if("click"===t)i.default(e.element).on(e.constructor.Event.CLICK,e.config.selector,(function(t){return e.toggle(t)}));else if("manual"!==t){var n="hover"===t?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,r="hover"===t?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;i.default(e.element).on(n,e.config.selector,(function(t){return e._enter(t)})).on(r,e.config.selector,(function(t){return e._leave(t)}))}})),this._hideModalHandler=function(){e.element&&e.hide()},i.default(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=u({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(e,t){var n=this.constructor.DATA_KEY;(t=t||i.default(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusin"===e.type?"focus":"hover"]=!0),i.default(t.getTipElement()).hasClass("show")||"show"===t._hoverState?t._hoverState="show":(clearTimeout(t._timeout),t._hoverState="show",t.config.delay&&t.config.delay.show?t._timeout=setTimeout((function(){"show"===t._hoverState&&t.show()}),t.config.delay.show):t.show())},t._leave=function(e,t){var n=this.constructor.DATA_KEY;(t=t||i.default(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusout"===e.type?"focus":"hover"]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState="out",t.config.delay&&t.config.delay.hide?t._timeout=setTimeout((function(){"out"===t._hoverState&&t.hide()}),t.config.delay.hide):t.hide())},t._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},t._getConfig=function(e){var t=i.default(this.element).data();return Object.keys(t).forEach((function(e){-1!==W.indexOf(e)&&delete t[e]})),"number"==typeof(e=u({},this.constructor.Default,t,"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),l.typeCheckConfig(q,e,this.constructor.DefaultType),e.sanitize&&(e.template=G(e.template,e.whiteList,e.sanitizeFn)),e},t._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},t._cleanTipClass=function(){var e=i.default(this.getTipElement()),t=e.attr("class").match(H);null!==t&&t.length&&e.removeClass(t.join(""))},t._handlePopperPlacementChange=function(e){this.tip=e.instance.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},t._fixTransition=function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&(i.default(e).removeClass("fade"),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.tooltip"),o="object"==typeof t&&t;if((r||!/dispose|hide/.test(t))&&(r||(r=new e(this,o),n.data("bs.tooltip",r)),"string"==typeof t)){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"Default",get:function(){return K}},{key:"NAME",get:function(){return q}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return $}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return X}}]),e}();i.default.fn[q]=Z._jQueryInterface,i.default.fn[q].Constructor=Z,i.default.fn[q].noConflict=function(){return i.default.fn[q]=V,Z._jQueryInterface};var Q="popover",J=i.default.fn[Q],ee=new RegExp("(^|\\s)bs-popover\\S+","g"),te=u({},Z.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),ne=u({},Z.DefaultType,{content:"(string|element|function)"}),re={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},ie=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.isWithContent=function(){return this.getTitle()||this._getContent()},o.addAttachmentClass=function(e){i.default(this.getTipElement()).addClass("bs-popover-"+e)},o.getTipElement=function(){return this.tip=this.tip||i.default(this.config.template)[0],this.tip},o.setContent=function(){var e=i.default(this.getTipElement());this.setElementContent(e.find(".popover-header"),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this.element)),this.setElementContent(e.find(".popover-body"),t),e.removeClass("fade show")},o._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},o._cleanTipClass=function(){var e=i.default(this.getTipElement()),t=e.attr("class").match(ee);null!==t&&t.length>0&&e.removeClass(t.join(""))},r._jQueryInterface=function(e){return this.each((function(){var t=i.default(this).data("bs.popover"),n="object"==typeof e?e:null;if((t||!/dispose|hide/.test(e))&&(t||(t=new r(this,n),i.default(this).data("bs.popover",t)),"string"==typeof e)){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}}))},s(r,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"Default",get:function(){return te}},{key:"NAME",get:function(){return Q}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return re}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return ne}}]),r}(Z);i.default.fn[Q]=ie._jQueryInterface,i.default.fn[Q].Constructor=ie,i.default.fn[Q].noConflict=function(){return i.default.fn[Q]=J,ie._jQueryInterface};var oe="scrollspy",ae=i.default.fn[oe],se={offset:10,method:"auto",target:""},ue={offset:"number",method:"string",target:"(string|element)"},ce=function(){function e(e,t){var n=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" .nav-link,"+this._config.target+" .list-group-item,"+this._config.target+" .dropdown-item",this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,i.default(this._scrollElement).on("scroll.bs.scrollspy",(function(e){return n._process(e)})),this.refresh(),this._process()}var t=e.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":"position",n="auto"===this._config.method?t:this._config.method,r="position"===n?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(e){var t,o=l.getSelectorFromElement(e);if(o&&(t=document.querySelector(o)),t){var a=t.getBoundingClientRect();if(a.width||a.height)return[i.default(t)[n]().top+r,o]}return null})).filter((function(e){return e})).sort((function(e,t){return e[0]-t[0]})).forEach((function(t){e._offsets.push(t[0]),e._targets.push(t[1])}))},t.dispose=function(){i.default.removeData(this._element,"bs.scrollspy"),i.default(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(e){if("string"!=typeof(e=u({},se,"object"==typeof e&&e?e:{})).target&&l.isElement(e.target)){var t=i.default(e.target).attr("id");t||(t=l.getUID(oe),i.default(e.target).attr("id",t)),e.target="#"+t}return l.typeCheckConfig(oe,e,ue),e},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1])&&this._activate(this._targets[i])}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map((function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'})),n=i.default([].slice.call(document.querySelectorAll(t.join(","))));n.hasClass("dropdown-item")?(n.closest(".dropdown").find(".dropdown-toggle").addClass("active"),n.addClass("active")):(n.addClass("active"),n.parents(".nav, .list-group").prev(".nav-link, .list-group-item").addClass("active"),n.parents(".nav, .list-group").prev(".nav-item").children(".nav-link").addClass("active")),i.default(this._scrollElement).trigger("activate.bs.scrollspy",{relatedTarget:e})},t._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(e){return e.classList.contains("active")})).forEach((function(e){return e.classList.remove("active")}))},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this).data("bs.scrollspy");if(n||(n=new e(this,"object"==typeof t&&t),i.default(this).data("bs.scrollspy",n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"Default",get:function(){return se}}]),e}();i.default(window).on("load.bs.scrollspy.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-spy="scroll"]')),t=e.length;t--;){var n=i.default(e[t]);ce._jQueryInterface.call(n,n.data())}})),i.default.fn[oe]=ce._jQueryInterface,i.default.fn[oe].Constructor=ce,i.default.fn[oe].noConflict=function(){return i.default.fn[oe]=ae,ce._jQueryInterface};var le=i.default.fn.tab,fe=function(){function e(e){this._element=e}var t=e.prototype;return t.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&i.default(this._element).hasClass("active")||i.default(this._element).hasClass("disabled"))){var t,n,r=i.default(this._element).closest(".nav, .list-group")[0],o=l.getSelectorFromElement(this._element);if(r){var a="UL"===r.nodeName||"OL"===r.nodeName?"> li > .active":".active";n=(n=i.default.makeArray(i.default(r).find(a)))[n.length-1]}var s=i.default.Event("hide.bs.tab",{relatedTarget:this._element}),u=i.default.Event("show.bs.tab",{relatedTarget:n});if(n&&i.default(n).trigger(s),i.default(this._element).trigger(u),!u.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(t=document.querySelector(o)),this._activate(this._element,r);var c=function(){var t=i.default.Event("hidden.bs.tab",{relatedTarget:e._element}),r=i.default.Event("shown.bs.tab",{relatedTarget:n});i.default(n).trigger(t),i.default(e._element).trigger(r)};t?this._activate(t,t.parentNode,c):c()}}},t.dispose=function(){i.default.removeData(this._element,"bs.tab"),this._element=null},t._activate=function(e,t,n){var r=this,o=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?i.default(t).children(".active"):i.default(t).find("> li > .active"))[0],a=n&&o&&i.default(o).hasClass("fade"),s=function(){return r._transitionComplete(e,o,n)};if(o&&a){var u=l.getTransitionDurationFromElement(o);i.default(o).removeClass("show").one(l.TRANSITION_END,s).emulateTransitionEnd(u)}else s()},t._transitionComplete=function(e,t,n){if(t){i.default(t).removeClass("active");var r=i.default(t.parentNode).find("> .dropdown-menu .active")[0];r&&i.default(r).removeClass("active"),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(i.default(e).addClass("active"),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),l.reflow(e),e.classList.contains("fade")&&e.classList.add("show"),e.parentNode&&i.default(e.parentNode).hasClass("dropdown-menu")){var o=i.default(e).closest(".dropdown")[0];if(o){var a=[].slice.call(o.querySelectorAll(".dropdown-toggle"));i.default(a).addClass("active")}e.setAttribute("aria-expanded",!0)}n&&n()},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.tab");if(r||(r=new e(this),n.data("bs.tab",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}}]),e}();i.default(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',(function(e){e.preventDefault(),fe._jQueryInterface.call(i.default(this),"show")})),i.default.fn.tab=fe._jQueryInterface,i.default.fn.tab.Constructor=fe,i.default.fn.tab.noConflict=function(){return i.default.fn.tab=le,fe._jQueryInterface};var he=i.default.fn.toast,de={animation:"boolean",autohide:"boolean",delay:"number"},pe={animation:!0,autohide:!0,delay:500},_e=function(){function e(e,t){this._element=e,this._config=this._getConfig(t),this._timeout=null,this._setListeners()}var t=e.prototype;return t.show=function(){var e=this,t=i.default.Event("show.bs.toast");if(i.default(this._element).trigger(t),!t.isDefaultPrevented()){this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");var n=function(){e._element.classList.remove("showing"),e._element.classList.add("show"),i.default(e._element).trigger("shown.bs.toast"),e._config.autohide&&(e._timeout=setTimeout((function(){e.hide()}),e._config.delay))};if(this._element.classList.remove("hide"),l.reflow(this._element),this._element.classList.add("showing"),this._config.animation){var r=l.getTransitionDurationFromElement(this._element);i.default(this._element).one(l.TRANSITION_END,n).emulateTransitionEnd(r)}else n()}},t.hide=function(){if(this._element.classList.contains("show")){var e=i.default.Event("hide.bs.toast");i.default(this._element).trigger(e),e.isDefaultPrevented()||this._close()}},t.dispose=function(){this._clearTimeout(),this._element.classList.contains("show")&&this._element.classList.remove("show"),i.default(this._element).off("click.dismiss.bs.toast"),i.default.removeData(this._element,"bs.toast"),this._element=null,this._config=null},t._getConfig=function(e){return e=u({},pe,i.default(this._element).data(),"object"==typeof e&&e?e:{}),l.typeCheckConfig("toast",e,this.constructor.DefaultType),e},t._setListeners=function(){var e=this;i.default(this._element).on("click.dismiss.bs.toast",'[data-dismiss="toast"]',(function(){return e.hide()}))},t._close=function(){var e=this,t=function(){e._element.classList.add("hide"),i.default(e._element).trigger("hidden.bs.toast")};if(this._element.classList.remove("show"),this._config.animation){var n=l.getTransitionDurationFromElement(this._element);i.default(this._element).one(l.TRANSITION_END,t).emulateTransitionEnd(n)}else t()},t._clearTimeout=function(){clearTimeout(this._timeout),this._timeout=null},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.toast");if(r||(r=new e(this,"object"==typeof t&&t),n.data("bs.toast",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t](this)}}))},s(e,null,[{key:"VERSION",get:function(){return"4.6.0"}},{key:"DefaultType",get:function(){return de}},{key:"Default",get:function(){return pe}}]),e}();i.default.fn.toast=_e._jQueryInterface,i.default.fn.toast.Constructor=_e,i.default.fn.toast.noConflict=function(){return i.default.fn.toast=he,_e._jQueryInterface},e.Alert=d,e.Button=_,e.Carousel=E,e.Collapse=O,e.Dropdown=I,e.Modal=D,e.Popover=ie,e.Scrollspy=ce,e.Tab=fe,e.Toast=_e,e.Tooltip=Z,e.Util=l,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(2),n(3))},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,u=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,l=o.indexOf,f={},h=f.toString,d=f.hasOwnProperty,p=d.toString,_=p.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},b=n.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,i,o=(n=n||b).createElement("script");if(o.text=e,t)for(r in y)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[h.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)};function w(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!v(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.5.1",constructor:T,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,a[t]=T.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},T.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=a(e))||"function"==typeof(n=d.call(t,"constructor")&&t.constructor)&&p.call(n)===_)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(w(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?T.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(w(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return u(a)},guid:1,support:m}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var A=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,r,i,o,a,s,u,c,l,f,h,d,p,_,m,v,g,b,y="sizzle"+1*new Date,x=e.document,E=0,T=0,w=ue(),A=ue(),M=ue(),O=ue(),R=function(e,t){return e===t&&(f=!0),0},S={}.hasOwnProperty,P=[],L=P.pop,F=P.push,I=P.push,C=P.slice,N=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",D="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",U="\\["+D+"*("+B+")(?:"+D+"*([*^$|!~]?=)"+D+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+D+"*\\]",z=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|.*)\\)|)",k=new RegExp(D+"+","g"),G=new RegExp("^"+D+"+|((?:^|[^\\\\])(?:\\\\.)*)"+D+"+$","g"),q=new RegExp("^"+D+"*,"+D+"*"),V=new RegExp("^"+D+"*([>+~]|"+D+")"+D+"*"),H=new RegExp(D+"|>"),W=new RegExp(z),X=new RegExp("^"+B+"$"),Y={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+D+"*(even|odd|(([+-]|)(\\d*)n|)"+D+"*(?:([+-]|)"+D+"*(\\d+)|))"+D+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+D+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+D+"*((?:-\\d)?\\d*)"+D+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){h()},ae=ye((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{I.apply(P=C.call(x.childNodes),x.childNodes),P[x.childNodes.length].nodeType}catch(e){I={apply:P.length?function(e,t){F.apply(e,C.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,c,l,f,p,v,g=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!i&&(h(t),t=t||d,_)){if(11!==x&&(f=J.exec(e)))if(o=f[1]){if(9===x){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(g&&(c=g.getElementById(o))&&b(t,c)&&c.id===o)return r.push(c),r}else{if(f[2])return I.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!O[e+" "]&&(!m||!m.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(v=e,g=t,1===x&&(H.test(e)||V.test(e))){for((g=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((l=t.getAttribute("id"))?l=l.replace(re,ie):t.setAttribute("id",l=y)),s=(p=a(e)).length;s--;)p[s]=(l?"#"+l:":scope")+" "+be(p[s]);v=p.join(",")}try{return I.apply(r,g.querySelectorAll(v)),r}catch(t){O(e,!0)}finally{l===y&&t.removeAttribute("id")}}}return u(e.replace(G,"$1"),t,r,i)}function ue(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ce(e){return e[y]=!0,e}function le(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function he(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function _e(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ce((function(t){return t=+t,ce((function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},h=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:x;return a!=d&&9===a.nodeType&&a.documentElement?(p=(d=a).documentElement,_=!o(d),x!=d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=le((function(e){return p.appendChild(e).appendChild(d.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=le((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=le((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=le((function(e){return p.appendChild(e).id=y,!d.getElementsByName||!d.getElementsByName(y).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&_){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&_){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&_)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=Q.test(d.querySelectorAll))&&(le((function(e){var t;p.appendChild(e).innerHTML="<a id='"+y+"'></a><select id='"+y+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+D+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+D+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+y+"-]").length||m.push("~="),(t=d.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+D+"*name"+D+"*="+D+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+y+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),le((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+D+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Q.test(g=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&le((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),v.push("!=",z)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(p.compareDocumentPosition),b=t||Q.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},R=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==d||e.ownerDocument==x&&b(x,e)?-1:t==d||t.ownerDocument==x&&b(x,t)?1:l?N(l,e)-N(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==d?-1:t==d?1:i?-1:o?1:l?N(l,e)-N(l,t):0;if(i===o)return he(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?he(a[r],s[r]):a[r]==x?-1:s[r]==x?1:0},d):d},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(h(e),n.matchesSelector&&_&&!O[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var r=g.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){O(t,!0)}return se(t,d,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=d&&h(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=d&&h(e);var i=r.attrHandle[t.toLowerCase()],o=i&&S.call(r.attrHandle,t.toLowerCase())?i(e,t,!_):void 0;return void 0!==o?o:n.attributes||!_?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(R),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return l=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ce,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=w[e+" "];return t||(t=new RegExp("(^|"+D+")"+e+"("+D+"|$)"))&&w(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(k," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,h,d,p,_=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),g=!u&&!s,b=!1;if(m){if(o){for(;_;){for(h=t;h=h[_];)if(s?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;p=_="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&g){for(b=(d=(c=(l=(f=(h=m)[y]||(h[y]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===E&&c[1])&&c[2],h=d&&m.childNodes[d];h=++d&&h&&h[_]||(b=d=0)||p.pop();)if(1===h.nodeType&&++b&&h===t){l[e]=[E,d,b];break}}else if(g&&(b=d=(c=(l=(f=(h=t)[y]||(h[y]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===E&&c[1]),!1===b)for(;(h=++d&&h&&h[_]||(b=d=0)||p.pop())&&((s?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(g&&((l=(f=h[y]||(h[y]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]=[E,b]),h!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[y]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=N(e,o[a])]=!(n[r]=o[a])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace(G,"$1"));return r[y]?ce((function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ce((function(e){return X.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=_?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:_e(!1),disabled:_e(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ge(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=T++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,h=[E,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[y]||(t[y]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===E&&c[1]===s)return h[2]=c[2];if(l[o]=h,h[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ee(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function Te(e,t,n,r,i,o){return r&&!r[y]&&(r=Te(r)),i&&!i[y]&&(i=Te(i,o)),ce((function(o,a,s,u){var c,l,f,h=[],d=[],p=a.length,_=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?_:Ee(_,h,e,s,u),v=n?i||(o?e:p||r)?[]:a:m;if(n&&n(m,v,s,u),r)for(c=Ee(v,d),r(c,[],s,u),l=c.length;l--;)(f=c[l])&&(v[d[l]]=!(m[d[l]]=f));if(o){if(i||e){if(i){for(c=[],l=v.length;l--;)(f=v[l])&&c.push(m[l]=f);i(null,v=[],c,u)}for(l=v.length;l--;)(f=v[l])&&(c=i?N(o,f):h[l])>-1&&(o[c]=!(a[c]=f))}}else v=Ee(v===a?v.splice(p,v.length):v),i?i(null,a,v,u):I.apply(a,v)}))}function we(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=ye((function(e){return e===t}),s,!0),f=ye((function(e){return N(t,e)>-1}),s,!0),h=[function(e,n,r){var i=!a&&(r||n!==c)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])h=[ye(xe(h),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[y]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return Te(u>1&&xe(h),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(G,"$1"),n,u<i&&we(e.slice(u,i)),i<o&&we(e=e.slice(i)),i<o&&be(e))}h.push(n)}return xe(h)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,a=se.tokenize=function(e,t){var n,i,o,a,s,u,c,l=A[e+" "];if(l)return t?0:l.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(i=q.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=V.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(G," ")}),s=s.slice(n.length)),r.filter)!(i=Y[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):A(e,u).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=M[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=we(t[n]))[y]?i.push(s):o.push(s);(s=M(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,l){var f,p,m,v=0,g="0",b=o&&[],y=[],x=c,T=o||i&&r.find.TAG("*",l),w=E+=null==x?1:Math.random()||.1,A=T.length;for(l&&(c=a==d||a||l);g!==A&&null!=(f=T[g]);g++){if(i&&f){for(p=0,a||f.ownerDocument==d||(h(f),s=!_);m=e[p++];)if(m(f,a||d,s)){u.push(f);break}l&&(E=w)}n&&((f=!m&&f)&&v--,o&&b.push(f))}if(v+=g,n&&g!==v){for(p=0;m=t[p++];)m(b,y,a,s);if(o){if(v>0)for(;g--;)b[g]||y[g]||(y[g]=L.call(u));y=Ee(y)}I.apply(u,y),l&&!o&&y.length>0&&v+t.length>1&&se.uniqueSort(u)}return l&&(E=w,c=x),b};return n?ce(o):o}(o,i))).selector=e}return s},u=se.select=function(e,t,n,i){var o,u,c,l,f,h="function"==typeof e&&e,d=!i&&a(e=h.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&_&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=Y.needsContext.test(e)?0:u.length;o--&&(c=u[o],!r.relative[l=c.type]);)if((f=r.find[l])&&(i=f(c.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&be(u)))return I.apply(n,i),n;break}}return(h||s(e,d))(i,t,!_,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=y.split("").sort(R).join("")===y,n.detectDuplicates=!!f,h(),n.sortDetached=le((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),le((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&le((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),le((function(e){return null==e.getAttribute("disabled")}))||fe(j,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);T.find=A,T.expr=A.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=A.uniqueSort,T.text=A.getText,T.isXMLDoc=A.isXML,T.contains=A.contains,T.escapeSelector=A.escape;var M=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&T(e).is(n))break;r.push(e)}return r},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},R=T.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,t,n){return v(t)?T.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?T.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?T.grep(e,(function(e){return l.call(t,e)>-1!==n})):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<r;t++)if(T.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,i[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&R.test(e)?T(e):e||[],!1).length}});var F,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||F,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:I.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),P.test(r[1])&&T.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,F=T(b);var C=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function j(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&T(e);if(!R.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?l.call(T(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return M(e,"parentNode")},parentsUntil:function(e,t,n){return M(e,"parentNode",n)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return M(e,"nextSibling")},prevAll:function(e){return M(e,"previousSibling")},nextUntil:function(e,t,n){return M(e,"nextSibling",n)},prevUntil:function(e,t,n){return M(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(S(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(n,r){var i=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(N[e]||T.uniqueSort(i),C.test(e)&&i.reverse()),this.pushStack(i)}}));var D=/[^\x20\t\r\n\f]+/g;function B(e){return e}function U(e){throw e}function z(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(D)||[],(function(e,n){t[n]=!0})),t}(e):T.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){T.each(n,(function(n,r){v(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==E(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return T.each(arguments,(function(e,t){for(var n;(n=T.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?T.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(n){T.each(t,(function(t,r){var i=v(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(c)?i?c.call(n,a(o,t,B,i),a(o,t,U,i)):(o++,c.call(n,a(o,t,B,i),a(o,t,U,i),a(o,t,B,t.notifyWith))):(r!==B&&(s=void 0,u=[n]),(i||t.resolveWith)(s,u))}},l=i?c:function(){try{c()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(r!==U&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?l():(T.Deferred.getStackHook&&(l.stackTrace=T.Deferred.getStackHook()),n.setTimeout(l))}}return T.Deferred((function(n){t[0][3].add(a(0,n,v(i)?i:B,n.notifyWith)),t[1][3].add(a(0,n,v(e)?e:B)),t[2][3].add(a(0,n,v(r)?r:U))})).promise()},promise:function(e){return null!=e?T.extend(e,i):i}},o={};return T.each(t,(function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=T.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(z(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||v(i[n]&&i[n].then)))return o.then();for(;n--;)z(i[n],a(n),o.reject);return o.promise()}});var k=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&k.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout((function(){throw e}))};var G=T.Deferred();function q(){b.removeEventListener("DOMContentLoaded",q),n.removeEventListener("load",q),T.ready()}T.fn.ready=function(e){return G.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||G.resolveWith(b,[T]))}}),T.ready.then=G.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(T.ready):(b.addEventListener("DOMContentLoaded",q),n.addEventListener("load",q));var V=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===E(n))for(s in i=!0,n)V(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(T(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},H=/^-ms-/,W=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(H,"ms-").replace(W,X)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function $(){this.expando=T.expando+$.uid++}$.uid=1,$.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Y(t)]=n;else for(r in t)i[Y(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(D)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var Z=new $,Q=new $,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:J.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return Q.hasData(e)||Z.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return Z.access(e,t,n)},_removeData:function(e,t){Z.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Q.get(o),1===o.nodeType&&!Z.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Y(r.slice(5)),te(o,r,i[r]));Z.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Q.set(this,e)})):V(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=Q.get(o,e))||void 0!==(n=te(o,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Z.get(e,t),n&&(!r||Array.isArray(n)?r=Z.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,i=n.shift(),o=T._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){T.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Z.get(e,n)||Z.access(e,n,{empty:T.Callbacks("once memory").add((function(){Z.remove(e,[t+"queue",n])}))})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each((function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=T.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Z.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=b.documentElement,ae=function(e){return T.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(ae=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===T.css(e,"display")};function ce(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return T.css(e,t,"")},u=s(),c=n&&n[3]||(T.cssNumber[t]?"":"px"),l=e.nodeType&&(T.cssNumber[t]||"px"!==c&&+u)&&re.exec(T.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)T.style(e,t,l+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),l/=o;l*=2,T.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}var le={};function fe(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=T.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function he(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Z.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ue(r)&&(i[o]=fe(r))):"none"!==n&&(i[o]="none",Z.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}T.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?T(this).show():T(this).hide()}))}});var de,pe,_e=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;de=b.createDocumentFragment().appendChild(b.createElement("div")),(pe=b.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),de.appendChild(pe),m.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",m.option=!!de.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?T.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Z.set(e[n],"globalEval",!t||Z.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,m.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var xe=/<|&#?\w+;/;function Ee(e,t,n,r,i){for(var o,a,s,u,c,l,f=t.createDocumentFragment(),h=[],d=0,p=e.length;d<p;d++)if((o=e[d])||0===o)if("object"===E(o))T.merge(h,o.nodeType?[o]:o);else if(xe.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(me.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+T.htmlPrefilter(o)+u[2],l=u[0];l--;)a=a.lastChild;T.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(t.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(c=ae(o),a=be(f.appendChild(o),"script"),c&&ye(a),n)for(l=0;o=a[l++];)ve.test(o.type||"")&&n.push(o);return f}var Te=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ae=/^([^.]*)(?:\.(.+)|)/;function Me(){return!0}function Oe(){return!1}function Re(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Se(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Se(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Oe;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return T().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),e.each((function(){T.event.add(this,t,i,r,n)}))}function Pe(e,t,n){n?(Z.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=Z.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),Z.set(this,t,o),r=n(this,t),this[t](),o!==(i=Z.get(this,t))||r?Z.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else o.length&&(Z.set(this,t,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Z.get(e,t)&&T.event.add(e,t,Me)}T.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,h,d,p,_,m=Z.get(e);if(K(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(oe,i),n.guid||(n.guid=T.guid++),(u=m.events)||(u=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(D)||[""]).length;c--;)d=_=(s=Ae.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),d&&(f=T.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=T.event.special[d]||{},l=T.extend({type:d,origType:_,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=u[d])||((h=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,p,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),T.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,h,d,p,_,m=Z.hasData(e)&&Z.get(e);if(m&&(u=m.events)){for(c=(t=(t||"").match(D)||[""]).length;c--;)if(d=_=(s=Ae.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),d){for(f=T.event.special[d]||{},h=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)l=h[o],!i&&_!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(e,l));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(e,p,m.handle)||T.removeEvent(e,d,m.handle),delete u[d])}else for(d in u)T.event.remove(e,d+t[c],n,r,!0);T.isEmptyObject(u)&&Z.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=T.event.fix(e),c=(Z.get(this,"events")||Object.create(null))[u.type]||[],l=T.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(a=T.event.handlers.call(this,u,c),t=0;(i=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?T(i,this).index(c)>-1:T.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return _e.test(t.type)&&t.click&&S(t,"input")&&Pe(t,"click",Me),!1},trigger:function(e){var t=this||e;return _e.test(t.type)&&t.click&&S(t,"input")&&Pe(t,"click"),!0},_default:function(e){var t=e.target;return _e.test(t.type)&&t.click&&S(t,"input")&&Z.get(t,"click")||S(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Me:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Me,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Me,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Me,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){T.event.special[e]={setup:function(){return Pe(this,e,Re),!1},trigger:function(){return Pe(this,e),!0},delegateType:t}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||T.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),T.fn.extend({on:function(e,t,n,r){return Se(this,e,t,n,r)},one:function(e,t,n,r){return Se(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Oe),this.each((function(){T.event.remove(this,e,n,t)}))}});var Le=/<script|<style|<link/i,Fe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ce(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function je(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function De(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Z.hasData(e)&&(s=Z.get(e).events))for(i in Z.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)T.event.add(t,i,s[i][n]);Q.hasData(e)&&(o=Q.access(e),a=T.extend({},o),Q.set(t,a))}}function Be(e,t){var n=t.nodeName.toLowerCase();"input"===n&&_e.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ue(e,t,n,r){t=u(t);var i,o,a,s,c,l,f=0,h=e.length,d=h-1,p=t[0],_=v(p);if(_||h>1&&"string"==typeof p&&!m.checkClone&&Fe.test(p))return e.each((function(i){var o=e.eq(i);_&&(t[0]=p.call(this,i,o.html())),Ue(o,t,n,r)}));if(h&&(o=(i=Ee(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=T.map(be(i,"script"),Ne)).length;f<h;f++)c=i,f!==d&&(c=T.clone(c,!0,!0),s&&T.merge(a,be(c,"script"))),n.call(e[f],c,f);if(s)for(l=a[a.length-1].ownerDocument,T.map(a,je),f=0;f<s;f++)c=a[f],ve.test(c.type||"")&&!Z.access(c,"globalEval")&&T.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?T._evalUrl&&!c.noModule&&T._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},l):x(c.textContent.replace(Ie,""),c,l))}return e}function ze(e,t,n){for(var r,i=t?T.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(be(r)),r.parentNode&&(n&&ae(r)&&ye(be(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=ae(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(a=be(s),r=0,i=(o=be(e)).length;r<i;r++)Be(o[r],a[r]);if(t)if(n)for(o=o||be(e),a=a||be(s),r=0,i=o.length;r<i;r++)De(o[r],a[r]);else De(e,s);return(a=be(s,"script")).length>0&&ye(a,!u&&be(e,"script")),s},cleanData:function(e){for(var t,n,r,i=T.event.special,o=0;void 0!==(n=e[o]);o++)if(K(n)){if(t=n[Z.expando]){if(t.events)for(r in t.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[Z.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),T.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return V(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ue(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ce(this,e).appendChild(e)}))},prepend:function(){return Ue(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ce(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ue(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ue(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return V(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!ge[(me.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ue(this,arguments,(function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var n,r=[],i=T(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),T(i[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var ke=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),Ge=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},qe=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Ve=new RegExp(ie.join("|"),"i");function He(e,t,n){var r,i,o,a,s=e.style;return(n=n||Ge(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ae(e)||(a=T.style(e,t)),!m.pixelBoxStyles()&&ke.test(a)&&Ve.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),i=36===t(e.width),l.style.position="absolute",o=12===t(l.offsetWidth/3),oe.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,a,s,u,c=b.createElement("div"),l=b.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,T.extend(m,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,r,i;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),r=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(r),i=n.getComputedStyle(t),s=parseInt(i.height)>3,oe.removeChild(e)),s}}))}();var Xe=["Webkit","Moz","ms"],Ye=b.createElement("div").style,Ke={};function $e(e){var t=T.cssProps[e]||Ke[e];return t||(e in Ye?e:Ke[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ye)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=re.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=T.css(e,n+ie[a],!0,i)),r?("content"===n&&(u-=T.css(e,"padding"+ie[a],!0,i)),"margin"!==n&&(u-=T.css(e,"border"+ie[a]+"Width",!0,i))):(u+=T.css(e,"padding"+ie[a],!0,i),"padding"!==n?u+=T.css(e,"border"+ie[a]+"Width",!0,i):s+=T.css(e,"border"+ie[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function rt(e,t,n){var r=Ge(e),i=(!m.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,r),o=i,a=He(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(ke.test(a)){if(!n)return a;a="auto"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===T.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===T.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function it(e,t,n,r,i){return new it.prototype.init(e,t,n,r,i)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=He(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=Y(t),u=Qe.test(t),c=e.style;if(u||(t=$e(s)),a=T.cssHooks[t]||T.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:c[t];"string"===(o=typeof n)&&(i=re.exec(n))&&i[1]&&(n=ce(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(T.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,a,s=Y(t);return Qe.test(t)||(t=$e(s)),(a=T.cssHooks[t]||T.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=He(e,t,r)),"normal"===i&&t in et&&(i=et[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!Ze.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):qe(e,Je,(function(){return rt(e,t,r)}))},set:function(e,n,r){var i,o=Ge(e),a=!m.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===T.css(e,"boxSizing",!1,o),u=r?nt(e,t,r,s,o):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-nt(e,t,"border",!1,o)-.5)),u&&(i=re.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),tt(0,n,u)}}})),T.cssHooks.marginLeft=We(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(He(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+ie[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(T.cssHooks[e+t].set=tt)})),T.fn.extend({css:function(e,t){return V(this,(function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ge(e),i=t.length;a<i;a++)o[t[a]]=T.css(e,t[a],!1,r);return o}return void 0!==n?T.style(e,t,n):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=it,it.prototype={constructor:it,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[$e(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=it.prototype.init,T.fx.step={};var ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function ct(){at&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,T.fx.interval),T.fx.tick())}function lt(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ie[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ht(e,t,n){for(var r,i=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function dt(e,t,n){var r,i,o=0,a=dt.prefilters.length,s=T.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var t=ot||lt(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=Y(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(l,c.opts.specialEasing);o<a;o++)if(r=dt.prefilters[o].call(c,e,l,c.opts))return v(r.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return T.map(l,ht,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(D);for(var n,r=0,i=e.length;r<i;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,c,l,f="width"in t||"height"in t,h=this,d={},p=e.style,_=e.nodeType&&ue(e),m=Z.get(e,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,T.queue(e,"fx").length||a.empty.fire()}))}))),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(_?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;_=!0}d[r]=m&&m[r]||T.style(e,r)}if((u=!T.isEmptyObject(t))||!T.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=Z.get(e,"display")),"none"===(l=T.css(e,"display"))&&(c?l=c:(he([e],!0),c=e.style.display||c,l=T.css(e,"display"),he([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===T.css(e,"float")&&(u||(h.done((function(){p.display=c})),null==c&&(l=p.display,c="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),u=!1,d)u||(m?"hidden"in m&&(_=m.hidden):m=Z.access(e,"fxshow",{display:c}),o&&(m.hidden=!_),_&&he([e],!0),h.done((function(){for(r in _||he([e]),Z.remove(e,"fxshow"),d)T.style(e,r,d[r])}))),u=ht(_?m[r]:0,r,h),r in m||(m[r]=u.start,_&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=T.isEmptyObject(e),o=T.speed(t,n,r),a=function(){var t=dt(this,T.extend({},e),o);(i||Z.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=T.timers,a=Z.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ut.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Z.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ft(t,!0),e,r,i)}})),T.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),ot=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){at||(at=!0,ct())},T.fx.stop=function(){at=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var pt,_t=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return V(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?T.prop(e,t,n):(1===o&&T.isXMLDoc(e)||(i=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(D);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=_t[t]||T.find.attr;_t[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=_t[a],_t[a]=i,i=null!=n(e,t,r)?a:null,_t[a]=o),i}}));var mt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function gt(e){return(e.match(D)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function yt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(D)||[]}T.fn.extend({prop:function(e,t){return V(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(e)||(t=T.propFix[t]||t,i=T.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(v(e))return this.each((function(t){T(this).addClass(e.call(this,t,bt(this)))}));if((t=yt(e)).length)for(;n=this[u++];)if(i=bt(n),r=1===n.nodeType&&" "+gt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=gt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(v(e))return this.each((function(t){T(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=yt(e)).length)for(;n=this[u++];)if(i=bt(n),r=1===n.nodeType&&" "+gt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=gt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){T(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,i,o,a;if(r)for(i=0,o=T(this),a=yt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&Z.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Z.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+gt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;T.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=v(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,T(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(xt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:gt(T.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=T(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=T.makeArray(t),a=i.length;a--;)((r=i[a]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},m.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in n;var Et=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,r,i){var o,a,s,u,c,l,f,h,p=[r||b],_=d.call(e,"type")?e.type:e,m=d.call(e,"namespace")?e.namespace.split("."):[];if(a=h=s=r=r||b,3!==r.nodeType&&8!==r.nodeType&&!Et.test(_+T.event.triggered)&&(_.indexOf(".")>-1&&(m=_.split("."),_=m.shift(),m.sort()),c=_.indexOf(":")<0&&"on"+_,(e=e[T.expando]?e:new T.Event(_,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:T.makeArray(t,[e]),f=T.event.special[_]||{},i||!f.trigger||!1!==f.trigger.apply(r,t))){if(!i&&!f.noBubble&&!g(r)){for(u=f.delegateType||_,Et.test(u+_)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(r.ownerDocument||b)&&p.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)h=a,e.type=o>1?u:f.bindType||_,(l=(Z.get(a,"events")||Object.create(null))[e.type]&&Z.get(a,"handle"))&&l.apply(a,t),(l=c&&a[c])&&l.apply&&K(a)&&(e.result=l.apply(a,t),!1===e.result&&e.preventDefault());return e.type=_,i||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(p.pop(),t)||!K(r)||c&&v(r[_])&&!g(r)&&((s=r[c])&&(r[c]=null),T.event.triggered=_,e.isPropagationStopped()&&h.addEventListener(_,Tt),r[_](),e.isPropagationStopped()&&h.removeEventListener(_,Tt),T.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),m.focusin||T.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=Z.access(r,t);i||r.addEventListener(e,n,!0),Z.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=Z.access(r,t)-1;i?Z.access(r,t,i):(r.removeEventListener(e,n,!0),Z.remove(r,t))}}}));var wt=n.location,At={guid:Date.now()},Mt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var Ot=/\[\]$/,Rt=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;function Lt(e,t,n,r){var i;if(Array.isArray(t))T.each(t,(function(t,i){n||Ot.test(e)?r(e,i):Lt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==E(t))r(e,t);else for(i in t)Lt(e+"["+i+"]",t[i],n,r)}T.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){i(this.name,this.value)}));else for(n in e)Lt(n,e[n],t,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Pt.test(this.nodeName)&&!St.test(e)&&(this.checked||!_e.test(e))})).map((function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(e){return{name:t.name,value:e.replace(Rt,"\r\n")}})):{name:t.name,value:n.replace(Rt,"\r\n")}})).get()}});var Ft=/%20/g,It=/#.*$/,Ct=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:GET|HEAD)$/,Dt=/^\/\//,Bt={},Ut={},zt="*/".concat("*"),kt=b.createElement("a");function Gt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(D)||[];if(v(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var i={},o=e===Ut;function a(s){var u;return i[s]=!0,T.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function Vt(e,t){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}kt.href=wt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Vt(Vt(e,T.ajaxSettings),t):Vt(T.ajaxSettings,e)},ajaxPrefilter:Gt(Bt),ajaxTransport:Gt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,a,s,u,c,l,f,h,d=T.ajaxSetup({},t),p=d.context||d,_=d.context&&(p.nodeType||p.jquery)?T(p):T.event,m=T.Deferred(),v=T.Callbacks("once memory"),g=d.statusCode||{},y={},x={},E="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Nt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,y[e]=t),this},overrideMimeType:function(e){return null==c&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)w.always(e[w.status]);else for(t in e)g[t]=[g[t],e[t]];return this},abort:function(e){var t=e||E;return r&&r.abort(t),A(0,t),this}};if(m.promise(w),d.url=((e||d.url||wt.href)+"").replace(Dt,wt.protocol+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(D)||[""],null==d.crossDomain){u=b.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=kt.protocol+"//"+kt.host!=u.protocol+"//"+u.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=T.param(d.data,d.traditional)),qt(Bt,d,t,w),c)return w;for(f in(l=T.event&&d.global)&&0==T.active++&&T.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!jt.test(d.type),i=d.url.replace(It,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Ft,"+")):(h=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Mt.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Ct,"$1"),h=(Mt.test(i)?"&":"?")+"_="+At.guid+++h),d.url=i+h),d.ifModified&&(T.lastModified[i]&&w.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&w.setRequestHeader("If-None-Match",T.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&w.setRequestHeader("Content-Type",d.contentType),w.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+zt+"; q=0.01":""):d.accepts["*"]),d.headers)w.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(p,w,d)||c))return w.abort();if(E="abort",v.add(d.complete),w.done(d.success),w.fail(d.error),r=qt(Ut,d,t,w)){if(w.readyState=1,l&&_.trigger("ajaxSend",[w,d]),c)return w;d.async&&d.timeout>0&&(s=n.setTimeout((function(){w.abort("timeout")}),d.timeout));try{c=!1,r.send(y,A)}catch(e){if(c)throw e;A(-1,e)}}else A(-1,"No Transport");function A(e,t,a,u){var f,h,b,y,x,E=t;c||(c=!0,s&&n.clearTimeout(s),r=void 0,o=u||"",w.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(y=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(d,w,a)),!f&&T.inArray("script",d.dataTypes)>-1&&(d.converters["text script"]=function(){}),y=function(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(d,y,w,f),f?(d.ifModified&&((x=w.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=x),(x=w.getResponseHeader("etag"))&&(T.etag[i]=x)),204===e||"HEAD"===d.type?E="nocontent":304===e?E="notmodified":(E=y.state,h=y.data,f=!(b=y.error))):(b=E,!e&&E||(E="error",e<0&&(e=0))),w.status=e,w.statusText=(t||E)+"",f?m.resolveWith(p,[h,E,w]):m.rejectWith(p,[w,E,b]),w.statusCode(g),g=void 0,l&&_.trigger(f?"ajaxSuccess":"ajaxError",[w,d,f?h:b]),v.fireWith(p,[w,E]),l&&(_.trigger("ajaxComplete",[w,d]),--T.active||T.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:i,data:n,success:r},T.isPlainObject(e)&&e))}})),T.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),T._evalUrl=function(e,t,n){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,n)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){T(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},Wt=T.ajaxSettings.xhr();m.cors=!!Wt&&"withCredentials"in Wt,m.ajax=Wt=!!Wt,T.ajaxTransport((function(e){var t,r;if(m.cors||Wt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ht[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Yt=[],Kt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||T.expando+"_"+At.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,r){var i,o,a,s=!1!==e.jsonp&&(Kt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Kt,"$1"+i):!1!==e.jsonp&&(e.url+=(Mt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||T.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always((function(){void 0===o?T(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(i)),a&&v(o)&&o(a[0]),a=o=void 0})),"script"})),m.createHTMLDocument=((Xt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),o=!n&&[],(i=P.exec(e))?[t.createElement(i[1])]:(i=Ee([e],t,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=gt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&T.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c=T.css(e,"position"),l=T(e),f={};"static"===c&&(e.style.position="relative"),s=l.offset(),o=T.css(e,"top"),u=T.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=l.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(t)&&(t=t.call(e,n,T.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):("number"==typeof f.top&&(f.top+="px"),"number"==typeof f.left&&(f.left+="px"),l.css(f))}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),i.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-T.css(r,"marginTop",!0),left:t.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||oe}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return V(this,(function(e,r,i){var o;if(g(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=We(m.pixelPosition,(function(e,n){if(n)return n=He(e,t),ke.test(n)?T(e).position()[t]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){T.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return V(this,(function(t,n,i){var o;return g(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?T.css(t,n,s):T.style(t,n,i,s)}),t,a?i:void 0,a)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var $t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||T.guid++,i},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=S,T.isFunction=v,T.isWindow=g,T.camelCase=Y,T.type=E,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace($t,"")},void 0===(r=function(){return T}.apply(t,[]))||(e.exports=r);var Zt=n.jQuery,Qt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Qt),e&&n.jQuery===T&&(n.jQuery=Zt),T},void 0===i&&(n.jQuery=n.$=T),T}))},function(e,t,n){"use strict";n.r(t),function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),r))}};function o(e){return e&&"[object Function]"==={}.toString.call(e)}function a(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function s(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function u(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=a(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:u(s(e))}function c(e){return e&&e.referenceNode?e.referenceNode:e}var l=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function h(e){return 11===e?l:10===e?f:l||f}function d(e){if(!e)return document.documentElement;for(var t=h(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?d(n):n:e?e.ownerDocument.documentElement:document.documentElement}function p(e){return null!==e.parentNode?p(e.parentNode):e}function _(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,u=o.commonAncestorContainer;if(e!==u&&t!==u||r.contains(i))return"BODY"===(s=(a=u).nodeName)||"HTML"!==s&&d(a.firstElementChild)!==a?d(u):u;var c=p(e);return c.host?_(c.host,t):_(e,p(t).host)}function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var i=e.ownerDocument.documentElement,o=e.ownerDocument.scrollingElement||i;return o[n]}return e[n]}function v(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=m(t,"top"),i=m(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}function g(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function b(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],h(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function y(e){var t=e.body,n=e.documentElement,r=h(10)&&getComputedStyle(n);return{height:b("Height",t,n,r),width:b("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},E=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),T=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function A(e){return w({},e,{right:e.left+e.width,bottom:e.top+e.height})}function M(e){var t={};try{if(h(10)){t=e.getBoundingClientRect();var n=m(e,"top"),r=m(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?y(e.ownerDocument):{},s=o.width||e.clientWidth||i.width,u=o.height||e.clientHeight||i.height,c=e.offsetWidth-s,l=e.offsetHeight-u;if(c||l){var f=a(e);c-=g(f,"x"),l-=g(f,"y"),i.width-=c,i.height-=l}return A(i)}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(10),i="HTML"===t.nodeName,o=M(e),s=M(t),c=u(e),l=a(t),f=parseFloat(l.borderTopWidth),d=parseFloat(l.borderLeftWidth);n&&i&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var p=A({top:o.top-s.top-f,left:o.left-s.left-d,width:o.width,height:o.height});if(p.marginTop=0,p.marginLeft=0,!r&&i){var _=parseFloat(l.marginTop),m=parseFloat(l.marginLeft);p.top-=f-_,p.bottom-=f-_,p.left-=d-m,p.right-=d-m,p.marginTop=_,p.marginLeft=m}return(r&&!n?t.contains(c):t===c&&"BODY"!==c.nodeName)&&(p=v(p,t)),p}function R(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=O(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:m(n),s=t?0:m(n,"left"),u={top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o};return A(u)}function S(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===a(e,"position"))return!0;var n=s(e);return!!n&&S(n)}function P(e){if(!e||!e.parentElement||h())return document.documentElement;for(var t=e.parentElement;t&&"none"===a(t,"transform");)t=t.parentElement;return t||document.documentElement}function L(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?P(e):_(e,c(t));if("viewport"===r)o=R(a,i);else{var l=void 0;"scrollParent"===r?"BODY"===(l=u(s(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var f=O(l,a,i);if("HTML"!==l.nodeName||S(a))o=f;else{var h=y(e.ownerDocument),d=h.height,p=h.width;o.top+=f.top-f.marginTop,o.bottom=d+f.top,o.left+=f.left-f.marginLeft,o.right=p+f.left}}var m="number"==typeof(n=n||0);return o.left+=m?n:n.left||0,o.top+=m?n:n.top||0,o.right-=m?n:n.right||0,o.bottom-=m?n:n.bottom||0,o}function F(e){return e.width*e.height}function I(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=L(n,r,o,i),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(s).map((function(e){return w({key:e},s[e],{area:F(s[e])})})).sort((function(e,t){return t.area-e.area})),c=u.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),l=c.length>0?c[0].key:u[0].key,f=e.split("-")[1];return l+(f?"-"+f:"")}function C(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=r?P(t):_(t,c(n));return O(n,i,r)}function N(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function j(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function D(e,t,n){n=n.split("-")[0];var r=N(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",u=o?"height":"width",c=o?"width":"height";return i[a]=t[a]+t[u]/2-r[u]/2,i[s]=n===s?t[s]-r[c]:t[j(s)],i}function B(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function U(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=B(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&o(n)&&(t.offsets.popper=A(t.offsets.popper),t.offsets.reference=A(t.offsets.reference),t=n(t,e))})),t}function z(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=C(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=I(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=D(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=U(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function k(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function G(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function q(){return this.state.isDestroyed=!0,k(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[G("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function V(e){var t=e.ownerDocument;return t?t.defaultView:window}function H(e,t,n,r){n.updateBound=r,V(e).addEventListener("resize",n.updateBound,{passive:!0});var i=u(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(u(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function W(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}function X(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,V(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function Y(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function K(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Y(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var $=n&&/Firefox/i.test(navigator.userAgent);function Z(e,t,n){var r=B(e,(function(e){return e.name===t})),i=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var Q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],J=Q.slice(3);function ee(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=J.indexOf(e),r=J.slice(n+1).concat(J.slice(0,n));return t?r.reverse():r}var te="flip",ne="clockwise",re="counterclockwise";function ie(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),s=a.indexOf(B(a,(function(e){return-1!==e.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(u)[0]]),[a[s].split(u)[1]].concat(a.slice(s+1))]:[a];return(c=c.map((function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return A(s)[t]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(e,i,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){Y(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))}))})),i}var oe={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),u=s?"left":"top",c=s?"width":"height",l={start:T({},u,o[u]),end:T({},u,o[u]+o[c]-a[c])};e.offsets.popper=w({},a,l[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],u=void 0;return u=Y(+n)?[+n,0]:ie(n,o,a,s),"left"===s?(o.top+=u[0],o.left-=u[1]):"right"===s?(o.top+=u[0],o.left+=u[1]):"top"===s?(o.left+=u[0],o.top-=u[1]):"bottom"===s&&(o.left+=u[0],o.top+=u[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||d(e.instance.popper);e.instance.reference===n&&(n=d(n));var r=G("transform"),i=e.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var u=L(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=s,t.boundaries=u;var c=t.priority,l=e.offsets.popper,f={primary:function(e){var n=l[e];return l[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(l[e],u[e])),T({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=l[n];return l[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(l[n],u[e]-("right"===e?l.width:l.height))),T({},n,r)}};return c.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";l=w({},l,f[t](e))})),e.offsets.popper=l,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",u=a?"left":"top",c=a?"width":"height";return n[s]<o(r[u])&&(e.offsets.popper[u]=o(r[u])-n[c]),n[u]>o(r[s])&&(e.offsets.popper[u]=o(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Z(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,s=o.popper,u=o.reference,c=-1!==["left","right"].indexOf(i),l=c?"height":"width",f=c?"Top":"Left",h=f.toLowerCase(),d=c?"left":"top",p=c?"bottom":"right",_=N(r)[l];u[p]-_<s[h]&&(e.offsets.popper[h]-=s[h]-(u[p]-_)),u[h]+_>s[p]&&(e.offsets.popper[h]+=u[h]+_-s[p]),e.offsets.popper=A(e.offsets.popper);var m=u[h]+u[l]/2-_/2,v=a(e.instance.popper),g=parseFloat(v["margin"+f]),b=parseFloat(v["border"+f+"Width"]),y=m-e.offsets.popper[h]-g-b;return y=Math.max(Math.min(s[l]-_,y),0),e.arrowElement=r,e.offsets.arrow=(T(n={},h,Math.round(y)),T(n,d,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(k(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=L(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=j(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case te:a=[r,i];break;case ne:a=ee(r);break;case re:a=ee(r,!0);break;default:a=t.behavior}return a.forEach((function(s,u){if(r!==s||a.length===u+1)return e;r=e.placement.split("-")[0],i=j(r);var c=e.offsets.popper,l=e.offsets.reference,f=Math.floor,h="left"===r&&f(c.right)>f(l.left)||"right"===r&&f(c.left)<f(l.right)||"top"===r&&f(c.bottom)>f(l.top)||"bottom"===r&&f(c.top)<f(l.bottom),d=f(c.left)<f(n.left),p=f(c.right)>f(n.right),_=f(c.top)<f(n.top),m=f(c.bottom)>f(n.bottom),v="left"===r&&d||"right"===r&&p||"top"===r&&_||"bottom"===r&&m,g=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(g&&"start"===o&&d||g&&"end"===o&&p||!g&&"start"===o&&_||!g&&"end"===o&&m),y=!!t.flipVariationsByContent&&(g&&"start"===o&&p||g&&"end"===o&&d||!g&&"start"===o&&m||!g&&"end"===o&&_),x=b||y;(h||v||x)&&(e.flipped=!0,(h||v)&&(r=a[u+1]),x&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=w({},e.offsets.popper,D(e.instance.popper,e.offsets.reference,e.placement)),e=U(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),e.placement=j(t),e.offsets.popper=A(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Z(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=B(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=B(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=d(e.instance.popper),u=M(s),c={position:i.position},l=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(e){return e},u=o(i.width),c=o(r.width),l=-1!==["left","right"].indexOf(e.placement),f=-1!==e.placement.indexOf("-"),h=t?l||f||u%2==c%2?o:a:s,d=t?o:s;return{left:h(u%2==1&&c%2==1&&!f&&t?r.left-1:r.left),top:d(r.top),bottom:d(r.bottom),right:h(r.right)}}(e,window.devicePixelRatio<2||!$),f="bottom"===n?"top":"bottom",h="right"===r?"left":"right",p=G("transform"),_=void 0,m=void 0;if(m="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-u.height+l.bottom:l.top,_="right"===h?"HTML"===s.nodeName?-s.clientWidth+l.right:-u.width+l.right:l.left,a&&p)c[p]="translate3d("+_+"px, "+m+"px, 0)",c[f]=0,c[h]=0,c.willChange="transform";else{var v="bottom"===f?-1:1,g="right"===h?-1:1;c[f]=m*v,c[h]=_*g,c.willChange=f+", "+h}var b={"x-placement":e.placement};return e.attributes=w({},b,e.attributes),e.styles=w({},c,e.styles),e.arrowStyles=w({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return K(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&K(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=C(i,t,e,n.positionFixed),a=I(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),K(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ae=function(){function e(t,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=w({},e.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(w({},e.Defaults.modifiers,a.modifiers)).forEach((function(t){r.options.modifiers[t]=w({},e.Defaults.modifiers[t]||{},a.modifiers?a.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return w({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&o(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return E(e,[{key:"update",value:function(){return z.call(this)}},{key:"destroy",value:function(){return q.call(this)}},{key:"enableEventListeners",value:function(){return W.call(this)}},{key:"disableEventListeners",value:function(){return X.call(this)}}]),e}();ae.Utils=("undefined"!=typeof window?window:e).PopperUtils,ae.placements=Q,ae.Defaults=oe,t.default=ae}.call(this,n(4))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e){e.exports=JSON.parse('{"steps":[{"name":"Orientation of the last layer","short":"oll","algorithmGroups":[{"name":"all corners right","algorithms":[{"algorithm":"(M\' U M) U2 (M\' U M)","beginner":true},{"algorithm":"(R U R\' U\') (M\' U R U\') Rw\'"},{"algorithm":"(M\' U\' M\' U\' M\' U\' M\' U) (M\' U\' M\' U\' M\' U\' M\' U)"}]},{"name":"all edges right","algorithms":[{"algorithm":"(R\'2 D) (R\' U2) (R D\') (R\' U2 R\')"},{"algorithm":"(Rw U R\' U\') (L\' U R U\') x\'"},{"algorithm":"F\' (Rw U R\' U\') (L\' U R) x\'"},{"algorithm":"(L U L\') (U L U\'2 L\')"},{"algorithm":"(R\' U\' R) (U\' R\' U2 R)","beginner":true},{"algorithm":"(R U\'2) (R\'2 U\') (R2 U\') (R\'2 U\'2 R)"},{"algorithm":"F (R U R\' U\') (R U R\' U\') (R U R\' U\') F\'"}]},{"name":"no edge is right","algorithms":[{"algorithm":"Fw (R U R\' U\') Fw\' U\' F (R U R\' U\') F\'"},{"algorithm":"Fw (R U R\' U\') Fw\' U F (R U R\' U\') F\'"},{"algorithm":"(R U R\' U) (R\' F R F\') U2 (R\' F R F\')"},{"algorithm":"M U (R U R\' U\') Rw R2 F R F\'"},{"algorithm":"Rw U R\' U R U2 Rw\'2 U\' R U\' R\' U2 Rw"},{"algorithm":"(F R U R\' U\' F\') (Fw R U R\' U\' Fw\')"},{"algorithm":"R U2 R2 F R F\' U2 R\' F R F\'"}]},{"name":"T pattern","algorithms":[{"algorithm":"(R U R\' U\') (R\' F R F\')"},{"algorithm":"F (R U R\' U\') F\'"}]},{"name":"P pattern","algorithms":[{"algorithm":"Fw (R U R\' U\') Fw\'"},{"algorithm":"Fw\' (L\' U\' L U) Fw"},{"algorithm":"(R Dw) (L\' Dw\') (R\' U) (Lw U Lw\')"},{"algorithm":"(L\' Dw\') (R Dw) (L U\') (Rw\' U\' Rw)"}]},{"name":"W pattern","algorithms":[{"algorithm":"(R U R\' U) (R U\' R\' U\') (R\' F R F\')"},{"algorithm":"(L\' U\' L U\') (L\' U L U) (L F\' L\' F)"}]},{"name":"L pattern","algorithms":[{"algorithm":"(Rw U) (R\' U) (R U\') (R\' U) (R U\'2 Rw\')"},{"algorithm":"(Rw\' U\') (R U\') (R\' U) (R U\') (R\' U2 Rw)"},{"algorithm":"(R B\' R B R\'2) U2 (F R\' F\' R)"},{"algorithm":"(R\' F R\' F\' R2) U2 y (R\' F R F\')"},{"algorithm":"F (R U R\' U\') (R U R\' U\') F\'"},{"algorithm":"F\' (L\' U\' L U) (L\' U\' L U) F"}]},{"name":"big flash pattern","algorithms":[{"algorithm":"R U R\' F\' U\' F U R U2 R\'"},{"algorithm":"R\' F R U R\' U\' F\' U R"}]},{"name":"C pattern","algorithms":[{"algorithm":"(R U R\'2 U\') (R\' F) (R U) (R U\') F\'"},{"algorithm":"R\' U\' R\' F R F\' U R"}]},{"name":"square pattern","algorithms":[{"algorithm":"Rw\' U2 R U R\' U Rw"},{"algorithm":"Rw U2 R\' U\' R U\' Rw\'"}]},{"name":"small flash pattern","algorithms":[{"algorithm":"Rw U R\' U R U2 Rw\'"},{"algorithm":"Rw R2 U\' R U\' R\' U2 R U\' Rw\' R"},{"algorithm":"(Rw\' U\' R U\') (R\' U2 Rw)"},{"algorithm":"Rw\' R2 U R\' U R U2 R\' U M\'"}]},{"name":"fish pattern","algorithms":[{"algorithm":"F (R U\') (R\' U\' R U) (R\' F\')"},{"algorithm":"R U2 R2 F R F\' R U2 R\'"},{"algorithm":"R U R\' U R\' F R F\' R U2 R\'"},{"algorithm":"R U R\' U\' R\' F R2 U R\' U\' F\'"}]},{"name":"I pattern","algorithms":[{"algorithm":"Fw (R U R\' U\') (R U R\' U\') Fw\'"},{"algorithm":"(R U R\' U R Dw\') (R U\' R\' F\')"},{"algorithm":"F (R U R\' U\' R) y\' (R\' F) (R B\') (R\' F\')"},{"algorithm":"(R\' U2) (R\'2 U) (R\' U) (R U\'2) x\' (U\' R\' U) x"}]},{"name":"kick pattern","algorithms":[{"algorithm":"x\' (R U\' R\' F\') (R U R\') (U\' F U) x"},{"algorithm":"(Rw U Rw\') (R U R\' U\') (Rw U\' Rw\')"},{"algorithm":"x\' (L\' U L F) (L\' U\' L) (U F\' U\') x"},{"algorithm":"(Lw\' U\' Lw) (L\' U\' L U) (Lw\' U Lw)"}]},{"name":"unfavourable pattern","algorithms":[{"algorithm":"(R U\') (R\' U2) (R U) y (R U\') (R\' U\' F\')"},{"algorithm":"(R\'2 U R\' B\') (R U\') (R\'2 U) (Lw U Lw\')"},{"algorithm":"(L\' U) (L U\'2) (L\' U\') y\' (L\' U) (L U F)"},{"algorithm":"(L2 U\' L B) (L\' U) (L2 U\') (Rw\' U\' Rw)"}]}]},{"name":"Permutation of the last layer","short":"pll","algorithmGroups":[{"name":"corners only","algorithms":[{"name":"A-Perm.","algorithm":"Lw\' U R\' D2 R U\' R\' D2 R2 x\'","beginner":true},{"name":"A-Perm.","algorithm":"Rw U\' L D2 L\' U L D2 L2 x\'"},{"name":"E-Perm.","algorithm":"x\' R U\' R\' D R U R\' Uw2 R\' U R D R\' U\' R x\' y2"}]},{"name":"edges only","algorithms":[{"name":"Z-Perm","algorithm":"M2 U M2 U M\' U2 M2 U2 M\' U2"},{"name":"H-Perm.","algorithm":"M2 U M2 U2 M2 U M2"},{"name":"U-Perm.","algorithm":"R U\' R U R U R U\' R\' U\' R2","beginner":true},{"name":"U-Perm.","algorithm":"R2 U R U R\' U\' R\' U\' R\' U R\'"}]},{"name":"2 opposite corners and 2 edges","algorithms":[{"name":"L-Perm.","algorithm":"R U\' L\' U R\' U2 L U\' L\' U2\' L"},{"name":"J-Perm.","algorithm":"R U2 R\' U\' R U2 L\' U R\' U\' L"},{"name":"T-Perm.","algorithm":"R U R\' U\' R\' F R2 U\' R\' U\' R U R\' F\'"},{"name":"R-Perm.","algorithm":"R\' U2 R U2 R\' F R U R\' U\' R\' F\' R2 U\'"},{"name":"R-Perm.","algorithm":"L U2 L\' U2 L F\' L\' U\' L U L F L2 U"},{"name":"F-Perm.","algorithm":"R U\' R\' U R2 y R U R\' U\' F\' Dw R2 F R F\'"}]},{"name":"2 diagonal corners and 2 edges","algorithms":[{"name":"V-Perm.","algorithm":"R\' U R\' U\' y R\' F\' R2 U\' R\' U R\' F R F y\'"},{"name":"N-Perm.","algorithm":"F\' R U R\' U\' R\' F R2 F U\' R\' U\' R U F\' R\'"},{"name":"N-Perm.","algorithm":"R\' U R U\' R\' F\' U\' F R U R\' F R\' F\' R U\' R"},{"name":"Y-Perm.","algorithm":"F R U\' R\' U\' R U R\' F\' R U R\' U\' R\' F R F\'"}]},{"name":"3 corners and 3 edges","algorithms":[{"name":"G-Perm.","algorithm":"R2 Uw\' R U\' R U R\' Uw R2 y R U\' R\' y\'"},{"name":"G-Perm.","algorithm":"R2 Uw R\' U R\' U\' R Uw\' R2 y\' R\' U R y"},{"name":"G-Perm.","algorithm":"R\' U\' R y R2 Uw R\' U R U\' R Uw\' R2 y\'"},{"name":"G-Perm.","algorithm":"R U R\' y\' R2 Uw\' R U\' R\' U R\' Uw R2 y"}]}]}]}')},function(e){e.exports=JSON.parse('[{"cube_size":4,"algorithm":"Rw U2 x Rw U2 Rw U2 Rw\' U2 Lw U2 Rw\' U2 Rw U2 Rw\' U2 Rw\'"},{"cube_size":5,"algorithm":"Rw U2 x Rw U2 Rw U2 Rw\' M U2 Lw U2 Rw\' U2 Rw U2 Rw\' U2 Rw\'"},{"cube_size":4,"pll":true,"algorithm":"r2 U2 r2 Uw2 r2 u2"}]')},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cube=void 0;var r=n(10),i=n(8),o=i.gl_matrix_extensions.v3,a=i.gl_matrix_extensions.v4,s=i.gl_matrix_extensions.m4;function u(e,t){return Math.abs(e-t)<.01}var c=function(){function e(e){void 0===e&&(e=3),this._size=3,this._pieces=[],this._colorMap=[{direction:r.vec3.fromValues(0,1,0),side:"u",center:" ",rotation:"y",color:"yellow"},{direction:r.vec3.fromValues(0,-1,0),side:"d",center:"e",rotation:" ",color:"white"},{direction:r.vec3.fromValues(1,0,0),side:"r",center:" ",rotation:"x",color:"orange"},{direction:r.vec3.fromValues(-1,0,0),side:"l",center:"m",rotation:" ",color:"red"},{direction:r.vec3.fromValues(0,0,-1),side:"b",center:" ",rotation:" ",color:"blue"},{direction:r.vec3.fromValues(0,0,1),side:"f",center:"s",rotation:"z",color:"green"}],this._size=e,this.initPieces()}return e.prototype.initPieces=function(){this._pieces=[];for(var e=this._size,t=this.offset(),n=0;n<e;n++){for(var i=[],o=0;o<e;o++){for(var a=[],u=0;u<e;u++){var c=r.mat4.fromTranslation(s(),[u-t,o-t,n-t]);a.push(c)}i.push(a)}this._pieces.push(i)}},e.prototype.offset=function(){return(this._size-1)/2},e.prototype.getColor=function(e,t){void 0===t&&(t=r.vec3.fromValues(0,1,0));var n=this.getPos(e),i=r.mat4.fromTranslation(s(),r.vec3.negate(o(),n)),c=r.mat4.multiply(s(),e,i);r.mat4.invert(c,c);var l=r.vec4.fromValues(t[0],t[1],t[2],0),f=r.vec4.transformMat4(a(),l,c);return this._colorMap.find((function(e){var t=e.direction;return u(t[0],f[0])&&u(t[1],f[1])&&u(t[2],f[2])})).color},e.prototype.getLayer=function(e,t){void 0===e&&(e=r.vec3.fromValues(0,1,0)),void 0===t&&(t=0);var n=this._size,i=this.offset();if(!(t>=n)){for(var o=r.quat.rotationTo(r.quat.create(),e,[0,1,0]),a=r.mat4.fromQuat(s(),o),c=Array(n).fill(0).map((function(){return Array(n)})),l=0;l<this._size;l++)for(var f=0;f<n;f++)for(var h=0;h<this._size;h++){var d=this._pieces[l][f][h];d=r.mat4.multiply(s(),a,d);var p=this.getPos(d);if(u(p[1]+i,n-t-1)){var _=Math.round(p[0]+i);c[Math.round(p[2]+i)][_]=this._pieces[l][f][h]}}return c}console.warn("Can not rotate layer "+t+" of a cube-"+n+".")},e.prototype.getPos=function(e){var t=r.vec3.fromValues(0,0,0);return r.vec3.transformMat4(o(),t,e)},e.prototype.getFace=function(e){return void 0===e&&(e=r.vec3.fromValues(0,1,0)),this.getLayer(e)},e.prototype.rotateLayer=function(e,t,n){void 0===t&&(t=1),void 0===n&&(n=0);var i=r.mat4.fromRotation(s(),-t*Math.PI/2,e);this.getLayer(e,n).forEach((function(e){e.forEach((function(e){r.mat4.multiply(e,i,e)}))}))},e.prototype.tokenizeMoves=function(e){e=(e=e).replace(/[() ]/g,"");for(var t=[],n="",r=0;r<e.length;r++)"rludfbmesxyz".includes(e[r].toLowerCase())?(t.push(n),n=e[r]):n+=e[r];return t.push(n),t.shift(),t},e.prototype.invertMoves=function(e){for(var t=this.tokenizeMoves(e),n="",r=t.length-1;r>=0;r--){var i=t[r];n+=i[0],n+=i.includes("w")?"w":"",n+=i.includes("'")?"":"'",n+=i.includes("2")?"2":"",n+=" "}return n},e.prototype.applyMoves=function(e,t){var n=this;void 0===t&&(t=!1);var r=this._size;t&&(e=this.invertMoves(e)),this.tokenizeMoves(e).forEach((function(e){if(e){var t=e[0],i=t==t.toLowerCase();t=t.toLocaleLowerCase();var o=e.includes("'"),a=e.includes("2"),s=e.includes("w"),u=1;o&&(u*=-1),a&&(u*=2);var c=n._colorMap.find((function(e){return e.side==t}));if(c){var l=i?1:0;n.rotateLayer(c.direction,u,l),s&&n.rotateLayer(c.direction,u,l+1)}var f=n._colorMap.find((function(e){return e.center==t}));f&&n.rotateLayer(f.direction,u,Math.floor(r/2));var h=n._colorMap.find((function(e){return e.rotation==t}));if(h)for(var d=0;d<r;d++)n.rotateLayer(h.direction,u,d)}}))},e.prototype.placeFace=function(e,t,n,r,i){var o=document.createElement("div");o.className="cubeFace",o.classList.add(r),i||o.classList.add("oll"),o.style.gridColumnStart=t.toString(),o.style.gridRowStart=n.toString(),e.appendChild(o)},e.prototype.getMovement=function(e,t,n){var r=this.offset(),i={x:(t+1)/(this._size+1),y:(n+1)/(this._size+1)},o=this.getPos(this._pieces[n][this._size-1][t]);return{start:i,end:{x:(o[0]+r+1)/(this._size+1),y:(o[2]+r+1)/(this._size+1)}}},e.prototype.shortenLine=function(e,t){void 0===t&&(t=15);var n=(e.end.x-e.start.x)*t/100,r=(e.end.y-e.start.y)*t/100;return e.start.x+=n,e.start.y+=r,e.end.x-=n,e.end.y-=r,e},e.prototype.drawArrow=function(e,t,n,r){var i=this.getMovement(t,n,r);if(!u(i.start.x,i.end.x)||!u(i.start.y,i.end.y)){i=this.shortenLine(i);var o=document.createElementNS("http://www.w3.org/2000/svg","line");o.style.stroke="black",o.setAttribute("x1",(100*i.start.x).toString()),o.setAttribute("y1",(100*i.start.y).toString()),o.setAttribute("x2",(100*i.end.x).toString()),o.setAttribute("y2",(100*i.end.y).toString()),o.setAttribute("marker-start","url(#arrow)"),e.appendChild(o)}},e.prototype.drawArrows=function(e,t){for(var n=e.getElementsByClassName("cubeAnnotation")[0],r=0;r<this._size;r++)for(var i=0;i<this._size;i++)this.drawArrow(n,t,i,r)},e.prototype.drawCube=function(e,t){var n=this,i=this._size,o=this.getFace(r.vec3.fromValues(0,1,0));t&&this.drawArrows(e,o);var a="0.5fr repeat("+i+", 1fr) 0.5fr";e.style.gridTemplateColumns=a,e.style.gridTemplateRows=a,o.forEach((function(o,a){o.forEach((function(r,i){var o=n.getColor(r);n.placeFace(e,i+2,a+2,o,t)}));var s=o[0],u=n.getColor(s,r.vec3.fromValues(-1,0,0));n.placeFace(e,1,a+2,u,t);var c=o[i-1],l=n.getColor(c,r.vec3.fromValues(1,0,0));n.placeFace(e,i+2,a+2,l,t)})),o[0].forEach((function(i,a){var s=o[0][a],u=n.getColor(s,r.vec3.fromValues(0,0,-1));n.placeFace(e,a+2,1,u,t)})),o[i-1].forEach((function(a,s){var u=o[i-1][s],c=n.getColor(u,r.vec3.fromValues(0,0,1));n.placeFace(e,s+2,i+2,c,t)}))},e.prototype.reset=function(e){this.initPieces();for(var t=e.getElementsByClassName("cubeAnnotation")[0],n=0,r=Array.from(t.children);n<r.length;n++){"line"==(a=r[n]).tagName&&t.removeChild(a)}for(var i=0,o=Array.from(e.children);i<o.length;i++){var a;"DIV"==(a=o[i]).tagName&&e.removeChild(a)}},e}();t.Cube=c},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=67)}([function(e,t,n){"use strict";var r,i=n(3);!function(e){var t,n=2;e.logVerbosity=function(e){return void 0!==e&&(n=Math.max(-1,e)),n},function(e){e[e.Debug=3]="Debug",e[e.Info=2]="Info",e[e.Warning=1]="Warning",e[e.Error=0]="Error"}(t=e.LogLevel||(e.LogLevel={}));var r=function(e,t){if(!e)throw new EvalError(t)},o=function(e,t){};function a(e,t){e>n||console.log("["+e+"] "+t)}function s(t){var n=t+"-start";e.assert(0===performance.getEntriesByName(t).length,"expected mark identifier to not already exists, given "+t),e.assert(0===performance.getEntriesByName(n).length,"expected mark identifier to not already exists, given "+n),performance.mark(n)}function u(n,r,i){void 0===i&&(i=0);var o=n+"-start",s=n+"-end";e.assert(0===performance.getEntriesByName(n).length,"expected mark identifier to not already exists, given "+n),e.assert(0===performance.getEntriesByName(s).length,"expected mark identifier to not already exists, given "+s),performance.mark(s),performance.measure(n,o,s);var u=performance.getEntriesByName(n)[0];performance.clearMarks(o),performance.clearMarks(s),performance.clearMeasures(n);var c=void 0===r||0===r.length?0:2,l=Math.max(c,i-n.length-(r?r.length:0)-1),f=h(u.duration);a(t.Debug,""+n+" ".repeat(l)+(r||"")+" | "+f)}e.assert=r,e.assertions=function(t){return void 0!==t&&(e.assert=t?r:o),e.assert!==o},e.log=a,e.logIf=function(e,t,n){e&&a(t,n)},e.logPerformanceStart=s,e.logPerformanceStartIf=function(e,t){e&&s(t)},e.logPerformanceStop=u,e.logPerformanceStopIf=function(e,t,n,r){void 0===r&&(r=0),e&&u(t,n,r)},e.rand=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=1),Math.random()*(t-e)+e};var c=["","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi"];e.prettyPrintBytes=function(e){var t=e>0?Math.floor(Math.log(e)/Math.log(1024)):0,n=e/Math.pow(1024,t);return""+(t>0?n.toFixed(3):n)+c[t]+"B"};var l=["ms","ns","μs","ms","s"],f=[0,1e6,1e3,1,.001];function h(e){var t=e>0?Math.max(1,Math.floor(Math.log(10*e)/Math.log(1e3))+3):0;return t=i.clamp(t,0,4),""+(e*f[t]).toFixed(3)+l[t]}e.prettyPrintMilliseconds=h,e.bitInBitfield=function(e,t){return void 0!==t&&(e&t)===t},e.RAD2DEG=57.29577951308232,e.DEG2RAD=.017453292519943295,e.GETsearch=function(){return window.location.search},e.GETparameter=function(e){var t=new RegExp(e+"=([^&]+)"),n=window.location.search.match(t);if(n)return n[1]},e.PATH_SEPARATOR="/",e.dirname=function(t){return!1===t.includes(e.PATH_SEPARATOR)?"":t.substr(0,t.lastIndexOf(e.PATH_SEPARATOR)).trimLeft()},e.basename=function(t){return!1===t.includes(e.PATH_SEPARATOR)?t:t.substr(t.lastIndexOf(e.PATH_SEPARATOR)+1).trimRight()}}(r||(r={})),e.exports=r},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"EPSILON",(function(){return d})),n.d(r,"ARRAY_TYPE",(function(){return p})),n.d(r,"RANDOM",(function(){return _})),n.d(r,"setMatrixArrayType",(function(){return m})),n.d(r,"toRadian",(function(){return g})),n.d(r,"equals",(function(){return b}));var i={};n.r(i),n.d(i,"create",(function(){return y})),n.d(i,"clone",(function(){return x})),n.d(i,"copy",(function(){return E})),n.d(i,"identity",(function(){return T})),n.d(i,"fromValues",(function(){return w})),n.d(i,"set",(function(){return A})),n.d(i,"transpose",(function(){return M})),n.d(i,"invert",(function(){return O})),n.d(i,"adjoint",(function(){return R})),n.d(i,"determinant",(function(){return S})),n.d(i,"multiply",(function(){return P})),n.d(i,"rotate",(function(){return L})),n.d(i,"scale",(function(){return F})),n.d(i,"fromRotation",(function(){return I})),n.d(i,"fromScaling",(function(){return C})),n.d(i,"str",(function(){return N})),n.d(i,"frob",(function(){return j})),n.d(i,"LDU",(function(){return D})),n.d(i,"add",(function(){return B})),n.d(i,"subtract",(function(){return U})),n.d(i,"exactEquals",(function(){return z})),n.d(i,"equals",(function(){return k})),n.d(i,"multiplyScalar",(function(){return G})),n.d(i,"multiplyScalarAndAdd",(function(){return q})),n.d(i,"mul",(function(){return V})),n.d(i,"sub",(function(){return H}));var o={};n.r(o),n.d(o,"create",(function(){return W})),n.d(o,"clone",(function(){return X})),n.d(o,"copy",(function(){return Y})),n.d(o,"identity",(function(){return K})),n.d(o,"fromValues",(function(){return $})),n.d(o,"set",(function(){return Z})),n.d(o,"invert",(function(){return Q})),n.d(o,"determinant",(function(){return J})),n.d(o,"multiply",(function(){return ee})),n.d(o,"rotate",(function(){return te})),n.d(o,"scale",(function(){return ne})),n.d(o,"translate",(function(){return re})),n.d(o,"fromRotation",(function(){return ie})),n.d(o,"fromScaling",(function(){return oe})),n.d(o,"fromTranslation",(function(){return ae})),n.d(o,"str",(function(){return se})),n.d(o,"frob",(function(){return ue})),n.d(o,"add",(function(){return ce})),n.d(o,"subtract",(function(){return le})),n.d(o,"multiplyScalar",(function(){return fe})),n.d(o,"multiplyScalarAndAdd",(function(){return he})),n.d(o,"exactEquals",(function(){return de})),n.d(o,"equals",(function(){return pe})),n.d(o,"mul",(function(){return _e})),n.d(o,"sub",(function(){return me}));var a={};n.r(a),n.d(a,"create",(function(){return ve})),n.d(a,"fromMat4",(function(){return ge})),n.d(a,"clone",(function(){return be})),n.d(a,"copy",(function(){return ye})),n.d(a,"fromValues",(function(){return xe})),n.d(a,"set",(function(){return Ee})),n.d(a,"identity",(function(){return Te})),n.d(a,"transpose",(function(){return we})),n.d(a,"invert",(function(){return Ae})),n.d(a,"adjoint",(function(){return Me})),n.d(a,"determinant",(function(){return Oe})),n.d(a,"multiply",(function(){return Re})),n.d(a,"translate",(function(){return Se})),n.d(a,"rotate",(function(){return Pe})),n.d(a,"scale",(function(){return Le})),n.d(a,"fromTranslation",(function(){return Fe})),n.d(a,"fromRotation",(function(){return Ie})),n.d(a,"fromScaling",(function(){return Ce})),n.d(a,"fromMat2d",(function(){return Ne})),n.d(a,"fromQuat",(function(){return je})),n.d(a,"normalFromMat4",(function(){return De})),n.d(a,"projection",(function(){return Be})),n.d(a,"str",(function(){return Ue})),n.d(a,"frob",(function(){return ze})),n.d(a,"add",(function(){return ke})),n.d(a,"subtract",(function(){return Ge})),n.d(a,"multiplyScalar",(function(){return qe})),n.d(a,"multiplyScalarAndAdd",(function(){return Ve})),n.d(a,"exactEquals",(function(){return He})),n.d(a,"equals",(function(){return We})),n.d(a,"mul",(function(){return Xe})),n.d(a,"sub",(function(){return Ye}));var s={};n.r(s),n.d(s,"create",(function(){return Ke})),n.d(s,"clone",(function(){return $e})),n.d(s,"copy",(function(){return Ze})),n.d(s,"fromValues",(function(){return Qe})),n.d(s,"set",(function(){return Je})),n.d(s,"identity",(function(){return et})),n.d(s,"transpose",(function(){return tt})),n.d(s,"invert",(function(){return nt})),n.d(s,"adjoint",(function(){return rt})),n.d(s,"determinant",(function(){return it})),n.d(s,"multiply",(function(){return ot})),n.d(s,"translate",(function(){return at})),n.d(s,"scale",(function(){return st})),n.d(s,"rotate",(function(){return ut})),n.d(s,"rotateX",(function(){return ct})),n.d(s,"rotateY",(function(){return lt})),n.d(s,"rotateZ",(function(){return ft})),n.d(s,"fromTranslation",(function(){return ht})),n.d(s,"fromScaling",(function(){return dt})),n.d(s,"fromRotation",(function(){return pt})),n.d(s,"fromXRotation",(function(){return _t})),n.d(s,"fromYRotation",(function(){return mt})),n.d(s,"fromZRotation",(function(){return vt})),n.d(s,"fromRotationTranslation",(function(){return gt})),n.d(s,"fromQuat2",(function(){return bt})),n.d(s,"getTranslation",(function(){return yt})),n.d(s,"getScaling",(function(){return xt})),n.d(s,"getRotation",(function(){return Et})),n.d(s,"fromRotationTranslationScale",(function(){return Tt})),n.d(s,"fromRotationTranslationScaleOrigin",(function(){return wt})),n.d(s,"fromQuat",(function(){return At})),n.d(s,"frustum",(function(){return Mt})),n.d(s,"perspective",(function(){return Ot})),n.d(s,"perspectiveFromFieldOfView",(function(){return Rt})),n.d(s,"ortho",(function(){return St})),n.d(s,"lookAt",(function(){return Pt})),n.d(s,"targetTo",(function(){return Lt})),n.d(s,"str",(function(){return Ft})),n.d(s,"frob",(function(){return It})),n.d(s,"add",(function(){return Ct})),n.d(s,"subtract",(function(){return Nt})),n.d(s,"multiplyScalar",(function(){return jt})),n.d(s,"multiplyScalarAndAdd",(function(){return Dt})),n.d(s,"exactEquals",(function(){return Bt})),n.d(s,"equals",(function(){return Ut})),n.d(s,"mul",(function(){return zt})),n.d(s,"sub",(function(){return kt}));var u={};n.r(u),n.d(u,"create",(function(){return Gt})),n.d(u,"clone",(function(){return qt})),n.d(u,"length",(function(){return Vt})),n.d(u,"fromValues",(function(){return Ht})),n.d(u,"copy",(function(){return Wt})),n.d(u,"set",(function(){return Xt})),n.d(u,"add",(function(){return Yt})),n.d(u,"subtract",(function(){return Kt})),n.d(u,"multiply",(function(){return $t})),n.d(u,"divide",(function(){return Zt})),n.d(u,"ceil",(function(){return Qt})),n.d(u,"floor",(function(){return Jt})),n.d(u,"min",(function(){return en})),n.d(u,"max",(function(){return tn})),n.d(u,"round",(function(){return nn})),n.d(u,"scale",(function(){return rn})),n.d(u,"scaleAndAdd",(function(){return on})),n.d(u,"distance",(function(){return an})),n.d(u,"squaredDistance",(function(){return sn})),n.d(u,"squaredLength",(function(){return un})),n.d(u,"negate",(function(){return cn})),n.d(u,"inverse",(function(){return ln})),n.d(u,"normalize",(function(){return fn})),n.d(u,"dot",(function(){return hn})),n.d(u,"cross",(function(){return dn})),n.d(u,"lerp",(function(){return pn})),n.d(u,"hermite",(function(){return _n})),n.d(u,"bezier",(function(){return mn})),n.d(u,"random",(function(){return vn})),n.d(u,"transformMat4",(function(){return gn})),n.d(u,"transformMat3",(function(){return bn})),n.d(u,"transformQuat",(function(){return yn})),n.d(u,"rotateX",(function(){return xn})),n.d(u,"rotateY",(function(){return En})),n.d(u,"rotateZ",(function(){return Tn})),n.d(u,"angle",(function(){return wn})),n.d(u,"zero",(function(){return An})),n.d(u,"str",(function(){return Mn})),n.d(u,"exactEquals",(function(){return On})),n.d(u,"equals",(function(){return Rn})),n.d(u,"sub",(function(){return Pn})),n.d(u,"mul",(function(){return Ln})),n.d(u,"div",(function(){return Fn})),n.d(u,"dist",(function(){return In})),n.d(u,"sqrDist",(function(){return Cn})),n.d(u,"len",(function(){return Nn})),n.d(u,"sqrLen",(function(){return jn})),n.d(u,"forEach",(function(){return Dn}));var c={};n.r(c),n.d(c,"create",(function(){return Bn})),n.d(c,"clone",(function(){return Un})),n.d(c,"fromValues",(function(){return zn})),n.d(c,"copy",(function(){return kn})),n.d(c,"set",(function(){return Gn})),n.d(c,"add",(function(){return qn})),n.d(c,"subtract",(function(){return Vn})),n.d(c,"multiply",(function(){return Hn})),n.d(c,"divide",(function(){return Wn})),n.d(c,"ceil",(function(){return Xn})),n.d(c,"floor",(function(){return Yn})),n.d(c,"min",(function(){return Kn})),n.d(c,"max",(function(){return $n})),n.d(c,"round",(function(){return Zn})),n.d(c,"scale",(function(){return Qn})),n.d(c,"scaleAndAdd",(function(){return Jn})),n.d(c,"distance",(function(){return er})),n.d(c,"squaredDistance",(function(){return tr})),n.d(c,"length",(function(){return nr})),n.d(c,"squaredLength",(function(){return rr})),n.d(c,"negate",(function(){return ir})),n.d(c,"inverse",(function(){return or})),n.d(c,"normalize",(function(){return ar})),n.d(c,"dot",(function(){return sr})),n.d(c,"cross",(function(){return ur})),n.d(c,"lerp",(function(){return cr})),n.d(c,"random",(function(){return lr})),n.d(c,"transformMat4",(function(){return fr})),n.d(c,"transformQuat",(function(){return hr})),n.d(c,"zero",(function(){return dr})),n.d(c,"str",(function(){return pr})),n.d(c,"exactEquals",(function(){return _r})),n.d(c,"equals",(function(){return mr})),n.d(c,"sub",(function(){return vr})),n.d(c,"mul",(function(){return gr})),n.d(c,"div",(function(){return br})),n.d(c,"dist",(function(){return yr})),n.d(c,"sqrDist",(function(){return xr})),n.d(c,"len",(function(){return Er})),n.d(c,"sqrLen",(function(){return Tr})),n.d(c,"forEach",(function(){return wr}));var l={};n.r(l),n.d(l,"create",(function(){return Ar})),n.d(l,"identity",(function(){return Mr})),n.d(l,"setAxisAngle",(function(){return Or})),n.d(l,"getAxisAngle",(function(){return Rr})),n.d(l,"multiply",(function(){return Sr})),n.d(l,"rotateX",(function(){return Pr})),n.d(l,"rotateY",(function(){return Lr})),n.d(l,"rotateZ",(function(){return Fr})),n.d(l,"calculateW",(function(){return Ir})),n.d(l,"slerp",(function(){return Cr})),n.d(l,"random",(function(){return Nr})),n.d(l,"invert",(function(){return jr})),n.d(l,"conjugate",(function(){return Dr})),n.d(l,"fromMat3",(function(){return Br})),n.d(l,"fromEuler",(function(){return Ur})),n.d(l,"str",(function(){return zr})),n.d(l,"clone",(function(){return Xr})),n.d(l,"fromValues",(function(){return Yr})),n.d(l,"copy",(function(){return Kr})),n.d(l,"set",(function(){return $r})),n.d(l,"add",(function(){return Zr})),n.d(l,"mul",(function(){return Qr})),n.d(l,"scale",(function(){return Jr})),n.d(l,"dot",(function(){return ei})),n.d(l,"lerp",(function(){return ti})),n.d(l,"length",(function(){return ni})),n.d(l,"len",(function(){return ri})),n.d(l,"squaredLength",(function(){return ii})),n.d(l,"sqrLen",(function(){return oi})),n.d(l,"normalize",(function(){return ai})),n.d(l,"exactEquals",(function(){return si})),n.d(l,"equals",(function(){return ui})),n.d(l,"rotationTo",(function(){return ci})),n.d(l,"sqlerp",(function(){return li})),n.d(l,"setAxes",(function(){return fi}));var f={};n.r(f),n.d(f,"create",(function(){return hi})),n.d(f,"clone",(function(){return di})),n.d(f,"fromValues",(function(){return pi})),n.d(f,"fromRotationTranslationValues",(function(){return _i})),n.d(f,"fromRotationTranslation",(function(){return mi})),n.d(f,"fromTranslation",(function(){return vi})),n.d(f,"fromRotation",(function(){return gi})),n.d(f,"fromMat4",(function(){return bi})),n.d(f,"copy",(function(){return yi})),n.d(f,"identity",(function(){return xi})),n.d(f,"set",(function(){return Ei})),n.d(f,"getReal",(function(){return Ti})),n.d(f,"getDual",(function(){return wi})),n.d(f,"setReal",(function(){return Ai})),n.d(f,"setDual",(function(){return Mi})),n.d(f,"getTranslation",(function(){return Oi})),n.d(f,"translate",(function(){return Ri})),n.d(f,"rotateX",(function(){return Si})),n.d(f,"rotateY",(function(){return Pi})),n.d(f,"rotateZ",(function(){return Li})),n.d(f,"rotateByQuatAppend",(function(){return Fi})),n.d(f,"rotateByQuatPrepend",(function(){return Ii})),n.d(f,"rotateAroundAxis",(function(){return Ci})),n.d(f,"add",(function(){return Ni})),n.d(f,"multiply",(function(){return ji})),n.d(f,"mul",(function(){return Di})),n.d(f,"scale",(function(){return Bi})),n.d(f,"dot",(function(){return Ui})),n.d(f,"lerp",(function(){return zi})),n.d(f,"invert",(function(){return ki})),n.d(f,"conjugate",(function(){return Gi})),n.d(f,"length",(function(){return qi})),n.d(f,"len",(function(){return Vi})),n.d(f,"squaredLength",(function(){return Hi})),n.d(f,"sqrLen",(function(){return Wi})),n.d(f,"normalize",(function(){return Xi})),n.d(f,"str",(function(){return Yi})),n.d(f,"exactEquals",(function(){return Ki})),n.d(f,"equals",(function(){return $i}));var h={};n.r(h),n.d(h,"create",(function(){return Zi})),n.d(h,"clone",(function(){return Qi})),n.d(h,"fromValues",(function(){return Ji})),n.d(h,"copy",(function(){return eo})),n.d(h,"set",(function(){return to})),n.d(h,"add",(function(){return no})),n.d(h,"subtract",(function(){return ro})),n.d(h,"multiply",(function(){return io})),n.d(h,"divide",(function(){return oo})),n.d(h,"ceil",(function(){return ao})),n.d(h,"floor",(function(){return so})),n.d(h,"min",(function(){return uo})),n.d(h,"max",(function(){return co})),n.d(h,"round",(function(){return lo})),n.d(h,"scale",(function(){return fo})),n.d(h,"scaleAndAdd",(function(){return ho})),n.d(h,"distance",(function(){return po})),n.d(h,"squaredDistance",(function(){return _o})),n.d(h,"length",(function(){return mo})),n.d(h,"squaredLength",(function(){return vo})),n.d(h,"negate",(function(){return go})),n.d(h,"inverse",(function(){return bo})),n.d(h,"normalize",(function(){return yo})),n.d(h,"dot",(function(){return xo})),n.d(h,"cross",(function(){return Eo})),n.d(h,"lerp",(function(){return To})),n.d(h,"random",(function(){return wo})),n.d(h,"transformMat2",(function(){return Ao})),n.d(h,"transformMat2d",(function(){return Mo})),n.d(h,"transformMat3",(function(){return Oo})),n.d(h,"transformMat4",(function(){return Ro})),n.d(h,"rotate",(function(){return So})),n.d(h,"angle",(function(){return Po})),n.d(h,"zero",(function(){return Lo})),n.d(h,"str",(function(){return Fo})),n.d(h,"exactEquals",(function(){return Io})),n.d(h,"equals",(function(){return Co})),n.d(h,"len",(function(){return No})),n.d(h,"sub",(function(){return jo})),n.d(h,"mul",(function(){return Do})),n.d(h,"div",(function(){return Bo})),n.d(h,"dist",(function(){return Uo})),n.d(h,"sqrDist",(function(){return zo})),n.d(h,"sqrLen",(function(){return ko})),n.d(h,"forEach",(function(){return Go}));var d=1e-6,p="undefined"!=typeof Float32Array?Float32Array:Array,_=Math.random;function m(e){p=e}var v=Math.PI/180;function g(e){return e*v}function b(e,t){return Math.abs(e-t)<=d*Math.max(1,Math.abs(e),Math.abs(t))}function y(){var e=new p(4);return p!=Float32Array&&(e[1]=0,e[2]=0),e[0]=1,e[3]=1,e}function x(e){var t=new p(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function E(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function T(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}function w(e,t,n,r){var i=new p(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=r,i}function A(e,t,n,r,i){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e}function M(e,t){if(e===t){var n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}function O(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n*o-i*r;return a?(a=1/a,e[0]=o*a,e[1]=-r*a,e[2]=-i*a,e[3]=n*a,e):null}function R(e,t){var n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}function S(e){return e[0]*e[3]-e[2]*e[1]}function P(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1],c=n[2],l=n[3];return e[0]=r*s+o*u,e[1]=i*s+a*u,e[2]=r*c+o*l,e[3]=i*c+a*l,e}function L(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u+o*s,e[1]=i*u+a*s,e[2]=r*-s+o*u,e[3]=i*-s+a*u,e}function F(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1];return e[0]=r*s,e[1]=i*s,e[2]=o*u,e[3]=a*u,e}function I(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=-n,e[3]=r,e}function C(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}function N(e){return"mat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function j(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2))}function D(e,t,n,r){return e[2]=r[2]/r[0],n[0]=r[0],n[1]=r[1],n[3]=r[3]-e[2]*n[1],[e,t,n]}function B(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}function U(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}function z(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function k(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=t[0],s=t[1],u=t[2],c=t[3];return Math.abs(n-a)<=d*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-s)<=d*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-u)<=d*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-c)<=d*Math.max(1,Math.abs(o),Math.abs(c))}function G(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}function q(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e}var V=P,H=U;function W(){var e=new p(6);return p!=Float32Array&&(e[1]=0,e[2]=0,e[4]=0,e[5]=0),e[0]=1,e[3]=1,e}function X(e){var t=new p(6);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function Y(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function K(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}function $(e,t,n,r,i,o){var a=new p(6);return a[0]=e,a[1]=t,a[2]=n,a[3]=r,a[4]=i,a[5]=o,a}function Z(e,t,n,r,i,o,a){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e}function Q(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=n*o-r*i;return u?(u=1/u,e[0]=o*u,e[1]=-r*u,e[2]=-i*u,e[3]=n*u,e[4]=(i*s-o*a)*u,e[5]=(r*a-n*s)*u,e):null}function J(e){return e[0]*e[3]-e[1]*e[2]}function ee(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=n[0],l=n[1],f=n[2],h=n[3],d=n[4],p=n[5];return e[0]=r*c+o*l,e[1]=i*c+a*l,e[2]=r*f+o*h,e[3]=i*f+a*h,e[4]=r*d+o*p+s,e[5]=i*d+a*p+u,e}function te(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=Math.sin(n),l=Math.cos(n);return e[0]=r*l+o*c,e[1]=i*l+a*c,e[2]=r*-c+o*l,e[3]=i*-c+a*l,e[4]=s,e[5]=u,e}function ne(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=n[0],l=n[1];return e[0]=r*c,e[1]=i*c,e[2]=o*l,e[3]=a*l,e[4]=s,e[5]=u,e}function re(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=n[0],l=n[1];return e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=r*c+o*l+s,e[5]=i*c+a*l+u,e}function ie(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=-n,e[3]=r,e[4]=0,e[5]=0,e}function oe(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}function ae(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}function se(e){return"mat2d("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+")"}function ue(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2)+Math.pow(e[4],2)+Math.pow(e[5],2)+1)}function ce(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}function le(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}function fe(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}function he(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e}function de(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}function pe(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=t[0],c=t[1],l=t[2],f=t[3],h=t[4],p=t[5];return Math.abs(n-u)<=d*Math.max(1,Math.abs(n),Math.abs(u))&&Math.abs(r-c)<=d*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(i-l)<=d*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(o-f)<=d*Math.max(1,Math.abs(o),Math.abs(f))&&Math.abs(a-h)<=d*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(s-p)<=d*Math.max(1,Math.abs(s),Math.abs(p))}var _e=ee,me=le;function ve(){var e=new p(9);return p!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[5]=0,e[6]=0,e[7]=0),e[0]=1,e[4]=1,e[8]=1,e}function ge(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function be(e){var t=new p(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function ye(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function xe(e,t,n,r,i,o,a,s,u){var c=new p(9);return c[0]=e,c[1]=t,c[2]=n,c[3]=r,c[4]=i,c[5]=o,c[6]=a,c[7]=s,c[8]=u,c}function Ee(e,t,n,r,i,o,a,s,u,c){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e[6]=s,e[7]=u,e[8]=c,e}function Te(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function we(e,t){if(e===t){var n=t[1],r=t[2],i=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=r,e[7]=i}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function Ae(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=l*a-s*c,h=-l*o+s*u,d=c*o-a*u,p=n*f+r*h+i*d;return p?(p=1/p,e[0]=f*p,e[1]=(-l*r+i*c)*p,e[2]=(s*r-i*a)*p,e[3]=h*p,e[4]=(l*n-i*u)*p,e[5]=(-s*n+i*o)*p,e[6]=d*p,e[7]=(-c*n+r*u)*p,e[8]=(a*n-r*o)*p,e):null}function Me(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8];return e[0]=a*l-s*c,e[1]=i*c-r*l,e[2]=r*s-i*a,e[3]=s*u-o*l,e[4]=n*l-i*u,e[5]=i*o-n*s,e[6]=o*c-a*u,e[7]=r*u-n*c,e[8]=n*a-r*o,e}function Oe(e){var t=e[0],n=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],u=e[7],c=e[8];return t*(c*o-a*u)+n*(-c*i+a*s)+r*(u*i-o*s)}function Re(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=n[0],d=n[1],p=n[2],_=n[3],m=n[4],v=n[5],g=n[6],b=n[7],y=n[8];return e[0]=h*r+d*a+p*c,e[1]=h*i+d*s+p*l,e[2]=h*o+d*u+p*f,e[3]=_*r+m*a+v*c,e[4]=_*i+m*s+v*l,e[5]=_*o+m*u+v*f,e[6]=g*r+b*a+y*c,e[7]=g*i+b*s+y*l,e[8]=g*o+b*u+y*f,e}function Se(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=n[0],d=n[1];return e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=s,e[5]=u,e[6]=h*r+d*a+c,e[7]=h*i+d*s+l,e[8]=h*o+d*u+f,e}function Pe(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=Math.sin(n),d=Math.cos(n);return e[0]=d*r+h*a,e[1]=d*i+h*s,e[2]=d*o+h*u,e[3]=d*a-h*r,e[4]=d*s-h*i,e[5]=d*u-h*o,e[6]=c,e[7]=l,e[8]=f,e}function Le(e,t,n){var r=n[0],i=n[1];return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=i*t[3],e[4]=i*t[4],e[5]=i*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function Fe(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}function Ie(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=-n,e[4]=r,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ce(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ne(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}function je(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n+n,s=r+r,u=i+i,c=n*a,l=r*a,f=r*s,h=i*a,d=i*s,p=i*u,_=o*a,m=o*s,v=o*u;return e[0]=1-f-p,e[3]=l-v,e[6]=h+m,e[1]=l+v,e[4]=1-c-p,e[7]=d-_,e[2]=h-m,e[5]=d+_,e[8]=1-c-f,e}function De(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=t[9],h=t[10],d=t[11],p=t[12],_=t[13],m=t[14],v=t[15],g=n*s-r*a,b=n*u-i*a,y=n*c-o*a,x=r*u-i*s,E=r*c-o*s,T=i*c-o*u,w=l*_-f*p,A=l*m-h*p,M=l*v-d*p,O=f*m-h*_,R=f*v-d*_,S=h*v-d*m,P=g*S-b*R+y*O+x*M-E*A+T*w;return P?(P=1/P,e[0]=(s*S-u*R+c*O)*P,e[1]=(u*M-a*S-c*A)*P,e[2]=(a*R-s*M+c*w)*P,e[3]=(i*R-r*S-o*O)*P,e[4]=(n*S-i*M+o*A)*P,e[5]=(r*M-n*R-o*w)*P,e[6]=(_*T-m*E+v*x)*P,e[7]=(m*y-p*T-v*b)*P,e[8]=(p*E-_*y+v*g)*P,e):null}function Be(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function Ue(e){return"mat3("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+")"}function ze(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2)+Math.pow(e[4],2)+Math.pow(e[5],2)+Math.pow(e[6],2)+Math.pow(e[7],2)+Math.pow(e[8],2))}function ke(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}function Ge(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}function qe(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}function Ve(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e}function He(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}function We(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],l=e[8],f=t[0],h=t[1],p=t[2],_=t[3],m=t[4],v=t[5],g=t[6],b=t[7],y=t[8];return Math.abs(n-f)<=d*Math.max(1,Math.abs(n),Math.abs(f))&&Math.abs(r-h)<=d*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(i-p)<=d*Math.max(1,Math.abs(i),Math.abs(p))&&Math.abs(o-_)<=d*Math.max(1,Math.abs(o),Math.abs(_))&&Math.abs(a-m)<=d*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(s-v)<=d*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(u-g)<=d*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(c-b)<=d*Math.max(1,Math.abs(c),Math.abs(b))&&Math.abs(l-y)<=d*Math.max(1,Math.abs(l),Math.abs(y))}var Xe=Re,Ye=Ge;function Ke(){var e=new p(16);return p!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function $e(e){var t=new p(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Ze(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Qe(e,t,n,r,i,o,a,s,u,c,l,f,h,d,_,m){var v=new p(16);return v[0]=e,v[1]=t,v[2]=n,v[3]=r,v[4]=i,v[5]=o,v[6]=a,v[7]=s,v[8]=u,v[9]=c,v[10]=l,v[11]=f,v[12]=h,v[13]=d,v[14]=_,v[15]=m,v}function Je(e,t,n,r,i,o,a,s,u,c,l,f,h,d,p,_,m){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e[6]=s,e[7]=u,e[8]=c,e[9]=l,e[10]=f,e[11]=h,e[12]=d,e[13]=p,e[14]=_,e[15]=m,e}function et(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function tt(e,t){if(e===t){var n=t[1],r=t[2],i=t[3],o=t[6],a=t[7],s=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=o,e[11]=t[14],e[12]=i,e[13]=a,e[14]=s}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function nt(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=t[9],h=t[10],d=t[11],p=t[12],_=t[13],m=t[14],v=t[15],g=n*s-r*a,b=n*u-i*a,y=n*c-o*a,x=r*u-i*s,E=r*c-o*s,T=i*c-o*u,w=l*_-f*p,A=l*m-h*p,M=l*v-d*p,O=f*m-h*_,R=f*v-d*_,S=h*v-d*m,P=g*S-b*R+y*O+x*M-E*A+T*w;return P?(P=1/P,e[0]=(s*S-u*R+c*O)*P,e[1]=(i*R-r*S-o*O)*P,e[2]=(_*T-m*E+v*x)*P,e[3]=(h*E-f*T-d*x)*P,e[4]=(u*M-a*S-c*A)*P,e[5]=(n*S-i*M+o*A)*P,e[6]=(m*y-p*T-v*b)*P,e[7]=(l*T-h*y+d*b)*P,e[8]=(a*R-s*M+c*w)*P,e[9]=(r*M-n*R-o*w)*P,e[10]=(p*E-_*y+v*g)*P,e[11]=(f*y-l*E-d*g)*P,e[12]=(s*A-a*O-u*w)*P,e[13]=(n*O-r*A+i*w)*P,e[14]=(_*b-p*x-m*g)*P,e[15]=(l*x-f*b+h*g)*P,e):null}function rt(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=t[9],h=t[10],d=t[11],p=t[12],_=t[13],m=t[14],v=t[15];return e[0]=s*(h*v-d*m)-f*(u*v-c*m)+_*(u*d-c*h),e[1]=-(r*(h*v-d*m)-f*(i*v-o*m)+_*(i*d-o*h)),e[2]=r*(u*v-c*m)-s*(i*v-o*m)+_*(i*c-o*u),e[3]=-(r*(u*d-c*h)-s*(i*d-o*h)+f*(i*c-o*u)),e[4]=-(a*(h*v-d*m)-l*(u*v-c*m)+p*(u*d-c*h)),e[5]=n*(h*v-d*m)-l*(i*v-o*m)+p*(i*d-o*h),e[6]=-(n*(u*v-c*m)-a*(i*v-o*m)+p*(i*c-o*u)),e[7]=n*(u*d-c*h)-a*(i*d-o*h)+l*(i*c-o*u),e[8]=a*(f*v-d*_)-l*(s*v-c*_)+p*(s*d-c*f),e[9]=-(n*(f*v-d*_)-l*(r*v-o*_)+p*(r*d-o*f)),e[10]=n*(s*v-c*_)-a*(r*v-o*_)+p*(r*c-o*s),e[11]=-(n*(s*d-c*f)-a*(r*d-o*f)+l*(r*c-o*s)),e[12]=-(a*(f*m-h*_)-l*(s*m-u*_)+p*(s*h-u*f)),e[13]=n*(f*m-h*_)-l*(r*m-i*_)+p*(r*h-i*f),e[14]=-(n*(s*m-u*_)-a*(r*m-i*_)+p*(r*u-i*s)),e[15]=n*(s*h-u*f)-a*(r*h-i*f)+l*(r*u-i*s),e}function it(e){var t=e[0],n=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],u=e[7],c=e[8],l=e[9],f=e[10],h=e[11],d=e[12],p=e[13],_=e[14],m=e[15];return(t*a-n*o)*(f*m-h*_)-(t*s-r*o)*(l*m-h*p)+(t*u-i*o)*(l*_-f*p)+(n*s-r*a)*(c*m-h*d)-(n*u-i*a)*(c*_-f*d)+(r*u-i*s)*(c*p-l*d)}function ot(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=t[9],d=t[10],p=t[11],_=t[12],m=t[13],v=t[14],g=t[15],b=n[0],y=n[1],x=n[2],E=n[3];return e[0]=b*r+y*s+x*f+E*_,e[1]=b*i+y*u+x*h+E*m,e[2]=b*o+y*c+x*d+E*v,e[3]=b*a+y*l+x*p+E*g,b=n[4],y=n[5],x=n[6],E=n[7],e[4]=b*r+y*s+x*f+E*_,e[5]=b*i+y*u+x*h+E*m,e[6]=b*o+y*c+x*d+E*v,e[7]=b*a+y*l+x*p+E*g,b=n[8],y=n[9],x=n[10],E=n[11],e[8]=b*r+y*s+x*f+E*_,e[9]=b*i+y*u+x*h+E*m,e[10]=b*o+y*c+x*d+E*v,e[11]=b*a+y*l+x*p+E*g,b=n[12],y=n[13],x=n[14],E=n[15],e[12]=b*r+y*s+x*f+E*_,e[13]=b*i+y*u+x*h+E*m,e[14]=b*o+y*c+x*d+E*v,e[15]=b*a+y*l+x*p+E*g,e}function at(e,t,n){var r,i,o,a,s,u,c,l,f,h,d,p,_=n[0],m=n[1],v=n[2];return t===e?(e[12]=t[0]*_+t[4]*m+t[8]*v+t[12],e[13]=t[1]*_+t[5]*m+t[9]*v+t[13],e[14]=t[2]*_+t[6]*m+t[10]*v+t[14],e[15]=t[3]*_+t[7]*m+t[11]*v+t[15]):(r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=t[9],d=t[10],p=t[11],e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=s,e[5]=u,e[6]=c,e[7]=l,e[8]=f,e[9]=h,e[10]=d,e[11]=p,e[12]=r*_+s*m+f*v+t[12],e[13]=i*_+u*m+h*v+t[13],e[14]=o*_+c*m+d*v+t[14],e[15]=a*_+l*m+p*v+t[15]),e}function st(e,t,n){var r=n[0],i=n[1],o=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*o,e[9]=t[9]*o,e[10]=t[10]*o,e[11]=t[11]*o,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ut(e,t,n,r){var i,o,a,s,u,c,l,f,h,p,_,m,v,g,b,y,x,E,T,w,A,M,O,R,S=r[0],P=r[1],L=r[2],F=Math.sqrt(S*S+P*P+L*L);return F<d?null:(S*=F=1/F,P*=F,L*=F,i=Math.sin(n),a=1-(o=Math.cos(n)),s=t[0],u=t[1],c=t[2],l=t[3],f=t[4],h=t[5],p=t[6],_=t[7],m=t[8],v=t[9],g=t[10],b=t[11],y=S*S*a+o,x=P*S*a+L*i,E=L*S*a-P*i,T=S*P*a-L*i,w=P*P*a+o,A=L*P*a+S*i,M=S*L*a+P*i,O=P*L*a-S*i,R=L*L*a+o,e[0]=s*y+f*x+m*E,e[1]=u*y+h*x+v*E,e[2]=c*y+p*x+g*E,e[3]=l*y+_*x+b*E,e[4]=s*T+f*w+m*A,e[5]=u*T+h*w+v*A,e[6]=c*T+p*w+g*A,e[7]=l*T+_*w+b*A,e[8]=s*M+f*O+m*R,e[9]=u*M+h*O+v*R,e[10]=c*M+p*O+g*R,e[11]=l*M+_*O+b*R,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function ct(e,t,n){var r=Math.sin(n),i=Math.cos(n),o=t[4],a=t[5],s=t[6],u=t[7],c=t[8],l=t[9],f=t[10],h=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=o*i+c*r,e[5]=a*i+l*r,e[6]=s*i+f*r,e[7]=u*i+h*r,e[8]=c*i-o*r,e[9]=l*i-a*r,e[10]=f*i-s*r,e[11]=h*i-u*r,e}function lt(e,t,n){var r=Math.sin(n),i=Math.cos(n),o=t[0],a=t[1],s=t[2],u=t[3],c=t[8],l=t[9],f=t[10],h=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*i-c*r,e[1]=a*i-l*r,e[2]=s*i-f*r,e[3]=u*i-h*r,e[8]=o*r+c*i,e[9]=a*r+l*i,e[10]=s*r+f*i,e[11]=u*r+h*i,e}function ft(e,t,n){var r=Math.sin(n),i=Math.cos(n),o=t[0],a=t[1],s=t[2],u=t[3],c=t[4],l=t[5],f=t[6],h=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*i+c*r,e[1]=a*i+l*r,e[2]=s*i+f*r,e[3]=u*i+h*r,e[4]=c*i-o*r,e[5]=l*i-a*r,e[6]=f*i-s*r,e[7]=h*i-u*r,e}function ht(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}function dt(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function pt(e,t,n){var r,i,o,a=n[0],s=n[1],u=n[2],c=Math.sqrt(a*a+s*s+u*u);return c<d?null:(a*=c=1/c,s*=c,u*=c,r=Math.sin(t),o=1-(i=Math.cos(t)),e[0]=a*a*o+i,e[1]=s*a*o+u*r,e[2]=u*a*o-s*r,e[3]=0,e[4]=a*s*o-u*r,e[5]=s*s*o+i,e[6]=u*s*o+a*r,e[7]=0,e[8]=a*u*o+s*r,e[9]=s*u*o-a*r,e[10]=u*u*o+i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)}function _t(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function mt(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function vt(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function gt(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=r+r,u=i+i,c=o+o,l=r*s,f=r*u,h=r*c,d=i*u,p=i*c,_=o*c,m=a*s,v=a*u,g=a*c;return e[0]=1-(d+_),e[1]=f+g,e[2]=h-v,e[3]=0,e[4]=f-g,e[5]=1-(l+_),e[6]=p+m,e[7]=0,e[8]=h+v,e[9]=p-m,e[10]=1-(l+d),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function bt(e,t){var n=new p(3),r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=r*r+i*i+o*o+a*a;return f>0?(n[0]=2*(s*a+l*r+u*o-c*i)/f,n[1]=2*(u*a+l*i+c*r-s*o)/f,n[2]=2*(c*a+l*o+s*i-u*r)/f):(n[0]=2*(s*a+l*r+u*o-c*i),n[1]=2*(u*a+l*i+c*r-s*o),n[2]=2*(c*a+l*o+s*i-u*r)),gt(e,t,n),e}function yt(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function xt(e,t){var n=t[0],r=t[1],i=t[2],o=t[4],a=t[5],s=t[6],u=t[8],c=t[9],l=t[10];return e[0]=Math.sqrt(n*n+r*r+i*i),e[1]=Math.sqrt(o*o+a*a+s*s),e[2]=Math.sqrt(u*u+c*c+l*l),e}function Et(e,t){var n=t[0]+t[5]+t[10],r=0;return n>0?(r=2*Math.sqrt(n+1),e[3]=.25*r,e[0]=(t[6]-t[9])/r,e[1]=(t[8]-t[2])/r,e[2]=(t[1]-t[4])/r):t[0]>t[5]&&t[0]>t[10]?(r=2*Math.sqrt(1+t[0]-t[5]-t[10]),e[3]=(t[6]-t[9])/r,e[0]=.25*r,e[1]=(t[1]+t[4])/r,e[2]=(t[8]+t[2])/r):t[5]>t[10]?(r=2*Math.sqrt(1+t[5]-t[0]-t[10]),e[3]=(t[8]-t[2])/r,e[0]=(t[1]+t[4])/r,e[1]=.25*r,e[2]=(t[6]+t[9])/r):(r=2*Math.sqrt(1+t[10]-t[0]-t[5]),e[3]=(t[1]-t[4])/r,e[0]=(t[8]+t[2])/r,e[1]=(t[6]+t[9])/r,e[2]=.25*r),e}function Tt(e,t,n,r){var i=t[0],o=t[1],a=t[2],s=t[3],u=i+i,c=o+o,l=a+a,f=i*u,h=i*c,d=i*l,p=o*c,_=o*l,m=a*l,v=s*u,g=s*c,b=s*l,y=r[0],x=r[1],E=r[2];return e[0]=(1-(p+m))*y,e[1]=(h+b)*y,e[2]=(d-g)*y,e[3]=0,e[4]=(h-b)*x,e[5]=(1-(f+m))*x,e[6]=(_+v)*x,e[7]=0,e[8]=(d+g)*E,e[9]=(_-v)*E,e[10]=(1-(f+p))*E,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function wt(e,t,n,r,i){var o=t[0],a=t[1],s=t[2],u=t[3],c=o+o,l=a+a,f=s+s,h=o*c,d=o*l,p=o*f,_=a*l,m=a*f,v=s*f,g=u*c,b=u*l,y=u*f,x=r[0],E=r[1],T=r[2],w=i[0],A=i[1],M=i[2],O=(1-(_+v))*x,R=(d+y)*x,S=(p-b)*x,P=(d-y)*E,L=(1-(h+v))*E,F=(m+g)*E,I=(p+b)*T,C=(m-g)*T,N=(1-(h+_))*T;return e[0]=O,e[1]=R,e[2]=S,e[3]=0,e[4]=P,e[5]=L,e[6]=F,e[7]=0,e[8]=I,e[9]=C,e[10]=N,e[11]=0,e[12]=n[0]+w-(O*w+P*A+I*M),e[13]=n[1]+A-(R*w+L*A+C*M),e[14]=n[2]+M-(S*w+F*A+N*M),e[15]=1,e}function At(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n+n,s=r+r,u=i+i,c=n*a,l=r*a,f=r*s,h=i*a,d=i*s,p=i*u,_=o*a,m=o*s,v=o*u;return e[0]=1-f-p,e[1]=l+v,e[2]=h-m,e[3]=0,e[4]=l-v,e[5]=1-c-p,e[6]=d+_,e[7]=0,e[8]=h+m,e[9]=d-_,e[10]=1-c-f,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Mt(e,t,n,r,i,o,a){var s=1/(n-t),u=1/(i-r),c=1/(o-a);return e[0]=2*o*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*o*u,e[6]=0,e[7]=0,e[8]=(n+t)*s,e[9]=(i+r)*u,e[10]=(a+o)*c,e[11]=-1,e[12]=0,e[13]=0,e[14]=a*o*2*c,e[15]=0,e}function Ot(e,t,n,r,i){var o,a=1/Math.tan(t/2);return e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(o=1/(r-i),e[10]=(i+r)*o,e[14]=2*i*r*o):(e[10]=-1,e[14]=-2*r),e}function Rt(e,t,n,r){var i=Math.tan(t.upDegrees*Math.PI/180),o=Math.tan(t.downDegrees*Math.PI/180),a=Math.tan(t.leftDegrees*Math.PI/180),s=Math.tan(t.rightDegrees*Math.PI/180),u=2/(a+s),c=2/(i+o);return e[0]=u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=c,e[6]=0,e[7]=0,e[8]=-(a-s)*u*.5,e[9]=(i-o)*c*.5,e[10]=r/(n-r),e[11]=-1,e[12]=0,e[13]=0,e[14]=r*n/(n-r),e[15]=0,e}function St(e,t,n,r,i,o,a){var s=1/(t-n),u=1/(r-i),c=1/(o-a);return e[0]=-2*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*c,e[11]=0,e[12]=(t+n)*s,e[13]=(i+r)*u,e[14]=(a+o)*c,e[15]=1,e}function Pt(e,t,n,r){var i,o,a,s,u,c,l,f,h,p,_=t[0],m=t[1],v=t[2],g=r[0],b=r[1],y=r[2],x=n[0],E=n[1],T=n[2];return Math.abs(_-x)<d&&Math.abs(m-E)<d&&Math.abs(v-T)<d?et(e):(l=_-x,f=m-E,h=v-T,i=b*(h*=p=1/Math.sqrt(l*l+f*f+h*h))-y*(f*=p),o=y*(l*=p)-g*h,a=g*f-b*l,(p=Math.sqrt(i*i+o*o+a*a))?(i*=p=1/p,o*=p,a*=p):(i=0,o=0,a=0),s=f*a-h*o,u=h*i-l*a,c=l*o-f*i,(p=Math.sqrt(s*s+u*u+c*c))?(s*=p=1/p,u*=p,c*=p):(s=0,u=0,c=0),e[0]=i,e[1]=s,e[2]=l,e[3]=0,e[4]=o,e[5]=u,e[6]=f,e[7]=0,e[8]=a,e[9]=c,e[10]=h,e[11]=0,e[12]=-(i*_+o*m+a*v),e[13]=-(s*_+u*m+c*v),e[14]=-(l*_+f*m+h*v),e[15]=1,e)}function Lt(e,t,n,r){var i=t[0],o=t[1],a=t[2],s=r[0],u=r[1],c=r[2],l=i-n[0],f=o-n[1],h=a-n[2],d=l*l+f*f+h*h;d>0&&(l*=d=1/Math.sqrt(d),f*=d,h*=d);var p=u*h-c*f,_=c*l-s*h,m=s*f-u*l;return(d=p*p+_*_+m*m)>0&&(p*=d=1/Math.sqrt(d),_*=d,m*=d),e[0]=p,e[1]=_,e[2]=m,e[3]=0,e[4]=f*m-h*_,e[5]=h*p-l*m,e[6]=l*_-f*p,e[7]=0,e[8]=l,e[9]=f,e[10]=h,e[11]=0,e[12]=i,e[13]=o,e[14]=a,e[15]=1,e}function Ft(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"}function It(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2)+Math.pow(e[4],2)+Math.pow(e[5],2)+Math.pow(e[6],2)+Math.pow(e[7],2)+Math.pow(e[8],2)+Math.pow(e[9],2)+Math.pow(e[10],2)+Math.pow(e[11],2)+Math.pow(e[12],2)+Math.pow(e[13],2)+Math.pow(e[14],2)+Math.pow(e[15],2))}function Ct(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}function Nt(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}function jt(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}function Dt(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e[9]=t[9]+n[9]*r,e[10]=t[10]+n[10]*r,e[11]=t[11]+n[11]*r,e[12]=t[12]+n[12]*r,e[13]=t[13]+n[13]*r,e[14]=t[14]+n[14]*r,e[15]=t[15]+n[15]*r,e}function Bt(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}function Ut(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],l=e[8],f=e[9],h=e[10],p=e[11],_=e[12],m=e[13],v=e[14],g=e[15],b=t[0],y=t[1],x=t[2],E=t[3],T=t[4],w=t[5],A=t[6],M=t[7],O=t[8],R=t[9],S=t[10],P=t[11],L=t[12],F=t[13],I=t[14],C=t[15];return Math.abs(n-b)<=d*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-y)<=d*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(i-x)<=d*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(o-E)<=d*Math.max(1,Math.abs(o),Math.abs(E))&&Math.abs(a-T)<=d*Math.max(1,Math.abs(a),Math.abs(T))&&Math.abs(s-w)<=d*Math.max(1,Math.abs(s),Math.abs(w))&&Math.abs(u-A)<=d*Math.max(1,Math.abs(u),Math.abs(A))&&Math.abs(c-M)<=d*Math.max(1,Math.abs(c),Math.abs(M))&&Math.abs(l-O)<=d*Math.max(1,Math.abs(l),Math.abs(O))&&Math.abs(f-R)<=d*Math.max(1,Math.abs(f),Math.abs(R))&&Math.abs(h-S)<=d*Math.max(1,Math.abs(h),Math.abs(S))&&Math.abs(p-P)<=d*Math.max(1,Math.abs(p),Math.abs(P))&&Math.abs(_-L)<=d*Math.max(1,Math.abs(_),Math.abs(L))&&Math.abs(m-F)<=d*Math.max(1,Math.abs(m),Math.abs(F))&&Math.abs(v-I)<=d*Math.max(1,Math.abs(v),Math.abs(I))&&Math.abs(g-C)<=d*Math.max(1,Math.abs(g),Math.abs(C))}var zt=ot,kt=Nt;function Gt(){var e=new p(3);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function qt(e){var t=new p(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Vt(e){var t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}function Ht(e,t,n){var r=new p(3);return r[0]=e,r[1]=t,r[2]=n,r}function Wt(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Xt(e,t,n,r){return e[0]=t,e[1]=n,e[2]=r,e}function Yt(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}function Kt(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}function $t(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}function Zt(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}function Qt(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}function Jt(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}function en(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}function tn(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}function nn(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e}function rn(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}function on(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e}function an(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return Math.sqrt(n*n+r*r+i*i)}function sn(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return n*n+r*r+i*i}function un(e){var t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}function cn(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function ln(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function fn(e,t){var n=t[0],r=t[1],i=t[2],o=n*n+r*r+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e}function hn(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function dn(e,t,n){var r=t[0],i=t[1],o=t[2],a=n[0],s=n[1],u=n[2];return e[0]=i*u-o*s,e[1]=o*a-r*u,e[2]=r*s-i*a,e}function pn(e,t,n,r){var i=t[0],o=t[1],a=t[2];return e[0]=i+r*(n[0]-i),e[1]=o+r*(n[1]-o),e[2]=a+r*(n[2]-a),e}function _n(e,t,n,r,i,o){var a=o*o,s=a*(2*o-3)+1,u=a*(o-2)+o,c=a*(o-1),l=a*(3-2*o);return e[0]=t[0]*s+n[0]*u+r[0]*c+i[0]*l,e[1]=t[1]*s+n[1]*u+r[1]*c+i[1]*l,e[2]=t[2]*s+n[2]*u+r[2]*c+i[2]*l,e}function mn(e,t,n,r,i,o){var a=1-o,s=a*a,u=o*o,c=s*a,l=3*o*s,f=3*u*a,h=u*o;return e[0]=t[0]*c+n[0]*l+r[0]*f+i[0]*h,e[1]=t[1]*c+n[1]*l+r[1]*f+i[1]*h,e[2]=t[2]*c+n[2]*l+r[2]*f+i[2]*h,e}function vn(e,t){t=t||1;var n=2*_()*Math.PI,r=2*_()-1,i=Math.sqrt(1-r*r)*t;return e[0]=Math.cos(n)*i,e[1]=Math.sin(n)*i,e[2]=r*t,e}function gn(e,t,n){var r=t[0],i=t[1],o=t[2],a=n[3]*r+n[7]*i+n[11]*o+n[15];return a=a||1,e[0]=(n[0]*r+n[4]*i+n[8]*o+n[12])/a,e[1]=(n[1]*r+n[5]*i+n[9]*o+n[13])/a,e[2]=(n[2]*r+n[6]*i+n[10]*o+n[14])/a,e}function bn(e,t,n){var r=t[0],i=t[1],o=t[2];return e[0]=r*n[0]+i*n[3]+o*n[6],e[1]=r*n[1]+i*n[4]+o*n[7],e[2]=r*n[2]+i*n[5]+o*n[8],e}function yn(e,t,n){var r=n[0],i=n[1],o=n[2],a=n[3],s=t[0],u=t[1],c=t[2],l=i*c-o*u,f=o*s-r*c,h=r*u-i*s,d=i*h-o*f,p=o*l-r*h,_=r*f-i*l,m=2*a;return l*=m,f*=m,h*=m,d*=2,p*=2,_*=2,e[0]=s+l+d,e[1]=u+f+p,e[2]=c+h+_,e}function xn(e,t,n,r){var i=[],o=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],o[0]=i[0],o[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),o[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function En(e,t,n,r){var i=[],o=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],o[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),o[1]=i[1],o[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function Tn(e,t,n,r){var i=[],o=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],o[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),o[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),o[2]=i[2],e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function wn(e,t){var n=Ht(e[0],e[1],e[2]),r=Ht(t[0],t[1],t[2]);fn(n,n),fn(r,r);var i=hn(n,r);return i>1?0:i<-1?Math.PI:Math.acos(i)}function An(e){return e[0]=0,e[1]=0,e[2]=0,e}function Mn(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"}function On(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}function Rn(e,t){var n=e[0],r=e[1],i=e[2],o=t[0],a=t[1],s=t[2];return Math.abs(n-o)<=d*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-a)<=d*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(i-s)<=d*Math.max(1,Math.abs(i),Math.abs(s))}var Sn,Pn=Kt,Ln=$t,Fn=Zt,In=an,Cn=sn,Nn=Vt,jn=un,Dn=(Sn=Gt(),function(e,t,n,r,i,o){var a,s;for(t||(t=3),n||(n=0),s=r?Math.min(r*t+n,e.length):e.length,a=n;a<s;a+=t)Sn[0]=e[a],Sn[1]=e[a+1],Sn[2]=e[a+2],i(Sn,Sn,o),e[a]=Sn[0],e[a+1]=Sn[1],e[a+2]=Sn[2];return e});function Bn(){var e=new p(4);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function Un(e){var t=new p(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function zn(e,t,n,r){var i=new p(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=r,i}function kn(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Gn(e,t,n,r,i){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e}function qn(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}function Vn(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}function Hn(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}function Wn(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}function Xn(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}function Yn(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}function Kn(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}function $n(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}function Zn(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}function Qn(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}function Jn(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e}function er(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],o=t[3]-e[3];return Math.sqrt(n*n+r*r+i*i+o*o)}function tr(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],o=t[3]-e[3];return n*n+r*r+i*i+o*o}function nr(e){var t=e[0],n=e[1],r=e[2],i=e[3];return Math.sqrt(t*t+n*n+r*r+i*i)}function rr(e){var t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i}function ir(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}function or(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}function ar(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n*n+r*r+i*i+o*o;return a>0&&(a=1/Math.sqrt(a)),e[0]=n*a,e[1]=r*a,e[2]=i*a,e[3]=o*a,e}function sr(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function ur(e,t,n,r){var i=n[0]*r[1]-n[1]*r[0],o=n[0]*r[2]-n[2]*r[0],a=n[0]*r[3]-n[3]*r[0],s=n[1]*r[2]-n[2]*r[1],u=n[1]*r[3]-n[3]*r[1],c=n[2]*r[3]-n[3]*r[2],l=t[0],f=t[1],h=t[2],d=t[3];return e[0]=f*c-h*u+d*s,e[1]=-l*c+h*a-d*o,e[2]=l*u-f*a+d*i,e[3]=-l*s+f*o-h*i,e}function cr(e,t,n,r){var i=t[0],o=t[1],a=t[2],s=t[3];return e[0]=i+r*(n[0]-i),e[1]=o+r*(n[1]-o),e[2]=a+r*(n[2]-a),e[3]=s+r*(n[3]-s),e}function lr(e,t){var n,r,i,o,a,s;t=t||1;do{a=(n=2*_()-1)*n+(r=2*_()-1)*r}while(a>=1);do{s=(i=2*_()-1)*i+(o=2*_()-1)*o}while(s>=1);var u=Math.sqrt((1-a)/s);return e[0]=t*n,e[1]=t*r,e[2]=t*i*u,e[3]=t*o*u,e}function fr(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3];return e[0]=n[0]*r+n[4]*i+n[8]*o+n[12]*a,e[1]=n[1]*r+n[5]*i+n[9]*o+n[13]*a,e[2]=n[2]*r+n[6]*i+n[10]*o+n[14]*a,e[3]=n[3]*r+n[7]*i+n[11]*o+n[15]*a,e}function hr(e,t,n){var r=t[0],i=t[1],o=t[2],a=n[0],s=n[1],u=n[2],c=n[3],l=c*r+s*o-u*i,f=c*i+u*r-a*o,h=c*o+a*i-s*r,d=-a*r-s*i-u*o;return e[0]=l*c+d*-a+f*-u-h*-s,e[1]=f*c+d*-s+h*-a-l*-u,e[2]=h*c+d*-u+l*-s-f*-a,e[3]=t[3],e}function dr(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}function pr(e){return"vec4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function _r(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function mr(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=t[0],s=t[1],u=t[2],c=t[3];return Math.abs(n-a)<=d*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-s)<=d*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-u)<=d*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-c)<=d*Math.max(1,Math.abs(o),Math.abs(c))}var vr=Vn,gr=Hn,br=Wn,yr=er,xr=tr,Er=nr,Tr=rr,wr=function(){var e=Bn();return function(t,n,r,i,o,a){var s,u;for(n||(n=4),r||(r=0),u=i?Math.min(i*n+r,t.length):t.length,s=r;s<u;s+=n)e[0]=t[s],e[1]=t[s+1],e[2]=t[s+2],e[3]=t[s+3],o(e,e,a),t[s]=e[0],t[s+1]=e[1],t[s+2]=e[2],t[s+3]=e[3];return t}}();function Ar(){var e=new p(4);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}function Mr(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function Or(e,t,n){n*=.5;var r=Math.sin(n);return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=Math.cos(n),e}function Rr(e,t){var n=2*Math.acos(t[3]),r=Math.sin(n/2);return r>d?(e[0]=t[0]/r,e[1]=t[1]/r,e[2]=t[2]/r):(e[0]=1,e[1]=0,e[2]=0),n}function Sr(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1],c=n[2],l=n[3];return e[0]=r*l+a*s+i*c-o*u,e[1]=i*l+a*u+o*s-r*c,e[2]=o*l+a*c+r*u-i*s,e[3]=a*l-r*s-i*u-o*c,e}function Pr(e,t,n){n*=.5;var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u+a*s,e[1]=i*u+o*s,e[2]=o*u-i*s,e[3]=a*u-r*s,e}function Lr(e,t,n){n*=.5;var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u-o*s,e[1]=i*u+a*s,e[2]=o*u+r*s,e[3]=a*u-i*s,e}function Fr(e,t,n){n*=.5;var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u+i*s,e[1]=i*u-r*s,e[2]=o*u+a*s,e[3]=a*u-o*s,e}function Ir(e,t){var n=t[0],r=t[1],i=t[2];return e[0]=n,e[1]=r,e[2]=i,e[3]=Math.sqrt(Math.abs(1-n*n-r*r-i*i)),e}function Cr(e,t,n,r){var i,o,a,s,u,c=t[0],l=t[1],f=t[2],h=t[3],p=n[0],_=n[1],m=n[2],v=n[3];return(o=c*p+l*_+f*m+h*v)<0&&(o=-o,p=-p,_=-_,m=-m,v=-v),1-o>d?(i=Math.acos(o),a=Math.sin(i),s=Math.sin((1-r)*i)/a,u=Math.sin(r*i)/a):(s=1-r,u=r),e[0]=s*c+u*p,e[1]=s*l+u*_,e[2]=s*f+u*m,e[3]=s*h+u*v,e}function Nr(e){var t=_(),n=_(),r=_(),i=Math.sqrt(1-t),o=Math.sqrt(t);return e[0]=i*Math.sin(2*Math.PI*n),e[1]=i*Math.cos(2*Math.PI*n),e[2]=o*Math.sin(2*Math.PI*r),e[3]=o*Math.cos(2*Math.PI*r),e}function jr(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n*n+r*r+i*i+o*o,s=a?1/a:0;return e[0]=-n*s,e[1]=-r*s,e[2]=-i*s,e[3]=o*s,e}function Dr(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function Br(e,t){var n,r=t[0]+t[4]+t[8];if(r>0)n=Math.sqrt(r+1),e[3]=.5*n,n=.5/n,e[0]=(t[5]-t[7])*n,e[1]=(t[6]-t[2])*n,e[2]=(t[1]-t[3])*n;else{var i=0;t[4]>t[0]&&(i=1),t[8]>t[3*i+i]&&(i=2);var o=(i+1)%3,a=(i+2)%3;n=Math.sqrt(t[3*i+i]-t[3*o+o]-t[3*a+a]+1),e[i]=.5*n,n=.5/n,e[3]=(t[3*o+a]-t[3*a+o])*n,e[o]=(t[3*o+i]+t[3*i+o])*n,e[a]=(t[3*a+i]+t[3*i+a])*n}return e}function Ur(e,t,n,r){var i=.5*Math.PI/180;t*=i,n*=i,r*=i;var o=Math.sin(t),a=Math.cos(t),s=Math.sin(n),u=Math.cos(n),c=Math.sin(r),l=Math.cos(r);return e[0]=o*u*l-a*s*c,e[1]=a*s*l+o*u*c,e[2]=a*u*c-o*s*l,e[3]=a*u*l+o*s*c,e}function zr(e){return"quat("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}var kr,Gr,qr,Vr,Hr,Wr,Xr=Un,Yr=zn,Kr=kn,$r=Gn,Zr=qn,Qr=Sr,Jr=Qn,ei=sr,ti=cr,ni=nr,ri=ni,ii=rr,oi=ii,ai=ar,si=_r,ui=mr,ci=(kr=Gt(),Gr=Ht(1,0,0),qr=Ht(0,1,0),function(e,t,n){var r=hn(t,n);return r<-.999999?(dn(kr,Gr,t),Nn(kr)<1e-6&&dn(kr,qr,t),fn(kr,kr),Or(e,kr,Math.PI),e):r>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(dn(kr,t,n),e[0]=kr[0],e[1]=kr[1],e[2]=kr[2],e[3]=1+r,ai(e,e))}),li=(Vr=Ar(),Hr=Ar(),function(e,t,n,r,i,o){return Cr(Vr,t,i,o),Cr(Hr,n,r,o),Cr(e,Vr,Hr,2*o*(1-o)),e}),fi=(Wr=ve(),function(e,t,n,r){return Wr[0]=n[0],Wr[3]=n[1],Wr[6]=n[2],Wr[1]=r[0],Wr[4]=r[1],Wr[7]=r[2],Wr[2]=-t[0],Wr[5]=-t[1],Wr[8]=-t[2],ai(e,Br(e,Wr))});function hi(){var e=new p(8);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0),e[3]=1,e}function di(e){var t=new p(8);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}function pi(e,t,n,r,i,o,a,s){var u=new p(8);return u[0]=e,u[1]=t,u[2]=n,u[3]=r,u[4]=i,u[5]=o,u[6]=a,u[7]=s,u}function _i(e,t,n,r,i,o,a){var s=new p(8);s[0]=e,s[1]=t,s[2]=n,s[3]=r;var u=.5*i,c=.5*o,l=.5*a;return s[4]=u*r+c*n-l*t,s[5]=c*r+l*e-u*n,s[6]=l*r+u*t-c*e,s[7]=-u*e-c*t-l*n,s}function mi(e,t,n){var r=.5*n[0],i=.5*n[1],o=.5*n[2],a=t[0],s=t[1],u=t[2],c=t[3];return e[0]=a,e[1]=s,e[2]=u,e[3]=c,e[4]=r*c+i*u-o*s,e[5]=i*c+o*a-r*u,e[6]=o*c+r*s-i*a,e[7]=-r*a-i*s-o*u,e}function vi(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=.5*t[0],e[5]=.5*t[1],e[6]=.5*t[2],e[7]=0,e}function gi(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function bi(e,t){var n=Ar();Et(n,t);var r=new p(3);return yt(r,t),mi(e,n,r),e}function yi(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}function xi(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function Ei(e,t,n,r,i,o,a,s,u){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e[6]=s,e[7]=u,e}var Ti=Kr;function wi(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}var Ai=Kr;function Mi(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}function Oi(e,t){var n=t[4],r=t[5],i=t[6],o=t[7],a=-t[0],s=-t[1],u=-t[2],c=t[3];return e[0]=2*(n*c+o*a+r*u-i*s),e[1]=2*(r*c+o*s+i*a-n*u),e[2]=2*(i*c+o*u+n*s-r*a),e}function Ri(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=.5*n[0],u=.5*n[1],c=.5*n[2],l=t[4],f=t[5],h=t[6],d=t[7];return e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=a*s+i*c-o*u+l,e[5]=a*u+o*s-r*c+f,e[6]=a*c+r*u-i*s+h,e[7]=-r*s-i*u-o*c+d,e}function Si(e,t,n){var r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=s*a+l*r+u*o-c*i,h=u*a+l*i+c*r-s*o,d=c*a+l*o+s*i-u*r,p=l*a-s*r-u*i-c*o;return Pr(e,t,n),r=e[0],i=e[1],o=e[2],a=e[3],e[4]=f*a+p*r+h*o-d*i,e[5]=h*a+p*i+d*r-f*o,e[6]=d*a+p*o+f*i-h*r,e[7]=p*a-f*r-h*i-d*o,e}function Pi(e,t,n){var r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=s*a+l*r+u*o-c*i,h=u*a+l*i+c*r-s*o,d=c*a+l*o+s*i-u*r,p=l*a-s*r-u*i-c*o;return Lr(e,t,n),r=e[0],i=e[1],o=e[2],a=e[3],e[4]=f*a+p*r+h*o-d*i,e[5]=h*a+p*i+d*r-f*o,e[6]=d*a+p*o+f*i-h*r,e[7]=p*a-f*r-h*i-d*o,e}function Li(e,t,n){var r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=s*a+l*r+u*o-c*i,h=u*a+l*i+c*r-s*o,d=c*a+l*o+s*i-u*r,p=l*a-s*r-u*i-c*o;return Fr(e,t,n),r=e[0],i=e[1],o=e[2],a=e[3],e[4]=f*a+p*r+h*o-d*i,e[5]=h*a+p*i+d*r-f*o,e[6]=d*a+p*o+f*i-h*r,e[7]=p*a-f*r-h*i-d*o,e}function Fi(e,t,n){var r=n[0],i=n[1],o=n[2],a=n[3],s=t[0],u=t[1],c=t[2],l=t[3];return e[0]=s*a+l*r+u*o-c*i,e[1]=u*a+l*i+c*r-s*o,e[2]=c*a+l*o+s*i-u*r,e[3]=l*a-s*r-u*i-c*o,s=t[4],u=t[5],c=t[6],l=t[7],e[4]=s*a+l*r+u*o-c*i,e[5]=u*a+l*i+c*r-s*o,e[6]=c*a+l*o+s*i-u*r,e[7]=l*a-s*r-u*i-c*o,e}function Ii(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1],c=n[2],l=n[3];return e[0]=r*l+a*s+i*c-o*u,e[1]=i*l+a*u+o*s-r*c,e[2]=o*l+a*c+r*u-i*s,e[3]=a*l-r*s-i*u-o*c,s=n[4],u=n[5],c=n[6],l=n[7],e[4]=r*l+a*s+i*c-o*u,e[5]=i*l+a*u+o*s-r*c,e[6]=o*l+a*c+r*u-i*s,e[7]=a*l-r*s-i*u-o*c,e}function Ci(e,t,n,r){if(Math.abs(r)<d)return yi(e,t);var i=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);r*=.5;var o=Math.sin(r),a=o*n[0]/i,s=o*n[1]/i,u=o*n[2]/i,c=Math.cos(r),l=t[0],f=t[1],h=t[2],p=t[3];e[0]=l*c+p*a+f*u-h*s,e[1]=f*c+p*s+h*a-l*u,e[2]=h*c+p*u+l*s-f*a,e[3]=p*c-l*a-f*s-h*u;var _=t[4],m=t[5],v=t[6],g=t[7];return e[4]=_*c+g*a+m*u-v*s,e[5]=m*c+g*s+v*a-_*u,e[6]=v*c+g*u+_*s-m*a,e[7]=g*c-_*a-m*s-v*u,e}function Ni(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}function ji(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[4],u=n[5],c=n[6],l=n[7],f=t[4],h=t[5],d=t[6],p=t[7],_=n[0],m=n[1],v=n[2],g=n[3];return e[0]=r*g+a*_+i*v-o*m,e[1]=i*g+a*m+o*_-r*v,e[2]=o*g+a*v+r*m-i*_,e[3]=a*g-r*_-i*m-o*v,e[4]=r*l+a*s+i*c-o*u+f*g+p*_+h*v-d*m,e[5]=i*l+a*u+o*s-r*c+h*g+p*m+d*_-f*v,e[6]=o*l+a*c+r*u-i*s+d*g+p*v+f*m-h*_,e[7]=a*l-r*s-i*u-o*c+p*g-f*_-h*m-d*v,e}var Di=ji;function Bi(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}var Ui=ei;function zi(e,t,n,r){var i=1-r;return Ui(t,n)<0&&(r=-r),e[0]=t[0]*i+n[0]*r,e[1]=t[1]*i+n[1]*r,e[2]=t[2]*i+n[2]*r,e[3]=t[3]*i+n[3]*r,e[4]=t[4]*i+n[4]*r,e[5]=t[5]*i+n[5]*r,e[6]=t[6]*i+n[6]*r,e[7]=t[7]*i+n[7]*r,e}function ki(e,t){var n=Hi(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}function Gi(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}var qi=ni,Vi=qi,Hi=ii,Wi=Hi;function Xi(e,t){var n=Hi(t);if(n>0){n=Math.sqrt(n);var r=t[0]/n,i=t[1]/n,o=t[2]/n,a=t[3]/n,s=t[4],u=t[5],c=t[6],l=t[7],f=r*s+i*u+o*c+a*l;e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=(s-r*f)/n,e[5]=(u-i*f)/n,e[6]=(c-o*f)/n,e[7]=(l-a*f)/n}return e}function Yi(e){return"quat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+")"}function Ki(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}function $i(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],l=t[0],f=t[1],h=t[2],p=t[3],_=t[4],m=t[5],v=t[6],g=t[7];return Math.abs(n-l)<=d*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(r-f)<=d*Math.max(1,Math.abs(r),Math.abs(f))&&Math.abs(i-h)<=d*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(o-p)<=d*Math.max(1,Math.abs(o),Math.abs(p))&&Math.abs(a-_)<=d*Math.max(1,Math.abs(a),Math.abs(_))&&Math.abs(s-m)<=d*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(u-v)<=d*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(c-g)<=d*Math.max(1,Math.abs(c),Math.abs(g))}function Zi(){var e=new p(2);return p!=Float32Array&&(e[0]=0,e[1]=0),e}function Qi(e){var t=new p(2);return t[0]=e[0],t[1]=e[1],t}function Ji(e,t){var n=new p(2);return n[0]=e,n[1]=t,n}function eo(e,t){return e[0]=t[0],e[1]=t[1],e}function to(e,t,n){return e[0]=t,e[1]=n,e}function no(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}function ro(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}function io(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}function oo(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}function ao(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}function so(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}function uo(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}function co(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}function lo(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}function fo(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}function ho(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e}function po(e,t){var n=t[0]-e[0],r=t[1]-e[1];return Math.sqrt(n*n+r*r)}function _o(e,t){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r}function mo(e){var t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}function vo(e){var t=e[0],n=e[1];return t*t+n*n}function go(e,t){return e[0]=-t[0],e[1]=-t[1],e}function bo(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}function yo(e,t){var n=t[0],r=t[1],i=n*n+r*r;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e}function xo(e,t){return e[0]*t[0]+e[1]*t[1]}function Eo(e,t,n){var r=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=r,e}function To(e,t,n,r){var i=t[0],o=t[1];return e[0]=i+r*(n[0]-i),e[1]=o+r*(n[1]-o),e}function wo(e,t){t=t||1;var n=2*_()*Math.PI;return e[0]=Math.cos(n)*t,e[1]=Math.sin(n)*t,e}function Ao(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i,e[1]=n[1]*r+n[3]*i,e}function Mo(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i+n[4],e[1]=n[1]*r+n[3]*i+n[5],e}function Oo(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[3]*i+n[6],e[1]=n[1]*r+n[4]*i+n[7],e}function Ro(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[4]*i+n[12],e[1]=n[1]*r+n[5]*i+n[13],e}function So(e,t,n,r){var i=t[0]-n[0],o=t[1]-n[1],a=Math.sin(r),s=Math.cos(r);return e[0]=i*s-o*a+n[0],e[1]=i*a+o*s+n[1],e}function Po(e,t){var n=e[0],r=e[1],i=t[0],o=t[1],a=n*n+r*r;a>0&&(a=1/Math.sqrt(a));var s=i*i+o*o;s>0&&(s=1/Math.sqrt(s));var u=(n*i+r*o)*a*s;return u>1?0:u<-1?Math.PI:Math.acos(u)}function Lo(e){return e[0]=0,e[1]=0,e}function Fo(e){return"vec2("+e[0]+", "+e[1]+")"}function Io(e,t){return e[0]===t[0]&&e[1]===t[1]}function Co(e,t){var n=e[0],r=e[1],i=t[0],o=t[1];return Math.abs(n-i)<=d*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-o)<=d*Math.max(1,Math.abs(r),Math.abs(o))}var No=mo,jo=ro,Do=io,Bo=oo,Uo=po,zo=_o,ko=vo,Go=function(){var e=Zi();return function(t,n,r,i,o,a){var s,u;for(n||(n=2),r||(r=0),u=i?Math.min(i*n+r,t.length):t.length,s=r;s<u;s+=n)e[0]=t[s],e[1]=t[s+1],o(e,e,a),t[s]=e[0],t[s+1]=e[1];return t}}();n.d(t,"glMatrix",(function(){return r})),n.d(t,"mat2",(function(){return i})),n.d(t,"mat2d",(function(){return o})),n.d(t,"mat3",(function(){return a})),n.d(t,"mat4",(function(){return s})),n.d(t,"quat",(function(){return l})),n.d(t,"quat2",(function(){return f})),n.d(t,"vec2",(function(){return h})),n.d(t,"vec3",(function(){return u})),n.d(t,"vec4",(function(){return c}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(){var t=this;this._initialized=!1,this.assertInitialized=function(){return e.assertInitializedFalse(t)},this.assertUninitialized=function(){}}return e.initialize=function(){return function(t,n,i){var o=i.value;return i.value=function(){var t=this;return r.assert(!1===this._initialized,"re-initialization of initialized object not anticipated"),this._initialized=o.apply(this,arguments),this._initialized?(this.assertInitialized=function(){},this.assertUninitialized=function(){return e.assertUninitializedFalse(t)}):(this.assertUninitialized=function(){},this.assertInitialized=function(){return e.assertInitializedFalse(t)}),this._initialized},i}},e.uninitialize=function(){return function(t,n,i){var o=i.value;return i.value=function(){var t=this;r.assert(!0===this._initialized,"expected object to be initialized in order to uninitialize"),o.apply(this),this._initialized=!1,this.assertUninitialized=function(){},this.assertInitialized=function(){return e.assertInitializedFalse(t)}},i}},e.assert_initialized=function(){return function(e,t,n){var r=n.value;return n.value=function(){return this.assertInitialized(),r.apply(this,arguments)},n}},e.assert_uninitialized=function(){return function(e,t,n){var r=n.value;return n.value=function(){this.assertUninitialized(),r.apply(this,arguments)},n}},Object.defineProperty(e.prototype,"initialized",{get:function(){return this._initialized},enumerable:!0,configurable:!0}),e.assertInitializedFalse=function(e){return r.assert(!1,"instance of "+e.constructor.name+" expected to be initialized")},e.assertUninitializedFalse=function(e){return r.assert(!1,"instance of "+e.constructor.name+" not expected to be initialized")},e}();t.Initializable=i},function(e,t,n){"use strict";var r,i=n(1);!function(e){function t(e){return e>0?e-Math.floor(e):e-Math.ceil(e)}e.sign=function(e){return e>0?1:e<0?-1:0},e.clamp=function(e,t,n){return Math.max(t,Math.min(n,e))},e.fract=t,e.v2=function(){return i.vec2.create()},e.clamp2=function(e,t,n,r){return e[0]=Math.max(n[0],Math.min(r[0],t[0])),e[1]=Math.max(n[1],Math.min(r[1],t[1])),e},e.abs2=function(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e},e.v3=function(){return i.vec3.create()},e.clamp3=function(e,t,n,r){return e[0]=Math.max(n[0],Math.min(r[0],t[0])),e[1]=Math.max(n[1],Math.min(r[1],t[1])),e[2]=Math.max(n[2],Math.min(r[2],t[2])),e},e.abs3=function(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e},e.encode_float24x1_to_uint8x3=function(e,n){return e[0]=Math.floor(256*n),e[1]=Math.floor(256*t(256*n)),e[2]=Math.floor(256*t(65536*n)),e},e.decode_float24x1_from_uint8x3=function(e){return(e[0]+(e[1]+e[2]*(1/256))*(1/256))*(1/256)},e.encode_uint24_to_rgb8=function(e,t){return e[0]=t>>0&255,e[1]=t>>8&255,e[2]=t>>16&255,e},e.encode_uint32_to_rgba8=function(e,t){return e[0]=t>>0&255,e[1]=t>>8&255,e[2]=t>>16&255,e[3]=t>>24&255,e},e.decode_uint24_from_rgb8=function(e){return e[0]+(e[1]<<8)+(e[2]<<16)},e.decode_uint32_from_rgba8=function(e){return e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]<<24)},e.fromVec4=function(e){return 0===e[3]?i.vec3.fromValues(e[0],e[1],e[2]):i.vec3.fromValues(e[0]/e[3],e[1]/e[3],e[2]/e[3])},e.v4=function(){return i.vec4.create()},e.clamp4=function(e,t,n,r){return e[0]=Math.max(n[0],Math.min(r[0],t[0])),e[1]=Math.max(n[1],Math.min(r[1],t[1])),e[2]=Math.max(n[2],Math.min(r[2],t[2])),e[3]=Math.max(n[3],Math.min(r[3],t[3])),e},e.abs4=function(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e[3]=Math.abs(t[3]),e},e.fromVec3=function(e){return i.vec4.fromValues(e[0],e[1],e[2],1)},e.parseVec2=function(e){if(void 0!==e&&""!==e){var t=[];try{t=JSON.parse("["+e+"]")}catch(e){return}return 2!==t.length||isNaN(t[0])||isNaN(t[1])?void 0:i.vec2.clone(t)}},e.parseVec3=function(e){if(void 0!==e&&""!==e){var t=[];try{t=JSON.parse("["+e+"]")}catch(e){return}return 3!==t.length||isNaN(t[0])||isNaN(t[1])||isNaN(t[2])?void 0:i.vec3.clone(t)}},e.parseVec4=function(e){if(void 0!==e&&""!==e){var t=[];try{t=JSON.parse("["+e+"]")}catch(e){return}return 4!==t.length||isNaN(t[0])||isNaN(t[1])||isNaN(t[2])||isNaN(t[3])?void 0:i.vec4.clone(t)}},e.mix=function(e,t,n){return e*(1-n)+t*n},e.m2=function(){return i.mat2.create()},e.m3=function(){return i.mat3.create()},e.m4=function(){return i.mat4.create()}}(r||(r={})),e.exports=r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(22),u=n(2),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._width=0,t._height=0,t._internalFormat=0,t._format=0,t._type=0,t._mipmap=!1,t._anisotropy=void 0,t}return i(t,e),t.prototype.create=function(e,n,r,i,o){a.assert(e>0&&n>0,"texture requires valid width and height of greater than zero");var s=this._context.gl,u=this._context.gl2facade;if(this._object=s.createTexture(),this._width=e,this._height=n,this._internalFormat=r,this._format=i,this._type=o,s.bindTexture(s.TEXTURE_2D,this._object),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MAG_FILTER,s.NEAREST),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MIN_FILTER,s.NEAREST),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_WRAP_S,s.CLAMP_TO_EDGE),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_WRAP_T,s.CLAMP_TO_EDGE),void 0===t.MAX_ANISOTROPY){var c=this._context.textureFilterAnisotropic;t.MAX_ANISOTROPY=s.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}return u.texImage2D(s.TEXTURE_2D,0,this._internalFormat,this._width,this._height,0,this._format,this._type),s.bindTexture(s.TEXTURE_2D,t.DEFAULT_TEXTURE),this._valid=s.isTexture(this._object),this.reallocate(),this._object},t.prototype.delete=function(){a.assert(this._object instanceof WebGLTexture,"expected WebGLTexture object"),this._context.gl.deleteTexture(this._object),this._object=void 0,this._valid=!1,this._internalFormat=0,this._format=0,this._type=0,this._width=0,this._height=0},t.prototype.reallocate=function(){var e=this.context.gl,t=this._context.gl2facade,n=this._width*this._height*s.byteSizeOfFormat(this.context,this._internalFormat);this._type===t.HALF_FLOAT&&this._internalFormat!==e.RGBA16F?n*=2:this._type===e.FLOAT&&this._internalFormat!==e.RGBA16F&&(n*=4),this.context.allocationRegister.reallocate(this._identifier,n)},t.prototype.bind=function(e){var t=this.context.gl;e&&t.activeTexture(e),t.bindTexture(t.TEXTURE_2D,this._object)},t.prototype.unbind=function(e){var n=this.context.gl;e&&n.activeTexture(e),n.bindTexture(n.TEXTURE_2D,t.DEFAULT_TEXTURE)},t.prototype.fetch=function(e,t,n){var r=this;void 0===t&&(t=!1),void 0===n&&(n=!1);var i=this.context.gl;return new Promise((function(o,s){var u=new Image;u.onerror=function(){a.log(a.LogLevel.Error,"loading image from '"+u.src+"' failed"),s()},u.onload=function(){r.resize(u.width,u.height),n||i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,!0),r.data(u),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,!1),o()},t&&(u.crossOrigin="anonymous"),u.src=e}))},t.prototype.data=function(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!0);var r=this.context.gl,i=this._context.gl2facade;t&&this.bind(),i.texImage2D(r.TEXTURE_2D,0,this._internalFormat,this._width,this._height,0,this._format,this._type,e),void 0!==this._anisotropy&&this._anisotropy>0?this.maxAnisotropy(this._anisotropy,!1,!1):this._mipmap&&this.generateMipMap(!1,!1),n&&this.unbind(),this.reallocate()},t.prototype.filter=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl;n&&this.bind(),a.logIf(e===i.LINEAR_MIPMAP_LINEAR||e===i.LINEAR_MIPMAP_NEAREST,a.LogLevel.Debug,"magnification does not utilize a MipMap (refer to LINEAR and NEAREST only)"),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,e),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,t),this._mipmap=t===i.LINEAR_MIPMAP_LINEAR||t===i.LINEAR_MIPMAP_NEAREST,this._mipmap&&i.generateMipmap(i.TEXTURE_2D),r&&this.unbind()},t.prototype.wrap=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl;n&&this.bind(),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,e),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,t),r&&this.unbind()},t.prototype.reformat=function(e,t,n,r,i){void 0===r&&(r=!0),void 0===i&&(i=!0),(e!==this._internalFormat||void 0!==t&&t!==this._format||void 0!==n&&n!==this._type)&&(a.assert(void 0!==e,"valid internal format expected"),this._internalFormat=e,t&&(this._format=t),n&&(this._type=n),this.data(void 0,r,i))},t.prototype.resize=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0),e===this._width&&t===this._height||(this._width=e,this._height=t,this.data(void 0,n,r))},t.prototype.generateMipMap=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var n=this.context.gl;e&&this.bind(),n.generateMipmap(n.TEXTURE_2D),t&&this.unbind(),this._mipmap=!0},t.prototype.maxAnisotropy=function(e,n,r){if(void 0===n&&(n=!0),void 0===r&&(r=!0),!1!==this._context.supportsTextureFilterAnisotropic){var i=this.context.gl,o=this._context.textureFilterAnisotropic;return this._anisotropy=void 0===e?void 0:Math.max(0,Math.min(t.MAX_ANISOTROPY,e)),a.logIf(e!==this._anisotropy,a.LogLevel.Debug,"value clamped to max supported anisotropy of "+t.MAX_ANISOTROPY+", given "+e),n&&this.bind(),i.texParameterf(i.TEXTURE_2D,o.TEXTURE_MAX_ANISOTROPY_EXT,void 0===this._anisotropy?0:this._anisotropy),this.generateMipMap(!1,r),this._anisotropy}a.log(a.LogLevel.Debug,"setting anisotropy not supported (EXT_texture_filter_anisotropic missing)")},Object.defineProperty(t.prototype,"bytes",{get:function(){return this.assertInitialized(),this.context.allocationRegister.allocated(this._identifier)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"internalFormat",{get:function(){return this.assertInitialized(),this._internalFormat},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"format",{get:function(){return this.assertInitialized(),this._format},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this.assertInitialized(),this._type},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.assertInitialized(),this._width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.assertInitialized(),this._height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.assertInitialized(),[this._width,this._height]},enumerable:!0,configurable:!0}),t.DEFAULT_TEXTURE=void 0,t.MAX_ANISOTROPY=void 0,o([u.Initializable.assert_initialized()],t.prototype,"bind",null),o([u.Initializable.assert_initialized()],t.prototype,"unbind",null),o([u.Initializable.assert_initialized()],t.prototype,"fetch",null),o([u.Initializable.assert_initialized()],t.prototype,"data",null),o([u.Initializable.assert_initialized()],t.prototype,"filter",null),o([u.Initializable.assert_initialized()],t.prototype,"wrap",null),o([u.Initializable.assert_initialized()],t.prototype,"reformat",null),o([u.Initializable.assert_initialized()],t.prototype,"resize",null),t}(n(6).AbstractObject);t.Texture2D=c},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(2),u=function(e){function t(){var n=null!==e&&e.apply(this,arguments)||this;return n._target=t.DEFAULT_BUFFER,n}return i(t,e),t.prototype.create=function(e){var t=this._context.gl;return this._object=t.createBuffer(),this._valid=this._object instanceof WebGLBuffer,this._valid&&(a.assert(e===t.ARRAY_BUFFER||e===t.ELEMENT_ARRAY_BUFFER,"either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER expected as buffer target"),this._target=e),this._object},t.prototype.delete=function(){a.assert(this._object instanceof WebGLBuffer,"expected WebGLBuffer object"),this._context.gl.deleteBuffer(this._object),this._object=void 0,this._valid=!1,this._target=t.DEFAULT_BUFFER},t.prototype.bind=function(){a.assert(this._target===this._context.gl.ARRAY_BUFFER||this._target===this._context.gl.ELEMENT_ARRAY_BUFFER,"expected either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER as buffer target"),this._context.gl.bindBuffer(this._target,this._object)},t.prototype.unbind=function(){this.context.gl.bindBuffer(this._target,t.DEFAULT_BUFFER)},t.prototype.data=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl;n&&this.bind(),i.bufferData(this._target,e,t),r&&this.unbind(),this._valid=i.isBuffer(this._object)&&i.getError()===i.NO_ERROR;var o="number"==typeof e?e:e.byteLength,a=this._valid?o:0;this.context.allocationRegister.reallocate(this._identifier,a)},t.prototype.subData=function(e,t,n,r,i,o){void 0===n&&(n=0),void 0===r&&(r=0),void 0===i&&(i=!0),void 0===o&&(o=!0);var a=this.context.gl;i&&this.bind(),this.context.gl2facade.bufferSubData(this._target,e,t,n,r),o&&this.unbind(),this._valid=a.getError()===a.NO_ERROR},t.prototype.attribEnable=function(e,t,n,r,i,o,a,s){void 0===r&&(r=!1),void 0===i&&(i=0),void 0===o&&(o=0),void 0===a&&(a=!0),void 0===s&&(s=!0);var u=this.context.gl;a&&this.bind(),u.vertexAttribPointer(e,t,n,r,i,o),u.enableVertexAttribArray(e),s&&this.unbind()},t.prototype.attribDisable=function(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!0);var r=this.context.gl;t&&this.bind(),r.disableVertexAttribArray(e),n&&this.unbind()},Object.defineProperty(t.prototype,"bytes",{get:function(){return this.assertInitialized(),this.context.allocationRegister.allocated(this._identifier)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"target",{get:function(){return this.assertInitialized(),this._target},enumerable:!0,configurable:!0}),t.DEFAULT_BUFFER=void 0,o([s.Initializable.assert_initialized()],t.prototype,"bind",null),o([s.Initializable.assert_initialized()],t.prototype,"unbind",null),o([s.Initializable.assert_initialized()],t.prototype,"data",null),o([s.Initializable.assert_initialized()],t.prototype,"attribEnable",null),o([s.Initializable.assert_initialized()],t.prototype,"attribDisable",null),t}(n(6).AbstractObject);t.Buffer=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(2),u=function(e){function t(t,n){var r=e.call(this)||this;return r._valid=!1,r._referenceCount=0,r._context=t,r._identifier=void 0!==n&&""!==n?n:"Object",r}return i(t,e),t.prototype.initialize=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this._identifier=this._context.allocationRegister.createUniqueIdentifier(this._identifier),this.create.apply(this,e),this._valid||(this._context.allocationRegister.deleteUniqueIdentifier(this._identifier),a.log(a.LogLevel.Error,"initialization of '"+this._identifier+"' failed")),this._valid},t.prototype.uninitialize=function(){this._context.allocationRegister.reallocate(this._identifier,0),this._context.allocationRegister.deleteUniqueIdentifier(this._identifier),this.delete(),a.assert(void 0===this._object,"expected object '"+this._identifier+"' to be undefined after delete"),a.assert(!1===this._valid,"expected object '"+this._identifier+"' to be invalid after delete")},Object.defineProperty(t.prototype,"context",{get:function(){return this._context},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"identifier",{get:function(){return this._identifier},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"object",{get:function(){return a.assert(void 0!==this._object,"access to undefined object"),this._object},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valid",{get:function(){return this._valid},enumerable:!0,configurable:!0}),t.prototype.ref=function(){a.assert(this.initialized,"expected object to be initialized in order to be referenced"),++this._referenceCount},t.prototype.unref=function(){a.assert(this._referenceCount>0,"expected object to be referenced in order to decrease its reference count"),--this._referenceCount},o([s.Initializable.initialize()],t.prototype,"initialize",null),o([s.Initializable.uninitialize()],t.prototype,"uninitialize",null),t}(s.Initializable);t.AbstractObject=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=n(42),u=function(e){function t(t,n){var r=e.call(this)||this;return r._buffers=new Array,n=void 0!==n&&""!==n?n:r.constructor.name,r._vertexArray=new s.VertexArray(t,n+"VAO"),r}return i(t,e),t.prototype.initialize=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=t[0],i=t[1],o=!0,a=0;a<this._buffers.length;++a)o=this._buffers[a].initialize(r[a])&&o;return this._vertexArray.initialize((function(){return e.bindBuffers(i)}),(function(){return e.unbindBuffers(i)})),this._vertexArray.valid&&o},t.prototype.uninitialize=function(){this._vertexArray.uninitialize(),this._buffers.forEach((function(e){return e.uninitialize()}))},t.prototype.bind=function(){this._vertexArray.bind()},t.prototype.unbind=function(){this._vertexArray.unbind()},Object.defineProperty(t.prototype,"buffers",{get:function(){return this._buffers},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this._vertexArray.context},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"vertexArray",{get:function(){return this._vertexArray},enumerable:!0,configurable:!0}),o([a.Initializable.initialize()],t.prototype,"initialize",null),o([a.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([a.Initializable.assert_initialized()],t.prototype,"bind",null),o([a.Initializable.assert_initialized()],t.prototype,"unbind",null),t}(a.Initializable);t.Geometry=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(2),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._shaders=new Array,t._linked=!1,t}return i(t,e),t.prototype.create=function(e,t){void 0===e&&(e=new Array),void 0===t&&(t=!0);for(var n=this._context.gl,r=0,i=0,o=0,s=e;o<s.length;o++)switch(s[o].type){case n.VERTEX_SHADER:++r;break;case n.FRAGMENT_SHADER:++i;break;default:a.assert(!1,"Unknown shader type detected.")}if(a.logIf(r<1,a.LogLevel.Error,"at least one vertex shader is expected"),a.logIf(i<1,a.LogLevel.Error,"at least one fragment shader is expected"),!(r<1||i<1))return this._object=n.createProgram(),this._valid=n.isProgram(this._object),a.assert(this._object instanceof WebGLProgram,"expected WebGLProgram object to be created"),e.length>0&&this.attach(e,t),this._object},t.prototype.delete=function(){a.assert(void 0!==this._object,"expected WebGLProgram object"),this._context.gl.deleteProgram(this._object),this._object=void 0,this._valid=!1},t.prototype.attach=function(e,t){void 0===t&&(t=!1),a.assert(void 0!==this._object,"expected a WebGLProgram object");for(var n=this._context.gl,r=0,i=e instanceof Array?e:[e];r<i.length;r++){var o=i[r];this._shaders.indexOf(o)>-1||(this._shaders.push(o),o.initialized?(n.attachShader(this._object,o.object),o.ref()):a.log(a.LogLevel.Error,"shader '"+o.identifier+"' not initialized."))}return t&&this.link(),!0},t.prototype.detach=function(e){a.assert(void 0!==this._object,"expected WebGLProgram object");for(var t=this._context.gl,n=0,r=e instanceof Array?e:[e];n<r.length;n++){var i=r[n],o=this._shaders.indexOf(i);o>-1&&this._shaders.splice(o),a.assert(i.initialized,"expected shader '"+i.identifier+"' to be initialized"),t.detachShader(this._object,i.object),i.unref()}},t.prototype.link=function(){a.assert(void 0!==this._object,"expected WebGLProgram object");var e=this._context.gl;if(e.linkProgram(this._object),e.getProgramParameter(this._object,e.LINK_STATUS))this._linked=!0;else{var t=e.getProgramInfoLog(this._object);a.log(a.LogLevel.Error,"linking of program '"+this._identifier+"' failed: '"+t+"'"),this._linked=!1}return this._linked},t.prototype.bind=function(){this._context.gl.useProgram(this._object)},t.prototype.unbind=function(){this._context.gl.useProgram(t.DEFAULT_PROGRAM)},t.prototype.uniform=function(e){return this._context.gl.getUniformLocation(this._object,e)},t.prototype.attribute=function(e,t){return void 0!==t?(a.logIf(this._linked,a.LogLevel.Debug,"name-to-generic attribute index mapping does go into effect on next linking, given "+e+" -> "+t+" ("+this.identifier+")"),this._context.gl.bindAttribLocation(this._object,t,e),t):this._context.gl.getAttribLocation(this._object,e)},Object.defineProperty(t.prototype,"shaders",{get:function(){return this._shaders},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"linked",{get:function(){return this._linked},enumerable:!0,configurable:!0}),t.DEFAULT_PROGRAM=void 0,o([s.Initializable.assert_initialized()],t.prototype,"bind",null),o([s.Initializable.assert_initialized()],t.prototype,"unbind",null),o([s.Initializable.assert_initialized()],t.prototype,"uniform",null),o([s.Initializable.assert_initialized()],t.prototype,"attribute",null),t}(n(6).AbstractObject);t.Program=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(e){function t(t,n,r){var i=e.call(this,t,r)||this;i._compiled=!1;var a=t.gl;if(void 0===r)switch(n){case t.gl.FRAGMENT_SHADER:r="FragmentShader";break;case t.gl.VERTEX_SHADER:r="VertexShader";break;default:o.assert(!1,"expected either a FRAGMENT_SHADER ("+a.FRAGMENT_SHADER+") or a VERTEX_SHADER ("+a.VERTEX_SHADER+"), given "+n)}return i._type=n,i}return i(t,e),t.prototype.create=function(e,t){void 0===t&&(t=!0);var n=this._context.gl;return this._object=n.createShader(this._type),this._valid=n.isShader(this._object),this._compiled=!1,o.assert(this._object instanceof WebGLShader,"expected WebGLShader object to be created"),e&&(this.source=e),e&&t&&this.compile(),this._object},t.prototype.delete=function(){o.assert(void 0!==this._object,"expected WebGLShader object"),this._context.gl.deleteShader(this._object),this._object=void 0,this._valid=!1,this._compiled=!1},t.prototype.compile=function(){var e=this._context.gl,t=this.sourceWithReplacements;if(this._context.isWebGL2&&(t="#version 300 es\n"+t),e.shaderSource(this._object,t),e.compileShader(this._object),this._compiled=e.getShaderParameter(this._object,e.COMPILE_STATUS),!this._compiled){var n=e.getShaderInfoLog(this._object);o.log(o.LogLevel.Error,"compilation of shader '"+this._identifier+"' failed: "+n)}},t.prototype.replace=function(e,t){void 0===this._replacements&&(this._replacements=new Map),this._replacements.set(e,t)},Object.defineProperty(t.prototype,"type",{get:function(){return this.assertInitialized(),this._type},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"source",{get:function(){return this.assertInitialized(),this._source},set:function(e){this._source!==e&&(this._source=e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"sourceWithReplacements",{get:function(){if(void 0===this._replacements)return this._source;var e=this._source;return this._replacements.forEach((function(t,n){var r=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");e=e.replace(new RegExp(r,"g"),t)})),e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"compiled",{get:function(){return this.assertInitialized(),this._compiled},enumerable:!0,configurable:!0}),t}(n(6).AbstractObject);t.Shader=a},function(e,t){e.exports=n(9)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(){}return e.queryInternalTextureFormat=function(t,n,i){var o=t.gl,a=t.gl2facade,s=t.isWebGL1&&t.supportsTextureFloat||t.isWebGL2&&t.supportsColorBufferFloat,u=t.isWebGL1&&t.supportsTextureHalfFloat||t.isWebGL2&&t.supportsColorBufferFloat;void 0===i&&(i=e.Precision.auto);var c,l,f=void 0===i?e.Precision.auto:i;if(i in e.Precision||(r.log(r.LogLevel.Warning,"unknown precision '"+f+"' changed to '"+e.Precision.auto+"'"),i=e.Precision.auto),i===e.Precision.auto&&(f=s?e.Precision.float:u?e.Precision.half:e.Precision.byte),f===e.Precision.half&&u?(t.isWebGL2?t.colorBufferFloat:t.textureHalfFloat,c=a.HALF_FLOAT,l=1):f!==e.Precision.float&&f!==e.Precision.half||!s?(c=o.UNSIGNED_BYTE,l=2):(t.isWebGL2?t.colorBufferFloat:t.textureFloat,c=o.FLOAT,l=0),t.isWebGL1)return r.assert([o.RGB,o.RGBA].includes(n),"target must be gl.RGB or gl.RGBA in WebGL 1"),[n,c,f];switch(n){case o.RGBA:return[[o.RGBA32F,o.RGBA16F,o.RGBA8][l],c,f];case o.RGB:return[[o.RGB32F,o.RGB16F,o.RGB8][l],c,f];case o.RG:return[[o.RG32F,o.RG16F,o.RG8][l],c,f];case o.RED:return[[o.R32F,o.R16F,o.R8][l],c,f];default:r.assert(!1,"internal format querying is not yet supported for formats other than RGBA, RGB")}return[o.NONE,o.NONE,f]},e}();t.Wizard=i,function(e){!function(e){e.float="float",e.half="half",e.byte="byte",e.auto="auto"}(e.Precision||(e.Precision={}))}(i=t.Wizard||(t.Wizard={})),t.Wizard=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(){}return e.alter=function(t,n){r.assert(n.hasOwnProperty("any"),"expected alterable object to provide 'any' key"),n.any=!0;var i=t.split("."),o=i.shift();if(r.assert(""===o||n.hasOwnProperty(o),"expected object to have key '"+o+"' in order to capture alterations"),""===o||"object"==typeof n[o])if(""!==o&&i.length>0)e.alter(i.join("."),n[o]);else for(var a=""!==o?n[o]:n,s=0,u=Object.getOwnPropertyNames(a);s<u.length;s++){var c=u[s];"any"!==c&&e.alter(c,a)}else n[o]=!0},e.reset=function(t){for(var n=0,r=Object.getOwnPropertyNames(t);n<r.length;n++){var i=r[n];"object"!=typeof t[i]?t[i]=!1:e.reset(t[i])}},e.prototype.alter=function(t){return e.alter(t,this)},e.prototype.reset=function(){return e.reset(this)},e}();t.ChangeLookup=i},function(e,t,n){"use strict";var r=n(33),i=t.ValidationError=function(e,t,n,r,i,o){r&&(this.property=r),e&&(this.message=e),n&&(n.id?this.schema=n.id:this.schema=n),void 0!==t&&(this.instance=t),this.name=i,this.argument=o,this.stack=this.toString()};i.prototype.toString=function(){return this.property+" "+this.message};var o=t.ValidatorResult=function(e,t,n,r){this.instance=e,this.schema=t,this.propertyPath=r.propertyPath,this.errors=[],this.throwError=n&&n.throwError,this.disableFormat=n&&!0===n.disableFormat};function a(e,t){return t+": "+e.toString()+"\n"}o.prototype.addError=function(e){var t;if("string"==typeof e)t=new i(e,this.instance,this.schema,this.propertyPath);else{if(!e)throw new Error("Missing error detail");if(!e.message)throw new Error("Missing error message");if(!e.name)throw new Error("Missing validator type");t=new i(e.message,this.instance,this.schema,this.propertyPath,e.name,e.argument)}if(this.throwError)throw t;return this.errors.push(t),t},o.prototype.importErrors=function(e){"string"==typeof e||e&&e.validatorType?this.addError(e):e&&e.errors&&Array.prototype.push.apply(this.errors,e.errors)},o.prototype.toString=function(e){return this.errors.map(a).join("")},Object.defineProperty(o.prototype,"valid",{get:function(){return!this.errors.length}});var s=t.SchemaError=function e(t,n){this.message=t,this.schema=n,Error.call(this,t),Error.captureStackTrace(this,e)};s.prototype=Object.create(Error.prototype,{constructor:{value:s,enumerable:!1},name:{value:"SchemaError",enumerable:!1}});var u=t.SchemaContext=function(e,t,n,r,i){this.schema=e,this.options=t,this.propertyPath=n,this.base=r,this.schemas=i};u.prototype.resolve=function(e){return r.resolve(this.base,e)},u.prototype.makeChild=function(e,t){var n=void 0===t?this.propertyPath:this.propertyPath+l(t),i=r.resolve(this.base,e.id||""),o=new u(e,this.options,n,i,Object.create(this.schemas));return e.id&&!o.schemas[i]&&(o.schemas[i]=e),o};var c=t.FORMAT_REGEXPS={"date-time":/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,date:/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,time:/^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,email:/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,"ip-address":/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,ipv6:/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,uri:/^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,color:/^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,hostname:/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,"host-name":/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,alpha:/^[a-zA-Z]+$/,alphanumeric:/^[a-zA-Z0-9]+$/,"utc-millisec":function(e){return"string"==typeof e&&parseFloat(e)===parseInt(e,10)&&!isNaN(e)},regex:function(e){var t=!0;try{new RegExp(e)}catch(e){t=!1}return t},style:/\s*(.+?):\s*([^;]+);?/,phone:/^\+(?:[0-9] ?){6,14}[0-9]$/};c.regexp=c.regex,c.pattern=c.regex,c.ipv4=c["ip-address"],t.isFormat=function(e,t,n){if("string"==typeof e&&void 0!==c[t]){if(c[t]instanceof RegExp)return c[t].test(e);if("function"==typeof c[t])return c[t](e)}else if(n&&n.customFormats&&"function"==typeof n.customFormats[t])return n.customFormats[t](e);return!0};var l=t.makeSuffix=function(e){return(e=e.toString()).match(/[.\s\[\]]/)||e.match(/^[\d]/)?e.match(/^\d+$/)?"["+e+"]":"["+JSON.stringify(e)+"]":"."+e};function f(e,t,n,r){"object"==typeof n?t[r]=p(e[r],n):-1===e.indexOf(n)&&t.push(n)}function h(e,t,n){t[n]=e[n]}function d(e,t,n,r){"object"==typeof t[r]&&t[r]&&e[r]?n[r]=p(e[r],t[r]):n[r]=t[r]}function p(e,t){var n=Array.isArray(t),r=n&&[]||{};return n?(e=e||[],r=r.concat(e),t.forEach(f.bind(null,e,r))):(e&&"object"==typeof e&&Object.keys(e).forEach(h.bind(null,e,r)),Object.keys(t).forEach(d.bind(null,e,t,r))),r}function _(e){return"/"+encodeURIComponent(e).replace(/~/g,"%7E")}t.deepCompareStrict=function e(t,n){if(typeof t!=typeof n)return!1;if(Array.isArray(t))return!!Array.isArray(n)&&t.length===n.length&&t.every((function(r,i){return e(t[i],n[i])}));if("object"==typeof t){if(!t||!n)return t===n;var r=Object.keys(t),i=Object.keys(n);return r.length===i.length&&r.every((function(r){return e(t[r],n[r])}))}return t===n},e.exports.deepMerge=p,t.objectGetPath=function(e,t){for(var n,r=t.split("/").slice(1);"string"==typeof(n=r.shift());){var i=decodeURIComponent(n.replace(/~0/,"~").replace(/~1/g,"/"));if(!(i in e))return;e=e[i]}return e},t.encodePath=function(e){return e.map(_).join("")},t.getDecimalPlaces=function(e){var t=0;if(isNaN(e))return t;"number"!=typeof e&&(e=Number(e));var n=e.toString().split("e");if(2===n.length){if("-"!==n[1][0])return t;t=Number(n[1].slice(1))}var r=n[0].split(".");return 2===r.length&&(t+=r[1].length),t}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(2),u=n(6),c=n(21),l=n(4),f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._buffersByAttachment=new Map,t._texturesByAttachment=new Map,t._colorClearQueue=new Array,t._drawBuffers=new Array,t._drawBuffersChanged=!1,t}return i(t,e),t.statusString=function(e,t){var n=e.gl;switch(t){case n.FRAMEBUFFER_COMPLETE:return"the framebuffer is ready to display (COMPLETE)";case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"the attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete (INCOMPLETE_ATTACHMENT)";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"there is no attachment (INCOMPLETE_MISSING_ATTACHMENT)";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"height and width of the attachment are not the same (INCOMPLETE_DIMENSIONS)";case n.FRAMEBUFFER_UNSUPPORTED:return"the format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer (UNSUPPORTED)";case n.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:return"the values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures (INCOMPLETE_MULTISAMPLE)";default:return a.assert(!1,"expected known framebuffer status, given "+t),""}},t.prototype.create=function(e){var n=this._context.gl,r=this.context.gl2facade;this._object=n.createFramebuffer(),this._clearColors=new Array(r.COLOR_ATTACHMENT_MAX-r.COLOR_ATTACHMENT0),this._clearDepth=1,this._clearStencil=0,this.clear=this.context.isWebGL1?this.es2Clear:this.es3Clear;for(var i=0,o=e;i<o.length;i++){var s=o[i],u=s[0],f=s[1];if(f instanceof c.Renderbuffer?this._buffersByAttachment.set(u,f):f instanceof l.Texture2D&&this._texturesByAttachment.set(u,f),!(u<r.COLOR_ATTACHMENT_MIN||u>r.COLOR_ATTACHMENT_MAX)){this._drawBuffers.push(u);var h=u-n.COLOR_ATTACHMENT0;this._colorClearQueue.push(h),this._clearColors[h]=[0,0,0,0]}}this._drawBuffersChanged=!0,n.bindFramebuffer(n.FRAMEBUFFER,this._object),this._buffersByAttachment.forEach((function(e,t){n.framebufferRenderbuffer(n.FRAMEBUFFER,t,n.RENDERBUFFER,e.object)})),this._texturesByAttachment.forEach((function(e,t){n.framebufferTexture2D(n.FRAMEBUFFER,t,n.TEXTURE_2D,e.object,0)})),r.drawBuffers&&r.drawBuffers(this._drawBuffers);var d=n.checkFramebufferStatus(n.FRAMEBUFFER);return this._valid=n.isFramebuffer(this._object)&&d===n.FRAMEBUFFER_COMPLETE,a.logIf(!this._valid,a.LogLevel.Warning,t.statusString(this.context,d)),n.bindFramebuffer(n.FRAMEBUFFER,t.DEFAULT_FRAMEBUFFER),this._object},t.prototype.delete=function(){a.assert(this._object instanceof WebGLFramebuffer,"expected WebGLFramebuffer object"),this.context.gl.deleteFramebuffer(this._object),this._object=void 0,this._valid=!1},t.prototype.es2Clear=function(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!0);var r=this.context.gl,i=a.bitInBitfield(e,r.DEPTH_BUFFER_BIT),o=a.bitInBitfield(e,r.STENCIL_BUFFER_BIT),s=a.bitInBitfield(e,r.COLOR_BUFFER_BIT);if(s||i||o){if(t&&this.bind(),s&&void 0!==this._clearColors[0]){var u=this._clearColors[0];r.clearColor(u[0],u[1],u[2],u[3])}i&&void 0!==this._clearDepth&&r.clearDepth(this._clearDepth),o&&void 0!==this._clearStencil&&r.clearStencil(this._clearStencil),r.clear(e),n&&this.unbind()}},t.prototype.es3Clear=function(e,t,n,r){void 0===t&&(t=!0),void 0===n&&(n=!0);var i=this.context.gl,o=a.bitInBitfield(e,i.DEPTH_BUFFER_BIT),s=a.bitInBitfield(e,i.STENCIL_BUFFER_BIT),u=a.bitInBitfield(e,i.COLOR_BUFFER_BIT);if(u||o||s){if(t&&this.bind(),u){if(window.chrome&&(window.chrome.webstore||window.chrome.runtime)){var c=this._clearColors[0]?this._clearColors[0]:[0,0,0,1];i.clearColor(c[0],c[1],c[2],c[3]),i.clear(i.COLOR_BUFFER_BIT)}for(var l=0,f=r||this._colorClearQueue;l<f.length;l++){var h=f[l];i.clearBufferfv(i.COLOR,h,this._clearColors[h])}}o&&s?(i.clearStencil(this._clearStencil),i.clearDepth(this._clearDepth),i.clear(i.STENCIL_BUFFER_BIT|i.DEPTH_BUFFER_BIT)):o?i.clearBufferfv(i.DEPTH,0,[this._clearDepth]):s&&(i.clearStencil(this._clearStencil),i.clear(i.STENCIL_BUFFER_BIT)),n&&this.unbind()}},t.prototype.hasAttachment=function(e){return this._texturesByAttachment.has(e)||this._buffersByAttachment.has(e)},t.prototype.bind=function(e){void 0===e&&(e=this.context.gl.FRAMEBUFFER),this.context.gl.bindFramebuffer(e,this._object),this._drawBuffersChanged&&this.context.gl2facade.drawBuffers&&(this.context.gl2facade.drawBuffers(this._drawBuffers),this._drawBuffersChanged=!1)},t.prototype.unbind=function(e){void 0===e&&(e=this.context.gl.FRAMEBUFFER),this.context.gl.bindFramebuffer(e,t.DEFAULT_FRAMEBUFFER)},t.prototype.clearColor=function(e,t){a.assert(void 0===t||0===t||this.context.isWebGL2||this.context.supportsDrawBuffers,"WebGL2 context expected for clearing multiple color attachments.");var n=e[3]<1&&!this.context.alpha;a.logIf(n,a.LogLevel.Warning,"context has alpha disabled, clear color alpha is ignored");var r=[e[0],e[1],e[2],n?1:e[3]];if(this.context.premultipliedAlpha&&!n&&(r[0]*=r[3],r[1]*=r[3],r[2]*=r[3]),void 0!==t)this._clearColors[t]=r;else for(var i=0;i<this._clearColors.length;++i)this._clearColors[i]=r},t.prototype.clearDepth=function(e){this._clearDepth=e},t.prototype.clearStencil=function(e){this._clearStencil=e},t.prototype.texture=function(e){return this._texturesByAttachment.get(e)},t.prototype.resize=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0),this._buffersByAttachment.forEach((function(i){i.resize(e,t,n,r)})),this._texturesByAttachment.forEach((function(i){i.resize(e,t,n,r)}))},Object.defineProperty(t.prototype,"width",{get:function(){this.assertInitialized();var e=NaN;return this._buffersByAttachment.forEach((function(t){(isNaN(e)||t.width<e)&&(e=t.width)})),this._texturesByAttachment.forEach((function(t){(isNaN(e)||t.width<e)&&(e=t.width)})),e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){this.assertInitialized();var e=NaN;return this._buffersByAttachment.forEach((function(t){(isNaN(e)||t.height<e)&&(e=t.height)})),this._texturesByAttachment.forEach((function(t){(isNaN(e)||t.height<e)&&(e=t.height)})),e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return[this.width,this.height]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"drawBuffers",{get:function(){return this.assertInitialized(),this._drawBuffers},set:function(e){this.assertInitialized();for(var t=this.context.gl2facade,n=0,r=e;n<r.length;n++){var i=r[n];a.assert(this.hasAttachment(i),"valid attachment expected for draw buffer, given "+i),a.assert(i>=t.COLOR_ATTACHMENT_MIN&&i<=t.COLOR_ATTACHMENT_MAX,"color attachment expected for draw buffer, given "+i),this._drawBuffersChanged=this._drawBuffersChanged||-1===this._drawBuffers.indexOf(i)}this._drawBuffersChanged=this._drawBuffersChanged||e.length!==this._drawBuffers.length,this._drawBuffersChanged&&(this._drawBuffers=e)},enumerable:!0,configurable:!0}),t.DEFAULT_FRAMEBUFFER=void 0,o([s.Initializable.assert_initialized()],t.prototype,"es2Clear",null),o([s.Initializable.assert_initialized()],t.prototype,"es3Clear",null),o([s.Initializable.assert_initialized()],t.prototype,"bind",null),o([s.Initializable.assert_initialized()],t.prototype,"unbind",null),o([s.Initializable.assert_initialized()],t.prototype,"clearColor",null),o([s.Initializable.assert_initialized()],t.prototype,"clearDepth",null),o([s.Initializable.assert_initialized()],t.prototype,"clearStencil",null),o([s.Initializable.assert_initialized()],t.prototype,"texture",null),o([s.Initializable.assert_initialized()],t.prototype,"resize",null),t}(u.AbstractObject);t.Framebuffer=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(44),i=function(){function e(){this._camera=void 0,this._reference=new r.Camera}return Object.defineProperty(e.prototype,"camera",{set:function(e){this._camera!==e&&(this._camera=e,void 0!==e&&(Object.assign(this._reference,e),this.update()))},enumerable:!0,configurable:!0}),e}();t.CameraModifier=i},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5),s=n(7),u=n(2),c=function(e){function t(t,n){var r=e.call(this,t,n)||this;n=void 0!==n&&""!==n?n:r.constructor.name;var i=new a.Buffer(t,n+"VBO");return r._buffers.push(i),r}return i(t,e),t.prototype.bindBuffers=function(){this._buffers[0].attribEnable(this._vertexLocation,2,this.context.gl.FLOAT,!1,0,0,!0,!1)},t.prototype.unbindBuffers=function(){this._buffers[0].attribDisable(this._vertexLocation,!0,!0)},t.prototype.initialize=function(n){void 0===n&&(n=0),this._vertexLocation=n;var r=this.context.gl,i=e.prototype.initialize.call(this,[r.ARRAY_BUFFER]);return this._buffers[0].data(t.VERTICES,r.STATIC_DRAW),i},t.prototype.draw=function(){var e=this.context.gl;e.drawArrays(e.TRIANGLES,0,3)},Object.defineProperty(t.prototype,"vertexLocation",{get:function(){return this._vertexLocation},enumerable:!0,configurable:!0}),t.VERTICES=new Float32Array([-1,-3,3,1,-1,1]),o([u.Initializable.assert_initialized()],t.prototype,"draw",null),t}(s.Geometry);t.NdcFillingTriangle=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t){var n=Math.max(0,t);this._texCoords=new Float32Array(n*e.FLOATS_PER_TEXCOORD),this._origins=new Float32Array(n*e.FLOATS_PER_ORIGIN),this._tangents=new Float32Array(n*e.FLOATS_PER_TANGENT),this._ups=new Float32Array(n*e.FLOATS_PER_UP)}return e.concat=function(t){var n=0;t.forEach((function(e){return n+=e?e.length:0}));for(var r=new e(n),i=0,o=0;o<t.length;++o){var a=t[o];void 0!==a&&0!==a.length&&(r._texCoords.set(a._texCoords,i*e.FLOATS_PER_TEXCOORD),r._origins.set(a._origins,i*e.FLOATS_PER_ORIGIN),r._tangents.set(a._tangents,i*e.FLOATS_PER_TANGENT),r._ups.set(a._ups,i*e.FLOATS_PER_UP),i+=a.length)}return r},e.prototype.shrink=function(t){var n=Math.max(0,t);if(this.length!==n){var r=function(e,t,n){return new Float32Array(e.buffer.slice(0,t*e.BYTES_PER_ELEMENT*n),0,t*n)};r(this._texCoords,n,e.FLOATS_PER_TEXCOORD),r(this._origins,n,e.FLOATS_PER_ORIGIN),r(this._ups,n,e.FLOATS_PER_TANGENT),r(this._tangents,n,e.FLOATS_PER_UP)}},e.prototype.uvLowerLeft=function(t){var n=t*e.FLOATS_PER_TEXCOORD+0;return this._texCoords.subarray(n,n+2)},e.prototype.uvUpperRight=function(t){var n=t*e.FLOATS_PER_TEXCOORD+2;return this._texCoords.subarray(n,n+2)},e.prototype.origin=function(t){var n=t*e.FLOATS_PER_ORIGIN;return this._origins.subarray(n,n+e.FLOATS_PER_ORIGIN)},e.prototype.tangent=function(t){var n=t*e.FLOATS_PER_TANGENT;return this._tangents.subarray(n,n+e.FLOATS_PER_TANGENT)},e.prototype.up=function(t){var n=t*e.FLOATS_PER_UP;return this._ups.subarray(n,n+e.FLOATS_PER_UP)},Object.defineProperty(e.prototype,"length",{get:function(){return this._origins.length/e.FLOATS_PER_ORIGIN},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"origins",{get:function(){return this._origins},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tangents",{get:function(){return this._tangents},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ups",{get:function(){return this._ups},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"texCoords",{get:function(){return this._texCoords},enumerable:!0,configurable:!0}),e.FLOATS_PER_TEXCOORD=4,e.FLOATS_PER_ORIGIN=3,e.FLOATS_PER_TANGENT=3,e.FLOATS_PER_UP=3,e}();t.GlyphVertices=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(12),o=n(20),a=n(17),s=n(58),u=function(){function e(t,n,a){this._alignment=e.Alignment.Left,this._lineAnchor=e.LineAnchor.Baseline,this._lineWidth=NaN,this._fontSizeUnit=e.Unit.World,this._color=new o.Color(e.DEFAULT_COLOR),this._altered=Object.assign(new i.ChangeLookup,{any:!1,color:!1,resources:!1,text:!1,typesetting:!1,static:!1,dynamic:!1}),this._wrap=!1,this._elide=e.Elide.None,this._ellipsis=e.DEFAULT_ELLIPSIS,this._text=t,this._type=n,this._staticTransform=r.mat4.create(),this._dynamicTransform=r.mat4.create(),this._extent=[0,0],a&&(this._fontFace=a)}return e.devicePixelRatio=function(){return void 0===window||"number"!=typeof window.devicePixelRatio?1:window.devicePixelRatio},e.prototype.vertices=function(){return new a.GlyphVertices(this.length+this.ellipsis.length)},e.prototype.charAt=function(e){return this._text.charAt(e)},e.prototype.charCodeAt=function(e){return this._text.charCodeAt(e)},e.prototype.lineFeedAt=function(e){return this.charAt(e)===this.lineFeed},e.prototype.kerningBefore=function(e){return e<1||e>this.length?NaN:this._fontFace.kerning(this.charCodeAt(e-1),this.charCodeAt(e))},e.prototype.kerningAfter=function(e){return e<0||e>this.length-1?NaN:this._fontFace.kerning(this.charCodeAt(e),this.charCodeAt(e+1))},e.prototype.advance=function(e){return e<0||e>this.length?NaN:this._fontFace.glyph(this.charCodeAt(e)).advance},e.prototype.toString=function(){return this._text instanceof s.Text?this._text.text:this._text},e.prototype.reset=function(){this._altered.reset()},Object.defineProperty(e.prototype,"text",{get:function(){return this._text},set:function(e){this._altered.alter("text"),this._text=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._text.length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lineFeed",{get:function(){return this._text instanceof s.Text?this._text.lineFeed:s.Text.DEFAULT_LINE_FEED},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wrap",{get:function(){return this._wrap},set:function(e){this._wrap=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"elide",{get:function(){return this._elide},set:function(e){this._elide=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ellipsis",{get:function(){return this._ellipsis},set:function(t){this._ellipsis!==t&&(this._ellipsis=t,this._elide!==e.Elide.None&&this._altered.alter("typesetting"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lineWidth",{get:function(){return this._lineWidth*this._fontFace.size/this.fontSize},set:function(e){this._lineWidth!==e&&(this._lineWidth=e,this._altered.alter("typesetting"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"alignment",{get:function(){return this._alignment},set:function(e){this._alignment!==e&&(this._alignment=e,this._altered.alter("typesetting"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lineAnchor",{get:function(){return this._lineAnchor},set:function(e){this._lineAnchor!==e&&(this._lineAnchor=e,this._altered.alter("typesetting"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fontSize",{get:function(){return this._fontSize},set:function(e){this._fontSize!==e&&(this._fontSize=e,this._altered.alter("typesetting"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fontSizeUnit",{get:function(){return this._fontSizeUnit},set:function(e){this._fontSizeUnit!==e&&(this._fontSizeUnit=e,this._altered.alter("typesetting"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fontFace",{get:function(){return this._fontFace},set:function(e){this._fontFace!==e&&(this._fontFace=e,this._altered.alter("typesetting"),this._altered.alter("resources"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},set:function(e){this._color.equals(e)||(this._color=e,this._altered.alter("color"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"backgroundColor",{get:function(){return this._backgroundColor},set:function(e){this._backgroundColor.equals(e)||(this._backgroundColor=e,this._altered.alter("color"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"staticTransform",{get:function(){var e=this.fontSize/this._fontFace.size,t=r.mat4.create();return r.mat4.scale(t,this._staticTransform,r.vec3.fromValues(e,e,e)),t},set:function(e){r.mat4.equals(this._staticTransform,e)||(this._staticTransform=e,this._altered.alter("static"))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dynamicTransform",{get:function(){return this._dynamicTransform},set:function(e){this._altered.alter("dynamic"),this._dynamicTransform=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extent",{get:function(){return this._extent},set:function(e){this._extent=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"altered",{get:function(){return this._altered.any||this._text.altered||this._color.altered},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"valid",{get:function(){return void 0!==this._fontFace&&this._fontFace.glyphTexture.valid&&this._text.length>0},enumerable:!0,configurable:!0}),e.DEFAULT_COLOR=[.1098,.4588,.7373,1],e.DEFAULT_ELLIPSIS="...",e}();t.Label=u,function(e){!function(e){e.Static="static",e.Dynamic="dynamic"}(e.Type||(e.Type={})),function(e){e.None="none",e.Left="left",e.Middle="middle",e.Right="right"}(e.Elide||(e.Elide={})),function(e){e.Left="left",e.Center="center",e.Right="right"}(e.Alignment||(e.Alignment={})),function(e){e.Top="top",e.Ascent="ascent",e.Center="center",e.Baseline="baseline",e.Descent="descent",e.Bottom="bottom"}(e.LineAnchor||(e.LineAnchor={})),function(e){e.World="world",e.Pixel="pixel",e.Mixed="mixed"}(e.Unit||(e.Unit={}))}(u=t.Label||(t.Label={})),t.Label=u},function(e,t,n){"use strict";var r,i=n(1),o=n(3),a=n(0);!function(e){function t(e){return a.assert(2===e.length,"expected length of buffer to be 2, given "+e.length),[e[0],e[1]]}function n(e){return a.assert(3===e.length,"expected length of buffer to be 3, given "+e.length),[e[0],e[1],e[2]]}function r(e){return a.assert(4===e.length,"expected length of buffer to be 4, given "+e.length),[e[0],e[1],e[2],e[3]]}e.tuple2=t,e.tuple3=n,e.tuple4=r,e.clampf=function(e,t){var n=o.clamp(e,0,1);return a.logIf(void 0!==t&&e<0||e>1,a.LogLevel.Info,t+" clamped to ["+n+"], given ["+e+"]"),n},e.clampf2=function(e,n){var r=i.vec2.fromValues(e[0],e[1]);return(e[0]<0||e[0]>1||e[1]<0||e[1]>1)&&(o.clamp2(r,r,i.vec2.fromValues(0,0),i.vec2.fromValues(1,1)),a.logIf(void 0!==n,a.LogLevel.Info,n+" clamped to ["+r+"], given ["+e+"]")),t(r)},e.clampf3=function(e,t){var r=i.vec3.fromValues(e[0],e[1],e[2]);return(e[0]<0||e[0]>1||e[1]<0||e[1]>1||e[2]<0||e[2]>1)&&(o.clamp3(r,r,i.vec3.fromValues(0,0,0),i.vec3.fromValues(1,1,1)),a.logIf(void 0!==t,a.LogLevel.Info,t+" clamped to ["+r+"], given ["+e+"]")),n(r)},e.clampf4=function(e,t){var n=i.vec4.fromValues(e[0],e[1],e[2],e[3]);return(e[0]<0||e[0]>1||e[1]<0||e[1]>1||e[2]<0||e[2]>1||e[3]<0||e[3]>1)&&(o.clamp4(n,n,i.vec4.fromValues(0,0,0,0),i.vec4.fromValues(1,1,1,1)),a.logIf(void 0!==t,a.LogLevel.Info,t+" clamped to ["+n+"], given ["+e+"]")),r(n)},e.duplicate2=function(e){return[e[0],e[1]]},e.duplicate3=function(e){return[e[0],e[1],e[2]]},e.duplicate4=function(e){return[e[0],e[1],e[2],e[3]]},e.equals2=function(e,t){return e[0]===t[0]&&e[1]===t[1]},e.equals3=function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},e.equals4=function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}}(r||(r={})),e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(3),o=n(0),a=n(19),s=function(){function e(t,n){this._rgba=[0,0,0,e.DEFAULT_ALPHA],this._altered=!1,void 0!==t&&(3===t.length&&void 0!==n?this.fromF32(t[0],t[1],t[2],n):4===t.length?(this.fromF32(t[0],t[1],t[2],t[3]),o.assert(void 0===n,"expected alpha to be undefined when given an 4-tuple in RGBA")):this.fromF32(t[0],t[1],t[2]))}return e.hue2rgb=function(e,t,n){return o.assert(n>=-1&&n<=2,"t is expected to be between -1 and 2"),n<0?n+=1:n>1&&(n-=1),6*n<1?e+6*(t-e)*n:2*n<1?t:3*n<2?e+6*(t-e)*(2/3-n):e},e.to2CharHexCode=function(e){return(e<15.5/255?"0":"")+Math.round(255*e).toString(16)},e.hsl2rgb=function(t){var n=a.clampf3(t,"HSL input");if(0===n[1])return[n[2],n[2],n[2]];var r=n[2]<.5?n[2]*(1+n[1]):n[2]+n[1]-n[1]*n[2],i=2*n[2]-r;return[e.hue2rgb(i,r,n[0]+1/3),e.hue2rgb(i,r,n[0]),e.hue2rgb(i,r,n[0]-1/3)]},e.rgb2hsl=function(e){var t=a.clampf3(e,"RGB input"),n=[0,0,0],r=Math.min(t[0],t[1],t[2]),i=Math.max(t[0],t[1],t[2]),o=i-r;if(n[2]=.5*(i+r),0===o)return n;n[1]=n[2]<.5?o/(i+r):o/(2-i-r);var s=((i-t[0])/6+o/2)/o,u=((i-t[1])/6+o/2)/o,c=((i-t[2])/6+o/2)/o;return t[0]===i?n[0]=c-u:t[1]===i?n[0]=s-c+1/3:n[0]=u-s+2/3,n},e.lab2xyz=function(e){var t=a.clampf3(e,"LAB input"),n=(100*t[0]+16)/116,r=100*t[1]/500+n,i=n-100*t[2]/200,o=n*n*n,s=r*r*r,u=i*i*i;return[.95047*(s>.008856?s:(r-16/116)/7.787),1*(o>.008856?o:(n-16/116)/7.787),1.08883*(u>.008856?u:(i-16/116)/7.787)]},e.xyz2lab=function(e){var t=[e[0]/.95047,1*e[1],e[2]/1.08883],n=t[0]>.008856?Math.pow(t[0],1/3):7.787*t[0]+16/116,r=t[1]>.008856?Math.pow(t[1],1/3):7.787*t[1]+16/116,i=t[2]>.008856?Math.pow(t[2],1/3):7.787*t[2]+16/116;return a.clampf3([.01*(116*r-16),500*(n-r)*.01,200*(r-i)*.01])},e.xyz2rgb=function(e){var t=2.04159*e[0]+-.56501*e[1]+-.34473*e[2],n=-.96924*e[0]+1.87597*e[1]+.04156*e[2],r=.01344*e[0]+-.11836*e[1]+1.01517*e[2];return a.clampf3([Math.pow(t,1/2.19921875),Math.pow(n,1/2.19921875),Math.pow(r,1/2.19921875)])},e.rgb2xyz=function(e){var t=a.clampf3(e,"RGB input"),n=Math.pow(t[0],2.19921875),r=Math.pow(t[1],2.19921875),i=Math.pow(t[2],2.19921875);return[.57667*n+.18556*r+.18823*i,.29734*n+.62736*r+.07529*i,.02703*n+.07069*r+.99134*i]},e.lab2rgb=function(t){return e.xyz2rgb(e.lab2xyz(t))},e.rgb2lab=function(t){return e.xyz2lab(e.rgb2xyz(t))},e.cmyk2rgb=function(e){var t=a.clampf4(e,"CMYK input"),n=1-t[3];return[(1-t[0])*n,(1-t[1])*n,(1-t[2])*n]},e.rgb2cmyk=function(e){var t=a.clampf3(e,"RGB input"),n=1-Math.max(t[0],t[1],t[2]),r=1-n,i=0===r?0:1/r;return[(r-t[0])*i,(r-t[1])*i,(r-t[2])*i,n]},e.hex2rgba=function(t){var n=[0,0,0,e.DEFAULT_ALPHA];if(!e.HEX_FORMAT_REGEX.test(t))return o.log(o.LogLevel.Warning,"hexadecimal RGBA color string must conform to either '0x0000', '#0000', '0000', '0x00000000', '#00000000', or '00000000', given '"+t+"'"),n;var r=t.startsWith("0x")?2:t.startsWith("#")?1:0,i=Math.floor((t.length-r)/3),a=i-1;return n[0]=parseInt(t[r+0*i]+t[r+0*i+a],16)/255,n[1]=parseInt(t[r+1*i]+t[r+1*i+a],16)/255,n[2]=parseInt(t[r+2*i]+t[r+2*i+a],16)/255,t.length-r!=4&&t.length-r!=8||(n[3]=parseInt(t[r+3*i]+t[r+3*i+a],16)/255),o.assert(!(isNaN(n[0])||isNaN(n[1])||isNaN(n[2])||isNaN(n[3])),"expected well formated hexadecimal RGBA string, given '"+t+"'"),n},e.rgb2hex=function(t){var n=a.clampf3(t,"RGB input");return"#"+e.to2CharHexCode(n[0])+e.to2CharHexCode(n[1])+e.to2CharHexCode(n[2])},e.rgba2hex=function(t){var n=a.clampf4(t,"RGBA input");return"#"+e.to2CharHexCode(n[0])+e.to2CharHexCode(n[1])+e.to2CharHexCode(n[2])+e.to2CharHexCode(n[3])},e.mix=function(t,n,o,a){if(void 0===a&&(a=e.Space.LAB),0===o)return new e(t.rgba);if(1===o)return new e(n.rgba);var s=r.vec4.create();switch(a){case e.Space.CMYK:r.vec4.lerp(s,t.cmyk,n.cmyka,o);var u=i.mix(t.a,n.a,o);return(new e).fromCMYK(s[0],s[1],s[2],s[3],u);case e.Space.LAB:return r.vec4.lerp(s,t.laba,n.laba,o),(new e).fromLAB(s[0],s[1],s[2],s[3]);case e.Space.HSL:return r.vec4.lerp(s,t.hsla,n.hsla,o),(new e).fromHSL(s[0],s[1],s[2],s[3]);case e.Space.RGB:return r.vec4.lerp(s,t.rgba,n.rgba,o),(new e).fromRGB(s[0],s[1],s[2],s[3])}},e.prototype.equals=function(e){return a.equals4(this._rgba,e._rgba)},e.prototype.fromF32=function(t,n,r,i){void 0===i&&(i=e.DEFAULT_ALPHA);var o=a.duplicate4(this._rgba);return this._rgba[0]=a.clampf(t,"red value"),this._rgba[1]=a.clampf(n,"green value"),this._rgba[2]=a.clampf(r,"blue value"),this._rgba[3]=a.clampf(i,"alpha value"),this._altered=!a.equals4(this._rgba,o),this},e.prototype.fromUI8=function(t,n,r,o){void 0===o&&(o=Math.floor(255*e.DEFAULT_ALPHA));var s=a.duplicate4(this._rgba);return this._rgba[0]=i.clamp(t,0,255)/255,this._rgba[1]=i.clamp(n,0,255)/255,this._rgba[2]=i.clamp(r,0,255)/255,this._rgba[3]=i.clamp(o,0,255)/255,this._altered=!a.equals4(this._rgba,s),this},e.prototype.fromRGB=function(t,n,r,i){void 0===i&&(i=e.DEFAULT_ALPHA);var o=a.duplicate4(this._rgba);return this._rgba=a.clampf4([t,n,r,i],"RGBA input"),this._altered=!a.equals4(this._rgba,o),this},e.prototype.fromHSL=function(t,n,r,i){void 0===i&&(i=e.DEFAULT_ALPHA);var o=a.duplicate4(this._rgba),s=e.hsl2rgb([t,n,r]),u=a.clampf(i,"ALPHA input");return this._rgba=[s[0],s[1],s[2],u],this._altered=!a.equals4(this._rgba,o),this},e.prototype.fromLAB=function(t,n,r,i){void 0===i&&(i=e.DEFAULT_ALPHA);var o=a.duplicate4(this._rgba),s=e.lab2rgb([t,n,r]),u=a.clampf(i,"ALPHA input");return this._rgba=[s[0],s[1],s[2],u],this._altered=!a.equals4(this._rgba,o),this},e.prototype.fromCMYK=function(t,n,r,i,o){void 0===o&&(o=e.DEFAULT_ALPHA);var s=a.duplicate4(this._rgba),u=e.cmyk2rgb([t,n,r,i]),c=a.clampf(o,"ALPHA input");return this._rgba=[u[0],u[1],u[2],c],this._altered=!a.equals4(this._rgba,s),this},e.prototype.fromHex=function(t){var n=a.duplicate4(this._rgba);return this._rgba=e.hex2rgba(t),this._altered=!a.equals4(this._rgba,n),this},e.prototype.gray=function(t){switch(void 0===t&&(t=e.GrayscaleAlgorithm.LinearLuminance),t){case e.GrayscaleAlgorithm.Average:return(this._rgba[0]+this._rgba[1]+this._rgba[2])/3;case e.GrayscaleAlgorithm.LeastSaturatedVariant:return.5*(Math.max(this._rgba[0],this._rgba[1],this._rgba[2])-Math.min(this._rgba[0],this._rgba[1],this._rgba[2]));case e.GrayscaleAlgorithm.MinimumDecomposition:return Math.min(this._rgba[0],this._rgba[1],this._rgba[2]);case e.GrayscaleAlgorithm.MaximumDecomposition:return Math.max(this._rgba[0],this._rgba[1],this._rgba[2]);case e.GrayscaleAlgorithm.LinearLuminance:return.2126*this._rgba[0]+.7152*this._rgba[1]+.0722*this._rgba[2]}},e.prototype.tuple=function(t,n){switch(void 0===n&&(n=!0),t){case e.Space.RGB:return n?this.rgba:this.rgb;case e.Space.LAB:return n?this.laba:this.lab;case e.Space.CMYK:return n?this.cmyka:this.cmyk;case e.Space.HSL:return n?this.hsla:this.hsl}},Object.defineProperty(e.prototype,"rgb",{get:function(){return[this._rgba[0],this._rgba[1],this._rgba[2]]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rgbUI8",{get:function(){var e=new Uint8Array(3);return e[0]=Math.round(255*this._rgba[0]),e[1]=Math.round(255*this._rgba[1]),e[2]=Math.round(255*this._rgba[2]),e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rgbF32",{get:function(){var e=new Float32Array(3);return e[0]=this._rgba[0],e[1]=this._rgba[1],e[2]=this._rgba[2],e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rgba",{get:function(){return this._rgba},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rgbaUI8",{get:function(){var e=new Uint8Array(4);return e[0]=Math.round(255*this._rgba[0]),e[1]=Math.round(255*this._rgba[1]),e[2]=Math.round(255*this._rgba[2]),e[3]=Math.round(255*this._rgba[3]),e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rgbaF32",{get:function(){return new Float32Array(this._rgba)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"r",{get:function(){return this._rgba[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"g",{get:function(){return this._rgba[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"b",{get:function(){return this._rgba[2]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"a",{get:function(){return this._rgba[3]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hexRGB",{get:function(){return e.rgb2hex(this.rgb)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hexRGBA",{get:function(){return e.rgba2hex(this._rgba)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hsl",{get:function(){return e.rgb2hsl(this.rgb)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hsla",{get:function(){var t=e.rgb2hsl(this.rgb);return[t[0],t[1],t[2],this._rgba[3]]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lab",{get:function(){return e.rgb2lab(this.rgb)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"laba",{get:function(){var t=e.rgb2lab(this.rgb);return[t[0],t[1],t[2],this._rgba[3]]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cmyk",{get:function(){return e.rgb2cmyk(this.rgb)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cmyka",{get:function(){var t=e.rgb2cmyk(this.rgb);return[t[0],t[1],t[2],t[3],this._rgba[3]]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"altered",{get:function(){return this._altered},set:function(e){this._altered=e},enumerable:!0,configurable:!0}),e.DEFAULT_ALPHA=1,e.HEX_FORMAT_REGEX=new RegExp(/^(#|0x)?(([0-9a-f]{3}){1,2}|([0-9a-f]{4}){1,2})$/i),e}();t.Color=s,function(e){!function(e){e.Average="average",e.LinearLuminance="linear-luminance",e.LeastSaturatedVariant="least-saturated-variant",e.MinimumDecomposition="minimum-decomposition",e.MaximumDecomposition="maximum-decomposition"}(e.GrayscaleAlgorithm||(e.GrayscaleAlgorithm={})),function(e){e.RGB="rgb",e.HSL="hsl",e.LAB="lab",e.CMYK="cmyk"}(e.Space||(e.Space={}))}(s=t.Color||(t.Color={})),t.Color=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(22),u=n(2),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._internalFormat=void 0,t}return i(t,e),t.prototype.create=function(e,n,r){a.assert(e>0&&n>0,"renderbuffer object requires valid width and height greater than zero");var i=this.context.gl;this._object=i.createRenderbuffer(),this._width=e,this._height=n,this._internalFormat=r,i.bindRenderbuffer(i.RENDERBUFFER,this._object),i.renderbufferStorage(i.RENDERBUFFER,r,e,n),this._valid=i.isRenderbuffer(this._object),i.bindRenderbuffer(i.RENDERBUFFER,t.DEFAULT_RENDER_BUFFER);var o=e*n*s.byteSizeOfFormat(this.context,r);return this.context.allocationRegister.reallocate(this._identifier,o),this._object},t.prototype.delete=function(){a.assert(this._object instanceof WebGLRenderbuffer,"expected WebGLRenderbuffer object"),this.context.gl.deleteRenderbuffer(this._object),this._object=void 0,this._valid=!1,this._internalFormat=void 0,this._width=0,this._height=0},t.prototype.bind=function(){this.context.gl.bindRenderbuffer(this.context.gl.RENDERBUFFER,this._object)},t.prototype.unbind=function(){this.context.gl.bindRenderbuffer(this.context.gl.RENDERBUFFER,t.DEFAULT_RENDER_BUFFER)},t.prototype.resize=function(e,t,n,r){if(void 0===n&&(n=!1),void 0===r&&(r=!1),e!==this._width||t!==this._height){this._width=e,this._height=t;var i=this.context.gl;n&&this.bind(),i.renderbufferStorage(i.RENDERBUFFER,this._internalFormat,e,t),r&&this.unbind();var o=e*t*s.byteSizeOfFormat(this.context,this._internalFormat);this.context.allocationRegister.reallocate(this._identifier,o)}},Object.defineProperty(t.prototype,"bytes",{get:function(){return this.assertInitialized(),this.context.allocationRegister.allocated(this._identifier)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"internalFormat",{get:function(){return this.assertInitialized(),this._internalFormat},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.assertInitialized(),this._width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.assertInitialized(),this._height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return[this.width,this.height]},enumerable:!0,configurable:!0}),t.DEFAULT_RENDER_BUFFER=void 0,o([u.Initializable.assert_initialized()],t.prototype,"bind",null),o([u.Initializable.assert_initialized()],t.prototype,"unbind",null),o([u.Initializable.assert_initialized()],t.prototype,"resize",null),t}(n(6).AbstractObject);t.Renderbuffer=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.byteSizeOfFormat=function(e,t){var n=e.gl,i=e.gl2facade,o=e.supportsDepthTexture?e.depthTexture.UNSIGNED_INT_24_8_WEBGL:void 0;switch(t){case void 0:default:break;case n.UNSIGNED_BYTE:case n.UNSIGNED_SHORT_5_6_5:case n.UNSIGNED_SHORT_4_4_4_4:case n.UNSIGNED_SHORT_5_5_5_1:case n.UNSIGNED_SHORT:case n.UNSIGNED_INT:case o:case n.FLOAT:case i.HALF_FLOAT:case n.BYTE:case n.UNSIGNED_SHORT:case n.SHORT:case n.UNSIGNED_INT:case n.INT:case n.HALF_FLOAT:case n.FLOAT:case n.UNSIGNED_INT_2_10_10_10_REV:case n.UNSIGNED_INT_10F_11F_11F_REV:case n.UNSIGNED_INT_5_9_9_9_REV:case n.UNSIGNED_INT_24_8:case n.FLOAT_32_UNSIGNED_INT_24_8_REV:return r.assert(!1,"expected format instead of type "+t),0}var a=e.supportsSRGB?e.sRGB.SRGB8_ALPHA8_EXT:void 0,s=e.supportsSRGB?e.sRGB.SRGB_EXT:void 0,u=e.supportsSRGB?e.sRGB.SRGB_ALPHA_EXT:void 0,c=e.supportsColorBufferFloat?e.colorBufferFloat.RGB32F_EXT:void 0,l=e.supportsColorBufferFloat?e.colorBufferFloat.RGBA32F_EXT:void 0;switch(t){case void 0:default:return r.assert(!1,"size of format "+t+" is unknown"),0;case n.ALPHA:case n.LUMINANCE:case n.R8:case n.R8I:case n.R8UI:case n.STENCIL_INDEX8:return 1;case n.DEPTH_COMPONENT16:case n.LUMINANCE_ALPHA:case n.R16F:case n.R16I:case n.R16UI:case n.RG8:case n.RG8I:case n.RG8UI:case n.RGB565:case n.RGB5_A1:case n.RGBA4:return 2;case n.DEPTH_COMPONENT24:case n.RGB:case n.RGB8:case n.RGB8UI:case n.SRGB:case s:case n.SRGB8:return 3;case n.DEPTH_STENCIL:case n.DEPTH24_STENCIL8:case n.DEPTH_COMPONENT32F:case n.R11F_G11F_B10F:case n.R32F:case n.R32I:case n.R32UI:case n.RG16F:case n.RG16I:case n.RG16UI:case n.RGB10_A2:case n.RGB10_A2UI:case n.RGB9_E5:case n.RGBA:case n.RGBA8:case n.RGBA8I:case n.RGBA8UI:case n.SRGB8_ALPHA8:case a:case n.SRGB_ALPHA:case u:case n.SRGB_ALPHA8:case n.SRGB_APLHA8:return 4;case n.DEPTH32F_STENCIL8:return 5;case n.RGB16F:return 6;case n.RG32F:case n.RG32I:case n.RG32UI:case n.RGBA16F:case n.RGBA16I:case n.RGBA16UI:return 8;case n.RGB32F:case n.RGB32F:case c:return 12;case n.RGBA32F:case l:case n.RGBA32I:case n.RGBA32UI:return 16;case n.DEPTH_COMPONENT:case n.DEPTH_STENCIL:return r.assert(!1,"byte size of DEPTH_COMPONENT or DEPTH_STENCIL formats depends on active render buffer"),0}}},function(e,t){e.exports="\nprecision lowp float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else\n    #define varying out\n#endif\n\n\n\n#if __VERSION__ == 100\n    attribute vec2 a_vertex;\n#else\n    layout(location = 0) in vec2 a_vertex;\n#endif\n\n\nvarying vec2 v_uv;\n\n\nvoid main(void)\n{\n    v_uv = a_vertex * 0.5 + 0.5;\n\n    gl_Position = vec4(a_vertex, 0.0, 1.0);\n}\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(111);t.ForwardSceneRenderPass=r.ForwardSceneRenderPass;var i=n(56);t.SceneNode=i.SceneNode;var o=n(36);t.SceneNodeComponent=o.SceneNodeComponent;var a=n(112);t.TransformComponent=a.TransformComponent;var s=n(113);t.GeometryComponent=s.GeometryComponent;var u=n(114);t.Material=u.Material;var c=n(55);t.SceneRenderPass=c.SceneRenderPass},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(0),o=n(3),a=n(18),s=function(){function e(){}return e.writeVertex=function(e,t,n,i,o){if(void 0!==i&&!1!==n.depictable()){var a=e.glyphTexturePadding,s=i.origin(o);r.vec3.set(s,t[0],t[1],0),s[0]+=n.bearing[0]-a[3],s[1]+=n.bearing[1]-n.extent[1],r.vec3.set(i.tangent(o),n.extent[0],0,0),r.vec3.set(i.up(o),0,n.extent[1],0);var u=i.uvLowerLeft(o);r.vec2.copy(u,n.subTextureOrigin);var c=i.uvUpperRight(o);r.vec2.add(c,n.subTextureOrigin,n.subTextureExtent)}},e.lineAnchorOffset=function(e){var t=0,n=e.fontFace.glyphTexturePadding,r=e.fontFace;switch(e.lineAnchor){case a.Label.LineAnchor.Baseline:default:t=-n[0];break;case a.Label.LineAnchor.Ascent:t=r.ascent-n[0];break;case a.Label.LineAnchor.Descent:t=r.descent*(1+n[0]/r.ascent);break;case a.Label.LineAnchor.Center:t=r.ascent-n[0]-.5*r.size;break;case a.Label.LineAnchor.Top:t=r.ascent-n[0]+.5*r.lineGap;break;case a.Label.LineAnchor.Bottom:t=r.ascent-n[0]+.5*r.lineGap-r.lineHeight}return t},e.advances=function(e,t){i.assert(void 0!==e.fontFace,"expected a font face for label in order to resolve advances"),void 0===t&&(t=e.text.text);for(var n=new Float32Array(t.length),r=0;r<t.length;++r){var o=t.charCodeAt(r);n[r]=e.fontFace.glyph(o).advance}return n},e.kernings=function(e,t){if(i.assert(void 0!==e.fontFace,"expected a font face for label in order to resolve kernings"),void 0===t){for(var n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e.kerningAfter(r);n[r]=isNaN(o)?0:o}return n}var a,s=new Float32Array(t.length);for(r=0;r<t.length;++r)o=(a=r)<0||a>t.length-1?NaN:e.fontFace.kerning(t.charCodeAt(a),t.charCodeAt(a+1)),s[r]=isNaN(o)?0:o;return s},e.fragments=function(t){for(var n,r=new Array,i=0,o=0;o<t.length;++o)if(n=e.DELIMITERS.indexOf(t.charAt(o))>-1){i<o&&r.push([i,o,e.FragmentType.Word]);var a=t.lineFeedAt(o)?e.FragmentType.LineFeed:e.FragmentType.Delimiter;r.push([o,o+1,a]),i=o+1}return n||r.push([i,t.length,e.FragmentType.Word]),r},e.fragmentWidths=function(e,t,n){for(var r=new Float32Array(e.length),i=function(i){var o=e[i];r[i]=t.subarray(o[0],o[1]).reduce((function(e,t,r){return e+t+(r<o[1]?n[r+o[0]]:0)}),0)},o=0;o<e.length;++o)i(o);return r},e.elideThresholds=function(e,t){switch(e.elide){case a.Label.Elide.Right:return[e.lineWidth-t,0];case a.Label.Elide.Middle:var n=e.lineWidth/2-t/2;return[n,n];case a.Label.Elide.Left:return[0,e.lineWidth-t];default:return[0,0]}},e.elideFragments=function(t,n,r,i,o,a){for(var s=new Array,u=new Array,c=0,l=0,f=a?n.length-1:0;a?f>-1:f<n.length;a?--f:++f){var h=n[f];if(h[2]!==e.FragmentType.LineFeed){if(!(c+r[f]<t)){if(h[2]===e.FragmentType.Delimiter||c+i[a?h[1]-1:h[0]]>t)break;for(var d=a?h[1]-1:h[0];a?d>=h[0]:d<h[1];a?--d:++d){if(!(c+l+i[d]+o[d]<t)){s.push([a?d+1:h[0],a?h[1]:d,h[2]]),u.push(l);break}l+=i[d]+o[d]}break}c+=r[f],s.push(h),u.push(r[f])}}return[s,u,c+l]},e.transformVertices=function(e,t,n,i){if(void 0!==t&&!r.mat4.equals(e,r.mat4.create()))for(var a=n;a<i;++a){var s=t.origin(a),u=o.v3();r.vec3.transformMat4(u,s,e);var c=o.v3();r.vec3.transformMat4(c,r.vec3.add(c,s,t.tangent(a)),e);var l=o.v3();r.vec3.transformMat4(l,r.vec3.add(l,s,t.up(a)),e),r.vec3.copy(t.origin(a),u),r.vec3.sub(t.tangent(a),c,u),r.vec3.sub(t.up(a),l,u)}},e.updateRectangleMinMax=function(e,t){i.assert(6===e.length&&6===t.length,"expected the rectangles to have 6 values!");for(var n=0;n<3;n++)e[n]=Math.min(e[n],t[n]);for(;n<6;n++)e[n]=Math.max(e[n],t[n])},e.minMax=function(e,t,n){var i=Math.min.apply(Math,[e].concat(n)),o=Math.max.apply(Math,[t].concat(n));return r.vec2.fromValues(i,o)},e.getMinMaxVertices=function(t,n,r){for(var i=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY,a=Number.POSITIVE_INFINITY,s=Number.NEGATIVE_INFINITY,u=Number.POSITIVE_INFINITY,c=Number.NEGATIVE_INFINITY,l=n;l<r;++l){var f=e.minMax(i,o,[t.origin(l)[0],t.origin(l)[0]+t.up(l)[0],t.origin(l)[0]+t.tangent(l)[0]]);i=f[0],o=f[1];var h=e.minMax(a,s,[t.origin(l)[1],t.origin(l)[1]+t.up(l)[1],t.origin(l)[1]+t.tangent(l)[1]]);a=h[0],s=h[1];var d=e.minMax(u,c,[t.origin(l)[2],t.origin(l)[2]+t.up(l)[2],t.origin(l)[2]+t.tangent(l)[2]]);u=d[0],c=d[1]}return[i,a,u,o,s,c]},e.transformAlignment=function(e,t,n,r,i){if(void 0!==n&&t!==a.Label.Alignment.Left){var o=-e;t===a.Label.Alignment.Center&&(o*=.5);for(var s=r;s<i;++s)n.origin(s)[0]+=o}},e.transform=function(t,n,i){for(var o=[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],a=0,s=i;a<s.length;a++){var u=s[a];e.transformAlignment(u[2],t.alignment,n,u[0],u[1]),e.updateRectangleMinMax(o,e.getMinMaxVertices(n,u[0],u[1])),e.transformVertices(t.staticTransform,n,u[0],u[1])}var c=o[3]-o[0],l=o[4]-o[1],f=r.vec4.transformMat4(r.vec4.create(),r.vec4.fromValues(0,0,0,1),t.staticTransform),h=r.vec4.transformMat4(r.vec4.create(),r.vec4.fromValues(c,0,0,1),t.staticTransform),d=r.vec4.transformMat4(r.vec4.create(),r.vec4.fromValues(0,l,0,1),t.staticTransform),p=r.vec2.fromValues(r.vec4.distance(h,f),r.vec4.distance(d,f));t.extent=[p[0],p[1]]},e.typeset=function(t,n){if(0===t.length)return 0;i.assert(void 0!==t.fontFace,"expected a font face for label before typesetting");var o=t.fontFace,s=function(e){return e<t.length?o.glyph(t.charCodeAt(e)):o.glyph(t.ellipsis.charCodeAt(e-t.length))},u=e.advances(t),c=e.kernings(t),l=e.fragments(t),f=e.fragmentWidths(l,u,c),h=r.vec2.fromValues(0,-e.lineAnchorOffset(t)),d=new Array,p=0,_=t.elide!==a.Label.Elide.None,m=function(r,i,a,l,f,m){void 0===a&&(a=NaN),void 0===l&&(l=u),void 0===f&&(f=c),void 0===m&&(m=0);for(var v=p,g=0;g<r.length;++g){var b=r[g];if(!(b[0]>=b[1])){var y=!_&&b[2]===e.FragmentType.LineFeed,x=!1;if(!_&&!y&&t.wrap){var E=b[2]!==e.FragmentType.Delimiter||s(b[0]).depictable(),T=b[2]===e.FragmentType.Word&&g<r.length-1&&r[g+1][2]===e.FragmentType.Delimiter&&s(r[g+1][0]).depictable();x=h[0]+(E?i[g]:0)+(T?i[g+1]:0)>t.lineWidth}if(!y&&!x||(d.push([v,p,h[0]]),v=p,h[0]=0,h[1]-=o.lineHeight,!y))for(var w=b[0];w<b[1];++w)s(w).depictable()&&(e.writeVertex(o,h,s(w),n,p),++p),h[0]+=l[w-m]+f[w-m]}}v<p&&d.push([v,p,h[0]])},v=f.reduce((function(e,t){return e+t}),0);if(_&&v>t.lineWidth){var g=[[t.length,t.length+t.ellipsis.length,e.FragmentType.Word]],b=e.advances(t,t.ellipsis),y=e.kernings(t,t.ellipsis),x=e.fragmentWidths([[0,t.ellipsis.length,e.FragmentType.Word]],b,y),E=x[0];if(t.lineWidth<E)return 0;var T=e.elideThresholds(t,E),w=e.elideFragments(T[0],l,f,u,c,!1),A=w[0],M=w[1],O=w[2];t.elide===a.Label.Elide.Middle&&(T[1]+=T[0]-O);var R=e.elideFragments(T[1],l,f,u,c,!0),S=R[0],P=R[1];m(A,new Float32Array(M)),m(g,x,NaN,b,y,t.length),m(S.reverse(),new Float32Array(P.reverse())),i.assert(d.length<4,"expected at most 3-line-yield from advance, given "+d),d[0][1]=d[d.length-1][1],d[0][2]=h[0],d.length=1}else m(l,f,t.lineWidth);return e.transform(t,n,d),n.shrink(p),p},e.DELIMITERS="\n ,.-/()[]<>",e}();t.Typesetter=s,function(e){!function(e){e[e.Word=0]="Word",e[e.Delimiter=1]="Delimiter",e[e.LineFeed=2]="LineFeed"}(e.FragmentType||(e.FragmentType={}))}(s=t.Typesetter||(t.Typesetter={})),t.Typesetter=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(73),o=n(37),a=n(38),s=n(27),u=n(75),c=function(){function e(t,n){this._attributes=void 0,this._extensions=new Array,this._allocationRegister=new i.AllocationRegister,this._context=t,this._mask=n;var o=t.toString(),a=/WebGLRenderingContext/.test(o)||/CaptureContext/.test(o),s=/WebGL2RenderingContext/.test(o);if(this._backend=a?e.BackendType.WebGL1:s?e.BackendType.WebGL2:void 0,r.assert(void 0!==this._backend&&this._backend.valueOf()!==e.BackendType.Invalid.valueOf(),"context is neither webgl nor webgl2, given "+o),this.queryAttributes(),this.queryExtensionSupport(),this._mask&&this._mask.functionsUndefine)for(var c in this._mask.functionsUndefine)this._context[c]=void 0;this._gl2=new u.GL2Facade(this)}return e.createMasqueradeFromGETorDataAttribute=function(e){return o.ContextMasquerade.fromGET()||(e.msqrdH?o.ContextMasquerade.fromHash(e.msqrdH):e.msqrdP?o.ContextMasquerade.fromPreset(e.msqrdP):void 0)},e.request=function(t,n){void 0===n&&(n=e.DEFAULT_ATTRIBUTES);var i,o=t.dataset,a=e.createMasqueradeFromGETorDataAttribute(o),s=a?a.backend:o.backend?o.backend.toLowerCase():"auto";switch(s in e.BackendRequestType||(r.log(r.LogLevel.Warning,"unknown backend '"+o.backend+"' changed to '"+e.BackendRequestType.auto+"'"),s="auto"),s){case e.BackendRequestType.webgl:break;case e.BackendRequestType.experimental:case e.BackendRequestType.webgl1:case e.BackendRequestType.experimental1:s=e.BackendRequestType.webgl;break;case e.BackendRequestType.webgl2:case e.BackendRequestType.experimental2:s=e.BackendRequestType.webgl2;break;default:s=e.BackendRequestType.auto}return s!==e.BackendRequestType.webgl&&(i=this.requestWebGL2(t,n)),i||(i=this.requestWebGL1(t,n),r.logIf(void 0!==i&&s===e.BackendRequestType.webgl2,r.LogLevel.Info,"backend changed to '"+e.BackendRequestType.webgl+"', given '"+s+"'")),r.assert(!!i,"creating a context failed"),new e(i,a)},e.requestWebGL1=function(t,n){void 0===n&&(n=e.DEFAULT_ATTRIBUTES);var r=t.getContext(e.BackendRequestType.webgl,n);return r||(null===(r=t.getContext(e.BackendRequestType.experimental,n))?void 0:r)},e.requestWebGL2=function(t,n){void 0===n&&(n=e.DEFAULT_ATTRIBUTES);var r=t.getContext(e.BackendRequestType.webgl2,n);return r||(null===(r=t.getContext(e.BackendRequestType.experimental2,n))?void 0:r)},e.prototype.queryAttributes=function(){var e=this._context.getContextAttributes();null!==e?this._attributes=e:r.log(r.LogLevel.Error,"querying context attributes failed (probably blocked)")},Object.defineProperty(e.prototype,"alpha",{get:function(){return!!this._attributes&&this._attributes.alpha},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"antialias",{get:function(){return!!this._attributes&&this._attributes.antialias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"depth",{get:function(){return!!this._attributes&&this._attributes.depth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"failIfMajorPerformanceCaveat",{get:function(){return!!this._attributes&&this._attributes.failIfMajorPerformanceCaveat},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"premultipliedAlpha",{get:function(){return!!this._attributes&&this._attributes.premultipliedAlpha},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"preserveDrawingBuffer",{get:function(){return!!this._attributes&&this._attributes.preserveDrawingBuffer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"stencil",{get:function(){return!!this._attributes&&this._attributes.stencil},enumerable:!0,configurable:!0}),e.prototype.supports=function(t){if(this._mask&&this._mask.extensionsConceal.indexOf(t)>-1)return!1;switch(this._backend){case e.BackendType.WebGL1:r.assert(a.WEBGL1_EXTENSIONS.indexOf(t)>-1,"extension "+t+" not available to WebGL1");break;case e.BackendType.WebGL2:r.assert(-1===a.WEBGL2_DEFAULT_EXTENSIONS.indexOf(t),"extension "+t+" supported by default in WebGL2"),r.assert(a.WEBGL2_EXTENSIONS.indexOf(t)>-1,"extension "+t+" not available to WebGL2")}return this._extensions.indexOf(t)>-1},e.prototype.enable=function(e){for(var t=0,n=e;t<n.length;t++){var r=n[t];this.isWebGL1&&-1===a.WEBGL1_EXTENSIONS.indexOf(r)||this.isWebGL2&&-1===a.WEBGL2_EXTENSIONS.indexOf(r)||!1!==this.supports(r)&&this.extension(void 0,r)}},e.prototype.queryExtensionSupport=function(){var t=this._context.getSupportedExtensions();if(null!==t){for(var n=0,i=t;n<i.length;n++){var o=i[n];this._mask&&this._mask.extensionsConceal.indexOf(o)>-1||this._extensions.push(o)}this._backend===e.BackendType.WebGL1&&(this.ANGLE_instanced_arrays_supported=this.supports("ANGLE_instanced_arrays"),this.EXT_blend_minmax_supported=this.supports("EXT_blend_minmax"),this.EXT_color_buffer_half_float_supported=this.supports("EXT_color_buffer_half_float"),this.EXT_disjoint_timer_query_supported=this.supports("EXT_disjoint_timer_query"),this.EXT_frag_depth_supported=this.supports("EXT_frag_depth"),this.EXT_sRGB_supported=this.supports("EXT_sRGB"),this.EXT_shader_texture_lod_supported=this.supports("EXT_shader_texture_lod"),this.OES_element_index_uint_supported=this.supports("OES_element_index_uint"),this.OES_standard_derivatives_supported=this.supports("OES_standard_derivatives"),this.OES_texture_float_supported=this.supports("OES_texture_float"),this.OES_texture_half_float_supported=this.supports("OES_texture_half_float"),this.OES_vertex_array_object_supported=this.supports("OES_vertex_array_object"),this.WEBGL_color_buffer_float_supported=this.supports("WEBGL_color_buffer_float"),this.WEBGL_depth_texture_supported=this.supports("WEBGL_depth_texture"),this.WEBGL_draw_buffers_supported=this.supports("WEBGL_draw_buffers")),this._backend===e.BackendType.WebGL2&&(this.EXT_color_buffer_float_supported=this.supports("EXT_color_buffer_float"),this.EXT_disjoint_timer_query_webgl2_supported=this.supports("EXT_disjoint_timer_query_webgl2")),this.EXT_texture_filter_anisotropic_supported=this.supports("EXT_texture_filter_anisotropic"),this.OES_texture_float_linear_supported=this.supports("OES_texture_float_linear"),this.OES_texture_half_float_linear_supported=this.supports("OES_texture_half_float_linear"),this.WEBGL_compressed_texture_astc_supported=this.supports("WEBGL_compressed_texture_astc"),this.WEBGL_compressed_texture_atc_supported=this.supports("WEBGL_compressed_texture_atc"),this.WEBGL_compressed_texture_etc_supported=this.supports("WEBGL_compressed_texture_etc"),this.WEBGL_compressed_texture_etc1_supported=this.supports("WEBGL_compressed_texture_etc1"),this.WEBGL_compressed_texture_pvrtc_supported=this.supports("WEBGL_compressed_texture_pvrtc"),this.WEBGL_compressed_texture_s3tc_supported=this.supports("WEBGL_compressed_texture_s3tc"),this.WEBGL_compressed_texture_s3tc_srgb_supported=this.supports("WEBGL_compressed_texture_s3tc_srgb"),this.WEBGL_debug_renderer_info_supported=this.supports("WEBGL_debug_renderer_info"),this.WEBGL_debug_shaders_supported=this.supports("WEBGL_debug_shaders"),this.WEBGL_lose_context_supported=this.supports("WEBGL_lose_context")}else r.log(r.LogLevel.Error,"querying supported extensions failed (probably blocked)")},e.prototype.extension=function(e,t){return void 0===e&&(r.assert(this.supports(t),"extension "+t+" expected to be supported"),e=this._context.getExtension(t)),e},Object.defineProperty(e.prototype,"allocationRegister",{get:function(){return this._allocationRegister},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"backend",{get:function(){return this._backend},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"backendString",{get:function(){switch(this._backend){case e.BackendType.WebGL1:return"WebGL";case e.BackendType.WebGL2:return"WebGL2";default:return}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extensions",{get:function(){return this._extensions},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"mask",{get:function(){return this._mask},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"gl",{get:function(){return this._context},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"gl2facade",{get:function(){return this._gl2},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isWebGL1",{get:function(){return this._backend===e.BackendType.WebGL1},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isWebGL2",{get:function(){return this._backend===e.BackendType.WebGL2},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsInstancedArrays",{get:function(){return this.ANGLE_instanced_arrays_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"instancedArrays",{get:function(){return this.extension(this.ANGLE_instanced_arrays,"ANGLE_instanced_arrays")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsBlendMinmax",{get:function(){return this.EXT_blend_minmax_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"blendMinmax",{get:function(){return this.extension(this.EXT_blend_minmax,"EXT_blend_minmax")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsColorBufferHalfFloat",{get:function(){return this.EXT_color_buffer_half_float_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"colorBufferHalfFloat",{get:function(){return this.extension(this.EXT_color_buffer_half_float,"EXT_color_buffer_half_float")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsDisjointTimerQuery",{get:function(){return this.EXT_disjoint_timer_query_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"disjointTimerQuery",{get:function(){return this.extension(this.EXT_disjoint_timer_query,"EXT_disjoint_timer_query")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsDisjointTimerQueryWebGL2",{get:function(){return this.EXT_disjoint_timer_query_webgl2_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"disjointTimerQueryWebGL2",{get:function(){return this.extension(this.EXT_disjoint_timer_query_webgl2,"EXT_disjoint_timer_query_webgl2")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsFragDepth",{get:function(){return this.EXT_frag_depth_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fragDepth",{get:function(){return this.extension(this.EXT_frag_depth,"EXT_frag_depth")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsSRGB",{get:function(){return this.EXT_sRGB_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sRGB",{get:function(){return this.extension(this.EXT_sRGB,"EXT_sRGB")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsShaderTextureLOD",{get:function(){return this.EXT_shader_texture_lod_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"shaderTextureLOD",{get:function(){return this.extension(this.EXT_shader_texture_lod,"EXT_shader_texture_lod")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsTextureFilterAnisotropic",{get:function(){return this.EXT_texture_filter_anisotropic_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureFilterAnisotropic",{get:function(){return this.extension(this.EXT_texture_filter_anisotropic,"EXT_texture_filter_anisotropic")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsElementIndexUint",{get:function(){return this.OES_element_index_uint_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"elementIndexUint",{get:function(){return this.extension(this.OES_element_index_uint,"OES_element_index_uint")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsStandardDerivatives",{get:function(){return this.OES_standard_derivatives_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"standardDerivatives",{get:function(){return this.extension(this.OES_standard_derivatives,"OES_standard_derivatives")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsTextureFloat",{get:function(){return this.OES_texture_float_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureFloat",{get:function(){return this.extension(this.OES_texture_float,"OES_texture_float")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsTextureFloatLinear",{get:function(){return this.OES_texture_float_linear_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureFloatLinear",{get:function(){return this.extension(this.OES_texture_float_linear,"OES_texture_float_linear")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsTextureHalfFloat",{get:function(){return this.OES_texture_half_float_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureHalfFloat",{get:function(){return this.extension(this.OES_texture_half_float,"OES_texture_half_float")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsTextureHalfFloatLinear",{get:function(){return this.OES_texture_half_float_linear_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textureHalfFloatLinear",{get:function(){return this.extension(this.OES_texture_half_float_linear,"OES_texture_half_float_linear")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsVertexArrayObject",{get:function(){return this.OES_vertex_array_object_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"vertexArrayObject",{get:function(){return this.extension(this.OES_vertex_array_object,"OES_vertex_array_object")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsColorBufferFloat",{get:function(){switch(this._backend){case e.BackendType.WebGL1:return this.WEBGL_color_buffer_float_supported;case e.BackendType.WebGL2:return this.EXT_color_buffer_float_supported;default:return}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"colorBufferFloat",{get:function(){switch(this._backend){case e.BackendType.WebGL1:return this.extension(this.WEBGL_color_buffer_float,"WEBGL_color_buffer_float");case e.BackendType.WebGL2:return this.extension(this.EXT_color_buffer_float,"EXT_color_buffer_float");default:return}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsCompressedTextureASTC",{get:function(){return this.WEBGL_compressed_texture_astc_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compressedTextureASTC",{get:function(){return this.extension(this.WEBGL_compressed_texture_astc,"WEBGL_compressed_texture_astc")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsCompressedTextureATC",{get:function(){return this.WEBGL_compressed_texture_atc_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compressedTextureATC",{get:function(){return this.extension(this.WEBGL_compressed_texture_atc,"WEBGL_compressed_texture_atc")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsCompressedTextureETC",{get:function(){return this.WEBGL_compressed_texture_etc_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compressedTextureETC",{get:function(){return this.extension(this.WEBGL_compressed_texture_etc,"WEBGL_compressed_texture_etc")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsCompressedTextureETC1",{get:function(){return this.WEBGL_compressed_texture_etc1_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compressedTextureETC1",{get:function(){return this.extension(this.WEBGL_compressed_texture_etc1,"WEBGL_compressed_texture_etc1")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsCompressedTexturePVRTC",{get:function(){return this.WEBGL_compressed_texture_pvrtc_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compressedTexturePVRTC",{get:function(){return this.extension(this.WEBGL_compressed_texture_pvrtc,"WEBGL_compressed_texture_pvrtc")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsCompressedTextureS3TC",{get:function(){return this.WEBGL_compressed_texture_s3tc_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compressedTextureS3TC",{get:function(){return this.extension(this.WEBGL_compressed_texture_s3tc,"WEBGL_compressed_texture_s3tc")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsCompressedTextureS3TCSRGB",{get:function(){return this.WEBGL_compressed_texture_s3tc_srgb_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compressedTextureS3TCSRGB",{get:function(){return this.extension(this.WEBGL_compressed_texture_s3tc_srgb,"WEBGL_compressed_texture_s3tc_srgb")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsDebugRendererInfo",{get:function(){return this.WEBGL_debug_renderer_info_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"debugRendererInfo",{get:function(){return this.extension(this.WEBGL_debug_renderer_info,"WEBGL_debug_renderer_info")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsDebugShaders",{get:function(){return this.WEBGL_debug_shaders_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"debugShaders",{get:function(){return this.extension(this.WEBGL_debug_shaders,"WEBGL_debug_shaders")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsDepthTexture",{get:function(){return this.WEBGL_depth_texture_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"depthTexture",{get:function(){return this.extension(this.WEBGL_depth_texture,"WEBGL_depth_texture")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsDrawBuffers",{get:function(){return this.WEBGL_draw_buffers_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"drawBuffers",{get:function(){return this.extension(this.WEBGL_draw_buffers,"WEBGL_draw_buffers")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsLoseContext",{get:function(){return this.WEBGL_lose_context_supported},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loseContext",{get:function(){return this.extension(this.WEBGL_lose_context,"WEBGL_lose_context")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsBlitFramebuffer",{get:function(){return void 0!==this._context.blitFramebuffer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsReadBuffer",{get:function(){return void 0!==this._context.readBuffer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"supportsTexImage3D",{get:function(){return void 0!==this._context.texImage3D},enumerable:!0,configurable:!0}),e.prototype.hash=function(){return s.ExtensionsHash.encode(this._backend,this._extensions)},e.prototype.about=function(){if(this._backend===e.BackendType.Invalid)return new Array;var t=new Array;t.push(["BACKEND (GLOPERATE)",this.backend]),t.push(["CONTEXT_HASH (GLOPERATE)",this.hash()]),t.push(["RENDERER",this._context.getParameter(this._context.RENDERER)]),t.push(["VENDOR",this._context.getParameter(this._context.VENDOR)]),t.push(["VERSION",this._context.getParameter(this._context.VERSION)]),t.push(["SHADING_LANGUAGE_VERSION",this._context.getParameter(this._context.SHADING_LANGUAGE_VERSION)]),t.push(["UNMASKED_VENDOR_WEBGL",this.supportsDebugRendererInfo?this._context.getParameter(this.debugRendererInfo.UNMASKED_VENDOR_WEBGL):"na"]),t.push(["UNMASKED_RENDERER_WEBGL",this.supportsDebugRendererInfo?this._context.getParameter(this.debugRendererInfo.UNMASKED_RENDERER_WEBGL):"na"]),t.push(["ALPHA (ATTRIBUTE)",String(this.alpha)]),t.push(["ANTIALIAS (ATTRIBUTE)",String(this.antialias)]),t.push(["DEPTH (ATTRIBUTE)",String(this.depth)]),t.push(["FAIL_IF_MAJOR_PERFORMANCE_CAVEAT (ATTRIBUTE)",String(this.failIfMajorPerformanceCaveat)]),t.push(["PREMULTIPLIED_ALPHA (ATTRIBUTE)",String(this.premultipliedAlpha)]),t.push(["PRESERVE_DRAWING_BUFFER (ATTRIBUTE)",String(this.preserveDrawingBuffer)]),t.push(["STENCIL (ATTRIBUTE)",String(this.stencil)]),t.push(["DEVICE_PIXEL_RATIO (WINDOW)",window.devicePixelRatio]),t.push(["APP_CODE_NAME (NAVIGATOR)",window.navigator.appCodeName]),t.push(["APP_NAME (NAVIGATOR)",window.navigator.appName]),t.push(["APP_VERSION (NAVIGATOR)",window.navigator.appVersion]),t.push(["PLATFORM (NAVIGATOR)",window.navigator.platform]),t.push(["HARDWARE_CONCURRENCY (NAVIGATOR)",window.navigator.appCodeName]),t.push(["VENDOR (NAVIGATOR)",window.navigator.vendor]),t.push(["VENDOR_SUB (NAVIGATOR)",window.navigator.vendorSub]),t.push(["MAX_COMBINED_TEXTURE_IMAGE_UNITS",this._context.getParameter(this._context.MAX_COMBINED_TEXTURE_IMAGE_UNITS)]),t.push(["MAX_CUBE_MAP_TEXTURE_SIZE",this._context.getParameter(this._context.MAX_CUBE_MAP_TEXTURE_SIZE)]),t.push(["MAX_FRAGMENT_UNIFORM_VECTORS",this._context.getParameter(this._context.MAX_FRAGMENT_UNIFORM_VECTORS)]),t.push(["MAX_RENDERBUFFER_SIZE",this._context.getParameter(this._context.MAX_RENDERBUFFER_SIZE)]),t.push(["MAX_TEXTURE_IMAGE_UNITS",this._context.getParameter(this._context.MAX_TEXTURE_IMAGE_UNITS)]),t.push(["MAX_TEXTURE_SIZE",this._context.getParameter(this._context.MAX_TEXTURE_SIZE)]),t.push(["MAX_VARYING_VECTORS",this._context.getParameter(this._context.MAX_VARYING_VECTORS)]),t.push(["MAX_VERTEX_ATTRIBS",this._context.getParameter(this._context.MAX_VERTEX_ATTRIBS)]),t.push(["MAX_VERTEX_TEXTURE_IMAGE_UNITS",this._context.getParameter(this._context.MAX_VERTEX_TEXTURE_IMAGE_UNITS)]),t.push(["MAX_VERTEX_UNIFORM_VECTORS",this._context.getParameter(this._context.MAX_VERTEX_UNIFORM_VECTORS)]);var n=this._context.getParameter(this._context.MAX_VIEWPORT_DIMS);if(t.push(["MAX_VIEWPORT_DIMS (WIDTH)",n?n[0]:null]),t.push(["MAX_VIEWPORT_DIMS (HEIGHT)",n?n[1]:null]),this.isWebGL2&&(t.push(["MAX_3D_TEXTURE_SIZE",this._context.getParameter(this._context.MAX_3D_TEXTURE_SIZE)]),t.push(["MAX_ARRAY_TEXTURE_LAYERS",this._context.getParameter(this._context.MAX_ARRAY_TEXTURE_LAYERS)]),t.push(["MAX_CLIENT_WAIT_TIMEOUT_WEBGL",this._context.getParameter(this._context.MAX_CLIENT_WAIT_TIMEOUT_WEBGL)]),t.push(["MAX_COLOR_ATTACHMENTS",this._context.getParameter(this._context.MAX_COLOR_ATTACHMENTS)]),t.push(["MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",this._context.getParameter(this._context.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS)]),t.push(["MAX_COMBINED_UNIFORM_BLOCKS",this._context.getParameter(this._context.MAX_COMBINED_UNIFORM_BLOCKS)]),t.push(["MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",this._context.getParameter(this._context.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS)]),t.push(["MAX_DRAW_BUFFERS",this._context.getParameter(this._context.MAX_DRAW_BUFFERS)]),t.push(["MAX_ELEMENT_INDEX",this._context.getParameter(this._context.MAX_ELEMENT_INDEX)]),t.push(["MAX_ELEMENTS_INDICES",this._context.getParameter(this._context.MAX_ELEMENTS_INDICES)]),t.push(["MAX_ELEMENTS_VERTICES",this._context.getParameter(this._context.MAX_ELEMENTS_VERTICES)]),t.push(["MAX_FRAGMENT_INPUT_COMPONENTS",this._context.getParameter(this._context.MAX_FRAGMENT_INPUT_COMPONENTS)]),t.push(["MAX_FRAGMENT_UNIFORM_BLOCKS",this._context.getParameter(this._context.MAX_FRAGMENT_UNIFORM_BLOCKS)]),t.push(["MAX_FRAGMENT_UNIFORM_COMPONENTS",this._context.getParameter(this._context.MAX_FRAGMENT_UNIFORM_COMPONENTS)]),t.push(["MAX_PROGRAM_TEXEL_OFFSET",this._context.getParameter(this._context.MAX_PROGRAM_TEXEL_OFFSET)]),t.push(["MAX_SAMPLES",this._context.getParameter(this._context.MAX_SAMPLES)]),t.push(["MAX_SERVER_WAIT_TIMEOUT",this._context.getParameter(this._context.MAX_SERVER_WAIT_TIMEOUT)]),t.push(["MAX_TEXTURE_LOD_BIAS",this._context.getParameter(this._context.MAX_TEXTURE_LOD_BIAS)]),t.push(["MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",this._context.getParameter(this._context.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS)]),t.push(["MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",this._context.getParameter(this._context.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS)]),t.push(["MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",this._context.getParameter(this._context.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS)]),t.push(["MAX_UNIFORM_BLOCK_SIZE",this._context.getParameter(this._context.MAX_UNIFORM_BLOCK_SIZE)]),t.push(["MAX_UNIFORM_BUFFER_BINDINGS",this._context.getParameter(this._context.MAX_UNIFORM_BUFFER_BINDINGS)]),t.push(["MAX_VARYING_COMPONENTS",this._context.getParameter(this._context.MAX_VARYING_COMPONENTS)]),t.push(["MAX_VERTEX_OUTPUT_COMPONENTS",this._context.getParameter(this._context.MAX_VERTEX_OUTPUT_COMPONENTS)]),t.push(["MAX_VERTEX_UNIFORM_BLOCKS",this._context.getParameter(this._context.MAX_VERTEX_UNIFORM_BLOCKS)]),t.push(["MAX_VERTEX_UNIFORM_COMPONENTS",this._context.getParameter(this._context.MAX_VERTEX_UNIFORM_COMPONENTS)]),t.push(["MIN_PROGRAM_TEXEL_OFFSET",this._context.getParameter(this._context.MIN_PROGRAM_TEXEL_OFFSET)])),this.isWebGL1)for(var r=0,i=a.WEBGL1_EXTENSIONS;r<i.length;r++){var o=i[r];t.push([o,this.supports(o)?"ok":"na"])}else if(this.isWebGL2){for(var s=0,u=a.WEBGL2_DEFAULT_EXTENSIONS;s<u.length;s++)o=u[s],t.push([o+" (default)","ok"]);for(var c=0,l=a.WEBGL2_EXTENSIONS;c<l.length;c++)o=l[c],t.push([o,this.supports(o)?"ok":"na"])}return t},e.prototype.aboutString=function(){for(var e=this.about(),t=0,n=0,r=e;n<r.length;n++){var i=r[n];t=Math.max(i[0].length,t)}for(var o=0,s="",u=this.isWebGL2?63+a.WEBGL2_DEFAULT_EXTENSIONS.length:-1,c=0,l=e;c<l.length;c++){switch(i=l[c],o){case 2:case 6:case 8:case 15:case 16:case 23:case 35:case 63:case u:s+="\n"}s+="  "+i[0]+" "+"-".repeat(t-i[0].length)+"-- "+i[1]+"\n",++o}return s+"\n"},e.prototype.logAbout=function(e){void 0===e&&(e=r.LogLevel.Info),r.log(e,"context.about\n\n"+this.aboutString())},e.prototype.logAboutIf=function(e,t){void 0===t&&(t=r.LogLevel.Info),r.logIf(e,t,"context.about\n\n"+this.aboutString())},e.DEFAULT_ATTRIBUTES={alpha:!0,antialias:!1,depth:!0,failIfMajorPerformanceCaveat:!1,premultipliedAlpha:!0,preserveDrawingBuffer:!1,stencil:!1},e}();t.Context=c,function(e){!function(e){e.Invalid="invalid",e.WebGL1="webgl1",e.WebGL2="webgl2"}(e.BackendType||(e.BackendType={})),function(e){e.auto="auto",e.webgl="webgl",e.experimental="experimental-webgl",e.webgl1="webgl1",e.experimental1="experimental-webgl1",e.webgl2="webgl2",e.experimental2="experimental-webgl2"}(e.BackendRequestType||(e.BackendRequestType={}))}(c=t.Context||(t.Context={})),t.Context=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(38),o=function(){function e(){}return e.encode64=function(t){return r.assert(t>=0&&t<=63,"expected bitfield in range [ 0b000000, 0b111111 ], given "+t),e.BASE64_ALPHABET[t]},e.decode64=function(t){r.assert(1===t.length,"expected single base64 character, given '"+t+"'");var n=e.BASE64_ALPHABET.indexOf(t);return r.assert(n>-1,"unknown base64 character, given '"+t+"'"),n},e.encode=function(t,n){var i=e.LATEST_VERSION,o=e.EXTENSIONS_BY_VERSION.get(i),a=e.WEBGL_BACKENDS.indexOf(t);r.assert(a>-1,"expected valid backend "+e.WEBGL_BACKENDS+", given "+t+" ");var s=e.encode64(i<<3|a+1);if(0===n.length)return s;for(var u=0,c=0;c<o.length;++c)u|=n.indexOf(o[c])>-1?32>>c%6:0,c%6<5&&c<o.length-1||(s+=e.encode64(u),u=0);return s},e.decode=function(t){var n=e.decode64(t[0]),i=n>>3,o=(7&n)-1;r.assert(o<e.WEBGL_BACKENDS.length,"expected valid backend index, given "+o);var a=e.WEBGL_BACKENDS[o];r.assert(e.EXTENSIONS_BY_VERSION.has(i),"expected valid hash version, given "+i);var s=e.EXTENSIONS_BY_VERSION.get(i),u=Math.ceil(s.length/6)+1;r.assert(t.length===u,"expected hash of version "+i+" to have a length of "+u+", given "+t);for(var c=new Array,l=1;l<t.length;++l){var f=e.decode64(t[l]),h=6*(l-1);32&f&&c.push(s[h+0]),16&f&&c.push(s[h+1]),8&f&&c.push(s[h+2]),4&f&&c.push(s[h+3]),2&f&&c.push(s[h+4]),1&f&&c.push(s[h+5])}return[a,c]},e.complement=function(t,n){var i=e.WEBGL_BACKENDS.indexOf(t);return r.assert(i>-1,"expected valid backend "+e.WEBGL_BACKENDS+", given "+t+" "),e.WEBGL_EXTENSIONS_BY_BACKEND.get(i).filter((function(e){return n.indexOf(e)<0}))},e.WEBGL_BACKENDS=["webgl1","webgl2"],e.WEBGL_EXTENSIONS_BY_BACKEND=new Map([[0,i.WEBGL1_EXTENSIONS],[1,i.WEBGL2_EXTENSIONS]]),e.EXTENSIONS_BY_VERSION=new Map([[0,["ANGLE_instanced_arrays","EXT_blend_minmax","EXT_color_buffer_float","EXT_color_buffer_half_float","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_frag_depth","EXT_shader_texture_lod","EXT_sRGB","EXT_texture_filter_anisotropic","OES_element_index_uint","OES_standard_derivatives","OES_texture_float","OES_texture_float_linear","OES_texture_half_float","OES_texture_half_float_linear","OES_vertex_array_object","WEBGL_color_buffer_float","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_renderer_info","WEBGL_debug_shaders","WEBGL_depth_texture","WEBGL_draw_buffers","WEBGL_lose_context"]]]),e.LATEST_VERSION=0,e.BASE64_ALPHABET="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-+",e}();t.ExtensionsHash=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(0),o=n(77),a=n(29),s=function(){function e(e,t){var n=this;this._pointerLockRequestPending=!1,i.assert(void 0!==e,"expected valid canvas element on initialization, given "+e),this._element=e,this._timeframe=t,this._element.addEventListener("click",(function(){return n.processPointerLockRequests()})),(o.IS_EDGE||o.IS_IE11)&&this._element.addEventListener("dragstart",(function(e){return e.preventDefault()}))}return e.prototype.processPointerLockRequests=function(){this._pointerLockRequestPending&&a.PointerLock.request(this._element)},e.prototype.preventDefaultOnEvent=function(e,t){i.bitInBitfield(this._preventDefaultMask,e)&&t.preventDefault()},e.prototype.preventDefault=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var o=r[n];i.bitInBitfield(this._preventDefaultMask,o)||(this._preventDefaultMask|=o)}},e.prototype.allowDefault=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var o=r[n];i.bitInBitfield(this._preventDefaultMask,o)&&(this._preventDefaultMask&=~o)}},e.prototype.observable=function(t){switch(t){case e.Type.Click:return this.click$;case e.Type.Enter:return this.enter$;case e.Type.Leave:return this.leave$;case e.Type.Down:return this.down$;case e.Type.Up:return this.up$;case e.Type.Move:return this.move$;case e.Type.Wheel:return this.wheel$;case e.Type.Drag:return this.drag$;default:return}},Object.defineProperty(e.prototype,"pointerLock",{get:function(){return a.PointerLock.active(this._element)},set:function(e){this._pointerLockRequestPending=e,!1===e&&(this._pointerLockRequestPending=!1,a.PointerLock.exit())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"click$",{get:function(){var t=this;return void 0===this._clickSubject&&(this._clickSubject=new r.ReplaySubject(void 0,this._timeframe),this._clickListener=function(n){t.preventDefaultOnEvent(e.Type.Click,n),t._clickSubject.next(n)},this._element.addEventListener("click",this._clickListener)),this._clickSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"enter$",{get:function(){var t=this;return void 0===this._enterSubject&&(this._enterSubject=new r.ReplaySubject(void 0,this._timeframe),this._enterListener=function(n){t.preventDefaultOnEvent(e.Type.Enter,n),t._enterSubject.next(n)},this._element.addEventListener("mouseenter",this._enterListener)),this._enterSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"leave$",{get:function(){var t=this;return void 0===this._leaveSubject&&(this._leaveSubject=new r.ReplaySubject(void 0,this._timeframe),this._leaveListener=function(n){t.preventDefaultOnEvent(e.Type.Leave,n),t._leaveSubject.next(n)},this._element.addEventListener("mouseleave",this._leaveListener)),this._leaveSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"down$",{get:function(){var t=this;return void 0===this._downSubject&&(this._downSubject=new r.ReplaySubject(void 0,this._timeframe),this._downListener=function(n){t.preventDefaultOnEvent(e.Type.Down,n),t._downSubject.next(n)},this._element.addEventListener("mousedown",this._downListener)),this._downSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"up$",{get:function(){var t=this;return void 0===this._upSubject&&(this._upSubject=new r.ReplaySubject(void 0,this._timeframe),this._upListener=function(n){t.preventDefaultOnEvent(e.Type.Up,n),t._upSubject.next(n)},this._element.addEventListener("mouseup",this._upListener)),this._upSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"move$",{get:function(){var t=this;return void 0===this._moveSubject&&(this._moveSubject=new r.ReplaySubject(void 0,this._timeframe),this._moveListener=function(n){t.preventDefaultOnEvent(e.Type.Move,n),t._moveSubject.next(n)},this._element.addEventListener("mousemove",this._moveListener)),this._moveSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wheel$",{get:function(){var t=this;return void 0===this._wheelSubject&&(this._wheelSubject=new r.ReplaySubject(void 0,this._timeframe),this._wheelListener=function(n){t.preventDefaultOnEvent(e.Type.Wheel,n),t._wheelSubject.next(n)},this._element.addEventListener("wheel",this._wheelListener)),this._wheelSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"drag$",{get:function(){var t=this;return void 0===this._dragSubject&&(this._dragSubject=new r.ReplaySubject(void 0,this._timeframe),this._dragListener=function(n){t.preventDefaultOnEvent(e.Type.Drag,n),t._dragSubject.next(n)},this._element.addEventListener("drag",this._dragListener)),this._dragSubject.asObservable()},enumerable:!0,configurable:!0}),e}();t.MouseEventProvider=s,function(e){!function(e){e[e.Click=1]="Click",e[e.Wheel=2]="Wheel",e[e.Enter=4]="Enter",e[e.Leave=8]="Leave",e[e.Move=16]="Move",e[e.Down=32]="Down",e[e.Up=64]="Up",e[e.Drag=128]="Drag"}(e.Type||(e.Type={}))}(s=t.MouseEventProvider||(t.MouseEventProvider={})),t.MouseEventProvider=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(){}return e.queryAndCacheAPI=function(){if(void 0===e._exit){for(var t=window.document,n=[t.exitPointerLock,t.mozExitPointerLock,t.webkitExitPointerLock,void 0],i=0;i<n.length&&void 0===n[i];++i);switch(i){case 0:e._exit=function(){return t.exitPointerLock()},e._request=function(e){return e.requestPointerLock()},e._element=function(){return t.pointerLockElement};break;case 1:e._exit=function(){return t.mozCancelPointerLock()},e._request=function(e){return e.mozRequestPointerLock()},e._element=function(){return t.mozPointerLockElement};break;case 2:e._exit=function(){return t.webkitExitPointerLock()},e._request=function(e){return e.webkitRequestPointerLock()},e._element=function(){return t.webkitPointerLockElement};break;default:r.assert(!1,"none of the following pointer lock apis was found: native, moz, or webkit")}}},e.active=function(t){return void 0!==this._element&&(void 0!==t&&e._element()===t||void 0===t&&void 0!==e._element()&&null!==e._element())},e.request=function(t,n){void 0!==t&&(e.queryAndCacheAPI(),e.active()&&e._element()!==t&&e._exit(),e.active()||e._request(t))},e.exit=function(){e._exit&&e._exit()},e}();t.PointerLock=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(0),o=function(){function e(e,t){i.assert(void 0!==e,"expected valid canvas element on initialization, given "+e),this._element=e,this._timeframe=t}return e.prototype.preventDefaultOnEvent=function(e,t){i.bitInBitfield(this._preventDefaultMask,e)&&t.preventDefault()},e.prototype.preventDefault=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var o=r[n];i.bitInBitfield(this._preventDefaultMask,o)||(this._preventDefaultMask|=o)}},e.prototype.allowDefault=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var o=r[n];i.bitInBitfield(this._preventDefaultMask,o)&&(this._preventDefaultMask&=~o)}},e.prototype.observable=function(t){switch(t){case e.Type.Start:return this.start$;case e.Type.End:return this.end$;case e.Type.Move:return this.move$;case e.Type.Cancel:return this.cancel$}return i.assert(!1,"Encountered unknown touch event."),new r.Observable},Object.defineProperty(e.prototype,"start$",{get:function(){var t=this;return void 0===this._startSubject&&(this._startSubject=new r.ReplaySubject(void 0,this._timeframe),this._startListener=function(n){t.preventDefaultOnEvent(e.Type.Start,n),t._startSubject.next(n)},this._element.addEventListener("touchstart",this._startListener)),this._startSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"end$",{get:function(){var t=this;return void 0===this._endSubject&&(this._endSubject=new r.ReplaySubject(void 0,this._timeframe),this._endListener=function(n){t.preventDefaultOnEvent(e.Type.End,n),t._endSubject.next(n)},this._element.addEventListener("touchend",this._endListener)),this._endSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"move$",{get:function(){var t=this;return void 0===this._moveSubject&&(this._moveSubject=new r.ReplaySubject(void 0,this._timeframe),this._moveListener=function(n){t.preventDefaultOnEvent(e.Type.Move,n),t._moveSubject.next(n)},this._element.addEventListener("touchmove",this._moveListener)),this._moveSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cancel$",{get:function(){var t=this;return void 0===this._cancelSubject&&(this._cancelSubject=new r.ReplaySubject(void 0,this._timeframe),this._cancelListener=function(n){t.preventDefaultOnEvent(e.Type.Cancel,n),t._cancelSubject.next(n)},this._element.addEventListener("touchcancel",this._cancelListener)),this._cancelSubject.asObservable()},enumerable:!0,configurable:!0}),e}();t.TouchEventProvider=o,function(e){!function(e){e[e.Start=1]="Start",e[e.End=2]="End",e[e.Move=4]="Move",e[e.Cancel=8]="Cancel"}(e.Type||(e.Type={}))}(o=t.TouchEventProvider||(t.TouchEventProvider={})),t.TouchEventProvider=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(0),o=n(28),a=n(30),s=function(){function e(e,t,n){this._subscriptions=new Array,this._latestMouseEventsByType=new Map,this._previousMouseEventsByType=new Map,this._mouseEventHandlerByType=new Map,this._latestTouchEventsByType=new Map,this._previousTouchEventsByType=new Map,this._touchEventHandlerByType=new Map,this._invalidate=e,this._mouseEventProvider=t,this._touchEventProvider=n}return e.prototype.invalidate=function(e){void 0===e&&(e=!1),this._invalidate&&this._invalidate(e)},e.prototype.pushMouseEventHandler=function(e,t){var n=this;if(this._mouseEventHandlerByType.has(e))this._mouseEventHandlerByType.get(e).push(t);else{this._mouseEventHandlerByType.set(e,new Array),this._previousMouseEventsByType.set(e,new Array);var r=new Array;this._latestMouseEventsByType.set(e,r),i.assert(void 0!==this._mouseEventProvider,"expected valid mouse event provider");var a=this._mouseEventProvider.observable(e);switch(e){case o.MouseEventProvider.Type.Wheel:default:this._subscriptions.push(a.subscribe((function(e){r.push(e),n.invalidate()})))}this._mouseEventHandlerByType.get(e).push(t)}},e.prototype.invokeMouseEventHandler=function(e){var t=this._mouseEventHandlerByType.get(e);if(void 0!==t&&0!==t.length){var n=this._latestMouseEventsByType.get(e);if(0!==n.length){var r=this._previousMouseEventsByType.get(e);t.forEach((function(e){return e(n,r)})),Object.assign(r,n),n.length=0}}},e.prototype.pushTouchEventHandler=function(e,t){var n=this;if(this._touchEventHandlerByType.has(e))this._touchEventHandlerByType.get(e).push(t);else{this._touchEventHandlerByType.set(e,new Array),this._previousTouchEventsByType.set(e,new Array);var r=new Array;this._latestTouchEventsByType.set(e,r),i.assert(void 0!==this._touchEventProvider,"expected valid touch event provider");var o=this._touchEventProvider.observable(e);this._subscriptions.push(o.subscribe((function(e){r.push(e),n.invalidate()}))),this._touchEventHandlerByType.get(e).push(t)}},e.prototype.invokeTouchEventHandler=function(e){var t=this._touchEventHandlerByType.get(e);if(void 0!==t&&0!==t.length){var n=this._latestTouchEventsByType.get(e);if(0!==n.length){var r=this._previousTouchEventsByType.get(e);t.forEach((function(e){return e(n,r)})),Object.assign(r,n),n.length=0}}},e.prototype.dispose=function(){this._latestMouseEventsByType.forEach((function(e){return e.length=0})),this._previousMouseEventsByType.forEach((function(e){return e.length=0})),this._latestTouchEventsByType.forEach((function(e){return e.length=0})),this._previousTouchEventsByType.forEach((function(e){return e.length=0}));for(var e=0,t=this._subscriptions;e<t.length;e++)t[e].unsubscribe()},e.prototype.update=function(){this.invokeMouseEventHandler(o.MouseEventProvider.Type.Click),this.invokeMouseEventHandler(o.MouseEventProvider.Type.Enter),this.invokeMouseEventHandler(o.MouseEventProvider.Type.Leave),this.invokeMouseEventHandler(o.MouseEventProvider.Type.Down),this.invokeMouseEventHandler(o.MouseEventProvider.Type.Up),this.invokeMouseEventHandler(o.MouseEventProvider.Type.Move),this.invokeMouseEventHandler(o.MouseEventProvider.Type.Wheel),this.invokeTouchEventHandler(a.TouchEventProvider.Type.Start),this.invokeTouchEventHandler(a.TouchEventProvider.Type.End),this.invokeTouchEventHandler(a.TouchEventProvider.Type.Move),this.invokeTouchEventHandler(a.TouchEventProvider.Type.Cancel)},e.prototype.offsets=function(e,t){void 0===t&&(t=!0);var n=new Array,i=!1;if(e instanceof MouseEvent)i=0!==(o=e).offsetX&&0!==o.offsetY,n.push(i?r.vec2.fromValues(o.offsetX,o.offsetY):r.vec2.fromValues(o.clientX,o.clientY));else if(e instanceof WheelEvent)i=0!==(o=e).offsetX&&0!==o.offsetY,n.push(i?r.vec2.fromValues(o.offsetX,o.offsetY):r.vec2.fromValues(o.clientX,o.clientY));else if(e instanceof TouchEvent)for(var o=e,a=0;a<o.touches.length;++a){var s=o.touches.item(a);n.push(r.vec2.fromValues(s.clientX,s.clientY))}if(i){if(t)for(var u=0,c=n;u<c.length;u++){var l=c[u];r.vec2.scale(l,l,window.devicePixelRatio)}return n}for(var f=(e.target||e.currentTarget||e.srcElement).getBoundingClientRect(),h=0,d=n;h<d.length;h++)(l=d[h])[0]=Math.floor(l[0]-f.left),l[1]=Math.floor(l[1]-f.top),t&&r.vec2.scale(l,l,window.devicePixelRatio);return n},e.prototype.pushClickHandler=function(e){this.pushMouseEventHandler(o.MouseEventProvider.Type.Click,e)},e.prototype.pushMouseEnterHandler=function(e){this.pushMouseEventHandler(o.MouseEventProvider.Type.Enter,e)},e.prototype.pushMouseLeaveHandler=function(e){this.pushMouseEventHandler(o.MouseEventProvider.Type.Leave,e)},e.prototype.pushMouseDownHandler=function(e){this.pushMouseEventHandler(o.MouseEventProvider.Type.Down,e)},e.prototype.pushMouseUpHandler=function(e){this.pushMouseEventHandler(o.MouseEventProvider.Type.Up,e)},e.prototype.pushMouseMoveHandler=function(e){this.pushMouseEventHandler(o.MouseEventProvider.Type.Move,e)},e.prototype.pushMouseWheelHandler=function(e){this.pushMouseEventHandler(o.MouseEventProvider.Type.Wheel,e)},e.prototype.pushTouchStartHandler=function(e){this.pushTouchEventHandler(a.TouchEventProvider.Type.Start,e)},e.prototype.pushTouchEndHandler=function(e){this.pushTouchEventHandler(a.TouchEventProvider.Type.End,e)},e.prototype.pushTouchMoveHandler=function(e){this.pushTouchEventHandler(a.TouchEventProvider.Type.Move,e)},e.prototype.pushTouchCancelHandler=function(e){this.pushTouchEventHandler(a.TouchEventProvider.Type.Cancel,e)},e.prototype.requestPointerLock=function(){this._mouseEventProvider&&(this._mouseEventProvider.pointerLock=!0)},e.prototype.exitPointerLock=function(){this._mouseEventProvider&&(this._mouseEventProvider.pointerLock=!1)},e}();t.EventHandler=s},function(e,t,n){"use strict";var r,i=n(40);!function(e){var t=function(e,t){return"fetching '"+e+"' failed ("+t.status+"): "+t.statusText};e.fetchAsync=function(e,n){return new Promise((function(r,i){var o=new XMLHttpRequest;o.open("GET",e,!0),o.responseType=n,o.onload=function(){o.status<200||o.status>=300?i(t(e,o)):r(o.response)},o.onerror=function(){return i(t(e,o))},o.ontimeout=function(){return i(t(e,o))},o.send()}))},e.fetchJsonAsync=function(e,n,r){return new Promise((function(o,a){var s=new XMLHttpRequest;s.open("GET",e,!0),s.onload=function(){if(s.status<200||s.status>=300)a(t(e,s));else{var u=s.responseText;if(void 0===r||i.validate(u,r)){var c;try{c=JSON.parse(u)}catch(t){return void a("fetching '"+e+"' failed ("+t.name+"): "+t.message)}var l=n(c);void 0!==l?o(l):a("fetching '"+e+"' failed (TransformError): transforming the object failed.")}}},s.onerror=function(){return a(t(e,s))},s.ontimeout=function(){return a(t(e,s))},s.send()}))}}(r||(r={})),e.exports=r},function(e,t,n){"use strict";var r=n(82),i=n(85);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=b,t.resolve=function(e,t){return b(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?b(e,!1,!0).resolveObject(t):t},t.format=function(e){return i.isString(e)&&(e=b(e)),e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(c),f=["%","/","?",";","#"].concat(l),h=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,_={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=n(86);function b(e,t,n){if(e&&i.isObject(e)&&e instanceof o)return e;var r=new o;return r.parse(e,t,n),r}o.prototype.parse=function(e,t,n){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),s=-1!==o&&o<e.indexOf("#")?"?":"#",c=e.split(s);c[0]=c[0].replace(/\\/g,"/");var b=e=c.join(s);if(b=b.trim(),!n&&1===e.split("#").length){var y=u.exec(b);if(y)return this.path=b,this.href=b,this.pathname=y[1],y[2]?(this.search=y[2],this.query=t?g.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=a.exec(b);if(x){var E=(x=x[0]).toLowerCase();this.protocol=E,b=b.substr(x.length)}if(n||x||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var T="//"===b.substr(0,2);!T||x&&m[x]||(b=b.substr(2),this.slashes=!0)}if(!m[x]&&(T||x&&!v[x])){for(var w,A,M=-1,O=0;O<h.length;O++)-1!==(R=b.indexOf(h[O]))&&(-1===M||R<M)&&(M=R);for(-1!==(A=-1===M?b.lastIndexOf("@"):b.lastIndexOf("@",M))&&(w=b.slice(0,A),b=b.slice(A+1),this.auth=decodeURIComponent(w)),M=-1,O=0;O<f.length;O++){var R;-1!==(R=b.indexOf(f[O]))&&(-1===M||R<M)&&(M=R)}-1===M&&(M=b.length),this.host=b.slice(0,M),b=b.slice(M),this.parseHost(),this.hostname=this.hostname||"";var S="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!S)for(var P=this.hostname.split(/\./),L=(O=0,P.length);O<L;O++){var F=P[O];if(F&&!F.match(d)){for(var I="",C=0,N=F.length;C<N;C++)F.charCodeAt(C)>127?I+="x":I+=F[C];if(!I.match(d)){var j=P.slice(0,O),D=P.slice(O+1),B=F.match(p);B&&(j.push(B[1]),D.unshift(B[2])),D.length&&(b="/"+D.join(".")+b),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),S||(this.hostname=r.toASCII(this.hostname));var U=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+U,this.href+=this.host,S&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!_[E])for(O=0,L=l.length;O<L;O++){var k=l[O];if(-1!==b.indexOf(k)){var G=encodeURIComponent(k);G===k&&(G=escape(k)),b=b.split(k).join(G)}}var q=b.indexOf("#");-1!==q&&(this.hash=b.substr(q),b=b.slice(0,q));var V=b.indexOf("?");if(-1!==V?(this.search=b.substr(V),this.query=b.substr(V+1),t&&(this.query=g.parse(this.query)),b=b.slice(0,V)):t&&(this.search="",this.query={}),b&&(this.pathname=b),v[E]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"";var H=this.search||"";this.path=U+H}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",o=!1,a="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(a=g.stringify(this.query));var s=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==o?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+o+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+r},o.prototype.resolve=function(e){return this.resolveObject(b(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var n=new o,r=Object.keys(this),a=0;a<r.length;a++){var s=r[a];n[s]=this[s]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),c=0;c<u.length;c++){var l=u[c];"protocol"!==l&&(n[l]=e[l])}return v[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!v[e.protocol]){for(var f=Object.keys(e),h=0;h<f.length;h++){var d=f[h];n[d]=e[d]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||m[e.protocol])n.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),n.pathname=p.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var _=n.pathname||"",g=n.search||"";n.path=_+g}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var b=n.pathname&&"/"===n.pathname.charAt(0),y=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=y||b||n.host&&e.pathname,E=x,T=n.pathname&&n.pathname.split("/")||[],w=(p=e.pathname&&e.pathname.split("/")||[],n.protocol&&!v[n.protocol]);if(w&&(n.hostname="",n.port=null,n.host&&(""===T[0]?T[0]=n.host:T.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),x=x&&(""===p[0]||""===T[0])),y)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,T=p;else if(p.length)T||(T=[]),T.pop(),T=T.concat(p),n.search=e.search,n.query=e.query;else if(!i.isNullOrUndefined(e.search))return w&&(n.hostname=n.host=T.shift(),(S=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=S.shift(),n.host=n.hostname=S.shift())),n.search=e.search,n.query=e.query,i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!T.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var A=T.slice(-1)[0],M=(n.host||e.host||T.length>1)&&("."===A||".."===A)||""===A,O=0,R=T.length;R>=0;R--)"."===(A=T[R])?T.splice(R,1):".."===A?(T.splice(R,1),O++):O&&(T.splice(R,1),O--);if(!x&&!E)for(;O--;O)T.unshift("..");!x||""===T[0]||T[0]&&"/"===T[0].charAt(0)||T.unshift(""),M&&"/"!==T.join("/").substr(-1)&&T.push("");var S,P=""===T[0]||T[0]&&"/"===T[0].charAt(0);return w&&(n.hostname=n.host=P?"":T.length?T.shift():"",(S=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=S.shift(),n.host=n.hostname=S.shift())),(x=x||n.host&&T.length)&&!P&&T.unshift(""),T.length?n.pathname=T.join("/"):(n.pathname=null,n.path=null),i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,n){"use strict";var r=n(33),i=n(13);function o(e,t){this.id=e,this.ref=t}e.exports.SchemaScanResult=o,e.exports.scan=function(e,t){function n(e,t){if(t&&"object"==typeof t)if(t.$ref){var o=r.resolve(e,t.$ref);c[o]=c[o]?c[o]+1:0}else{var l=t.id?r.resolve(e,t.id):e;if(l){if(l.indexOf("#")<0&&(l+="#"),u[l]){if(!i.deepCompareStrict(u[l],t))throw new Error("Schema <"+l+"> already exists with different definition");return u[l]}u[l]=t,"#"==l[l.length-1]&&(u[l.substring(0,l.length-1)]=t)}a(l+"/items",Array.isArray(t.items)?t.items:[t.items]),a(l+"/extends",Array.isArray(t.extends)?t.extends:[t.extends]),n(l+"/additionalItems",t.additionalItems),s(l+"/properties",t.properties),n(l+"/additionalProperties",t.additionalProperties),s(l+"/definitions",t.definitions),s(l+"/patternProperties",t.patternProperties),s(l+"/dependencies",t.dependencies),a(l+"/disallow",t.disallow),a(l+"/allOf",t.allOf),a(l+"/anyOf",t.anyOf),a(l+"/oneOf",t.oneOf),n(l+"/not",t.not)}}function a(e,t){if(Array.isArray(t))for(var r=0;r<t.length;r++)n(e+"/"+r,t[r])}function s(e,t){if(t&&"object"==typeof t)for(var r in t)n(e+"/"+r,t[r])}var u={},c={};return n(e,t),new o(u,c)}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(){function e(e,t,n,r){void 0===n&&(n=1),void 0===r&&(r=1),this._components=e,this._width=isNaN(t)?1:Math.max(1,t),this._height=Math.max(1,n),this._depth=Math.max(1,r),this.resize()}return e.prototype.get=function(e,t,n){var r;switch(r=void 0===t&&void 0===n?this._components*e:this.index(e,t,n||0),o.assert(r<this.length,"index expected to be in range [0, "+(this.length-1)+"], given "+r),this._components){case 1:return[this._samples[r]];case 2:return[this._samples[r],this._samples[r+1]];case 3:return[this._samples[r],this._samples[r+1],this._samples[r+2]];case 4:return[this._samples[r],this._samples[r+1],this._samples[r+2],this._samples[r+3]]}},e.prototype.set=function(e,t,n,r){var i;switch(o.assert(e.length===this._components,"number of components expected to be "+this._components+", given "+e.length),i=void 0===n&&void 0===r?this._components*Math.min(this.elements,Math.max(0,t)):this._components*this.index(t,n,r||0),o.assert(i<this.length,"index expected to be in range [0, "+(this.length-1)+"], given "+i),this._components){case 4:this._samples[i+3]=e[3];case 3:this._samples[i+2]=e[2];case 2:this._samples[i+1]=e[1];case 1:this._samples[i+0]=e[0]}},e.prototype.fromJSON=function(e){o.assert(e.size&&void 0!==e.size.width&&void 0!==e.size.height&&void 0!==e.size.depth,"expected kernel width, height, and depth to be set, given '"+e.size+"'");var t=function(e){return e.reduce((function(e,n){return e.concat(Array.isArray(n)?t(n):n)}),[])};this._width=Math.max(1,e.size.width),this._height=Math.max(1,e.size.height),this._depth=Math.max(1,e.size.depth);var n=t(e.kernel);this._components=Math.floor(n.length/this.elements),this.resize(),this.fromArray(n)},e.prototype.index=function(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=0),this._width*(this._height*Math.min(this._depth,Math.max(0,n))+Math.min(this._height,Math.max(0,t)))+Math.min(this._width,Math.max(0,e))},e.prototype.position=function(e){var t=Math.min(this.elements,Math.max(0,e)),n=Math.floor(t/(this._width*this._height));t-=n*this._width*this._height;var r=Math.floor(t/this._width);return[t-=r*this._width,r,n]},e.prototype.sort=function(t){if(!(this.elements<2)){for(var n=Array(this.elements),r=0;r<this.elements;++r){var i=0;switch(t){default:case e.SortApproach.BySquaredLength:for(var o=0;o<this._components;++o){var a=this._samples[r*this._components+o];i+=a*a}}n[r]=[r,i]}switch(t){default:case e.SortApproach.BySquaredLength:n.sort((function(e,t){return e[1]-t[1]}))}var s=this._samples.slice();for(r=0;r<n.length;++r)for(o=0;o<this._components;++o){var u=n[r][0]*this._components+o,c=r*this._components+o;this._samples[c]=s[u]}}},Object.defineProperty(e.prototype,"samples",{get:function(){return this._samples},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._width*this._height*this._depth*this._components},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"elements",{get:function(){var e=this._width*this._height*this._depth;return isNaN(e)?0:e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"components",{get:function(){return this._components},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"depth",{get:function(){return this._depth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"xStride",{get:function(){return this.bytesPerComponent*this._components},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yStride",{get:function(){return this.bytesPerComponent*this._components*this._width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"zStride",{get:function(){return this.bytesPerComponent*this._components*this._width*this._depth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bytesLength",{get:function(){return this.bytesPerComponent*this._components*this._width*this._height*this._depth},enumerable:!0,configurable:!0}),e}();t.AbstractKernel=a,function(e){!function(e){e[e.BySquaredLength=0]="BySquaredLength"}(e.SortApproach||(e.SortApproach={}))}(a=t.AbstractKernel||(t.AbstractKernel={})),t.AbstractKernel=a;var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.resize=function(){this._samples=new Float32Array(this.length)},t.prototype.fromArray=function(e){o.assert(e.length===this.length,"expected samples length to match this kernel's length"),this._samples.set(new Float32Array(e))},Object.defineProperty(t.prototype,"bytesPerComponent",{get:function(){return 4},enumerable:!0,configurable:!0}),t}(a);t.KernelF32=s;var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.resize=function(){this._samples=new Uint32Array(this.length)},t.prototype.fromArray=function(e){o.assert(e.length===this.length,"expected samples length to match this kernel's length"),this._samples.set(new Uint32Array(e))},Object.defineProperty(t.prototype,"bytesPerComponent",{get:function(){return 4},enumerable:!0,configurable:!0}),t}(a);t.KernelUI32=u;var c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.resize=function(){this._samples=new Int32Array(this.length)},t.prototype.fromArray=function(e){o.assert(e.length===this.length,"expected samples length to match this kernel's length"),this._samples.set(new Int32Array(e))},Object.defineProperty(t.prototype,"bytesPerComponent",{get:function(){return 4},enumerable:!0,configurable:!0}),t}(a);t.KernelI32=c;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.resize=function(){this._samples=new Uint8Array(this.length)},t.prototype.fromArray=function(e){o.assert(e.length===this.length,"expected samples length to match this kernel's length"),this._samples.set(new Uint8Array(e))},Object.defineProperty(t.prototype,"bytesPerComponent",{get:function(){return 4},enumerable:!0,configurable:!0}),t}(a);t.KernelUI8=l;var f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.resize=function(){this._samples=new Int8Array(this.length)},t.prototype.fromArray=function(e){o.assert(e.length===this.length,"expected samples length to match this kernel's length"),this._samples.set(new Int8Array(e))},Object.defineProperty(t.prototype,"bytesPerComponent",{get:function(){return 4},enumerable:!0,configurable:!0}),t}(a);t.KernelI8=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this._type=e}return Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),e}();t.SceneNodeComponent=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(27),o=function(){function e(){this._extensionsStrive=new Array,this._extensionsConceal=new Array,this._functionsUndefine=new Array}return e.fromHash=function(t){var n=new e,r=i.ExtensionsHash.decode(t);return n._backend=r[0],n._extensionsStrive=r[1],n._extensionsConceal=i.ExtensionsHash.complement(n._backend,n._extensionsStrive),n},e.fromPreset=function(t){for(var n,o=new e,a=new Array,s=0,u=e.presets();s<u.length;s++){var c=u[s];if(a.push(c.identifier),c.identifier===t){n=c;break}}if(void 0===n)return r.assert(!1,"expected valid identifier, available ['"+a.join("', '")+"'], given '"+t+"'"),o;if(void 0!==(n=n).extensions_hash){var l=i.ExtensionsHash.decode(n.extensions_hash);o._backend=l[0],o._extensionsStrive=l[1]}else o._backend=n.backend;return r.assert(void 0!==o._backend,"expected backend to be included in preset"),void 0===n.extensions_strive?(o._extensionsStrive=[],o._extensionsConceal=n.extensions_conceal?n.extensions_conceal:[]):(o._extensionsStrive=n.extensions_strive,o._extensionsConceal=i.ExtensionsHash.complement(o._backend,n.extensions_strive)),o._functionsUndefine=n.functions_undefine?n.functions_undefine:[],o},e.fromGET=function(){var t=r.GETparameter("msqrd_h");if(void 0!==t)return e.fromHash(t);var n=r.GETparameter("msqrd_p");return void 0!==n?e.fromPreset(n):void 0},e.presets=function(){return this.MASQUERADE_JSON},Object.defineProperty(e.prototype,"backend",{get:function(){return this._backend},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extensionsStrive",{get:function(){return this._extensionsStrive},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extensionsConceal",{get:function(){return this._extensionsConceal},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"functionsUndefine",{get:function(){return this._functionsUndefine},enumerable:!0,configurable:!0}),e.MASQUERADE_JSON=n(74),e}();t.ContextMasquerade=o},function(e,t,n){"use strict";var r;!function(e){e.WEBGL1_EXTENSIONS=["ANGLE_instanced_arrays","EXT_blend_minmax","EXT_color_buffer_half_float","EXT_disjoint_timer_query","EXT_frag_depth","EXT_sRGB","EXT_shader_texture_lod","EXT_texture_filter_anisotropic","OES_element_index_uint","OES_standard_derivatives","OES_texture_float","OES_texture_float_linear","OES_texture_half_float","OES_texture_half_float_linear","OES_vertex_array_object","WEBGL_color_buffer_float","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_renderer_info","WEBGL_debug_shaders","WEBGL_depth_texture","WEBGL_draw_buffers","WEBGL_lose_context"],e.WEBGL2_EXTENSIONS=["EXT_color_buffer_float","EXT_disjoint_timer_query_webgl2","EXT_texture_filter_anisotropic","OES_texture_float_linear","OES_texture_half_float_linear","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_renderer_info","WEBGL_debug_shaders","WEBGL_lose_context"],e.WEBGL2_DEFAULT_EXTENSIONS=["ANGLE_instanced_arrays","EXT_blend_minmax","EXT_frag_depth","EXT_sRGB","EXT_shader_texture_lod","OES_element_index_uint","OES_standard_derivatives","OES_texture_float","OES_texture_half_float","OES_vertex_array_object","WEBGL_depth_texture","WEBGL_draw_buffers"]}(r||(r={})),e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(0),o=n(3),a=function(){function e(){this._batchSize=1,this._multiFrameNumber=1,this._multiFrameNumberSubject=new r.ReplaySubject(1),this._debugFrameNumber=0,this._debugFrameNumberSubject=new r.ReplaySubject(1),this._frameNumber=0,this._frameNumberSubject=new r.ReplaySubject(1),this._pendingRequest=0,this._pause=!1,this._block=!1,this._blockedUpdates=0,this._intermediateFrameCount=0,this._multiFrameCount=0,this._intermediateFrameTimes=new Array(2),this._multiTime=[0,0]}return Object.defineProperty(e.prototype,"debug",{set:function(t){t&&i.logVerbosity()<i.LogLevel.Debug&&(i.logVerbosity(i.LogLevel.Debug),i.log(i.LogLevel.Debug,"changed log verbosity to "+i.LogLevel.Debug+" (debug)")),e._debug=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"batch",{set:function(e){i.log(i.LogLevel.Warning,"(adaptive) batch multi-frame rendering is experimental for now"),this._batchSize=Math.max(1,e)},enumerable:!0,configurable:!0}),e.prototype.request=function(t){var n=this;if(0===this._pendingRequest)if(!this._pause&&this._controllable){i.logIf(e._debug,i.LogLevel.Debug,"c request           | intermediates: #"+this._frameNumber);var r=this._debugFrameNumber,o=this._multiFrameNumber;i.assert(r<=o,"debug-frame number exceeds multi-frame number"),i.assert(0===this._pendingRequest,"another request is pending, cannot invoke multiple requests"),r>0&&this._frameNumber>=r&&this.pause();var a=Math.max((r>0?r:o)-this._frameNumber,0);void 0!==t?this._pendingRequest=window.requestAnimationFrame((function(){return n.invoke(t)})):a>0?this._pendingRequest=window.requestAnimationFrame((function(){return n.invoke(e.RequestType.Frame)})):r!==o&&0!==r||++this._multiFrameCount}else i.logIf(e._debug,i.LogLevel.Debug,"c request (ignored) | pending: '"+this._pendingRequest+"'");else i.logIf(e._debug,i.LogLevel.Debug,"c request (ignored) | pending: '"+this._pendingRequest+"'")},e.prototype.reset=function(){var t=this._block||0===this._frameNumber&&this._pendingRequest;return i.logIf(e._debug,i.LogLevel.Debug,"c update  "+(t?"(blocked) ":"          ")+"| pending: '"+this._pendingRequest+"', intermediates: #"+this._frameNumber),t?(++this._blockedUpdates,!0):(this.cancel(),!1)},e.prototype.cancel=function(){0!==this._pendingRequest?(i.logIf(e._debug,i.LogLevel.Debug,"c cancel            | pending: '"+this._pendingRequest+"'"),window.cancelAnimationFrame(this._pendingRequest),this._pendingRequest=0):i.logIf(e._debug,i.LogLevel.Debug,"c cancel  (ignored) |")},e.prototype.invoke=function(t){switch(i.assert(0!==this._pendingRequest,"manual/explicit invocation not anticipated"),i.assert(void 0!==this._controllable,"expected valid controllable for invocation"),this._pendingRequest=0,t){case e.RequestType.Update:this.invokeUpdate(!1);break;case e.RequestType.NonOptionalUpdate:this.invokeUpdate(!0);break;case e.RequestType.Prepare:this.invokePrepare();break;case e.RequestType.Frame:this.invokeFrame()}},e.prototype.invokeUpdate=function(t){void 0===t&&(t=!1),i.logIf(e._debug,i.LogLevel.Debug,"c invoke update     | pending: '"+this._pendingRequest+"', mfnum: "+this._multiFrameNumber),this.unblock(),i.assert(!this._pause,"updates should not be invoked when paused");var n=this._controllable.update(this._multiFrameNumber);t||n?this.invokePrepare():this.invokeFrame()},e.prototype.invokePrepare=function(){i.logIf(e._debug,i.LogLevel.Debug,"c invoke prepare    |"),this._frameNumber=0,this._pause=!1,this._pauseTime=void 0,this._multiFrameTime=0,this._intermediateFrameTimes[0]=Number.MAX_VALUE,this._intermediateFrameTimes[1]=Number.MIN_VALUE,this._multiTime[0]=performance.now(),this._controllable.prepare(),this._multiTime[1]=performance.now();var t=this._multiTime[1]-this._multiTime[0];this._multiFrameTime=t,this._updateFrameTime=t,this.invokeFrame()},e.prototype.invokeFrame=function(){i.assert(!this._pause,"frames should not be invoked when paused"),i.logIf(e._debug,i.LogLevel.Debug,"c invoke frame      | pending: '"+this._pendingRequest+"'");var t=this._debugFrameNumber,n=this._multiFrameNumber;if(this._frameNumber!==n){var r=t>0;i.assert(!r||this._frameNumber<t,"frame number about to exceed debug-frame number"),i.assert(void 0!==this._controllable,"update invoked without controllable set");var o=performance.now(),a=Math.min(this._multiFrameNumber,this._frameNumber+this._batchSize);for(this._debugFrameNumber>0&&(a=Math.min(a,this._debugFrameNumber));this._frameNumber<a;++this._frameNumber)i.logIf(e._debug,i.LogLevel.Debug,"c -> frame          | frame: "+this._frameNumber),this._controllable.frame(this._frameNumber),++this._intermediateFrameCount;i.logIf(e._debug,i.LogLevel.Debug,"c -> swap           |"),this._controllable.swap(),this._multiTime[1]=performance.now();var s=this._multiTime[1]-o;this._multiFrameTime+=s,this._intermediateFrameTimes[0]=Math.min(this._intermediateFrameTimes[0],s),this._intermediateFrameTimes[1]=Math.max(this._intermediateFrameTimes[1],s),this.frameNumberNext(),this.request()}},e.prototype.multiFrameNumberNext=function(){this._multiFrameNumberSubject.next(this._multiFrameNumber)},e.prototype.debugFrameNumberNext=function(){this._debugFrameNumberSubject.next(this._debugFrameNumber)},e.prototype.frameNumberNext=function(){this._frameNumberSubject.next(this._frameNumber)},e.prototype.pause=function(){var t=this._pause;i.logIf(e._debug,i.LogLevel.Debug,"c pause   "+(t?"(ignored)":"")),this._pause||(this._pause=!0,this._pauseTime=performance.now(),this.cancel())},e.prototype.unpause=function(){var t=!this._pause;if(i.logIf(e._debug,i.LogLevel.Debug,"c unpause "+(t?"(ignored)":"")),!t){if(this._pause=!1,void 0!==this._pauseTime&&!isNaN(this._pauseTime)){var n=performance.now()-this._pauseTime;this._multiTime[0]+=n,this._multiTime[1]+=n}this.request()}},e.prototype.update=function(t){void 0===t&&(t=!1),this.reset()||this.request(t?e.RequestType.NonOptionalUpdate:e.RequestType.Update)},e.prototype.prepare=function(){this.reset()||this.request(e.RequestType.Prepare)},e.prototype.block=function(){i.logIf(e._debug,i.LogLevel.Debug,"c block   "+(this._block?"(ignored) ":"          ")+"|"),this._block||(this._block=!0)},e.prototype.unblock=function(){i.logIf(e._debug,i.LogLevel.Debug,"c unblock "+(this._block?"          ":"(ignored) ")+"| blocked: #"+this._blockedUpdates),this._block&&(this._block=!1,this._blockedUpdates>0&&(this._blockedUpdates=0,this.update()))},Object.defineProperty(e.prototype,"paused",{get:function(){return this._pause},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"blocked",{get:function(){return this._block},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"controllable",{set:function(e){e!==this._controllable&&(this._controllable=e,this.update())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"multiFrameNumber",{get:function(){return this._multiFrameNumber},set:function(e){var t=Math.max(1,isNaN(e)?1:e);t!==this._multiFrameNumber&&(this._multiFrameNumber=t,this.multiFrameNumberNext(),i.logIf(t!==e,i.LogLevel.Debug,"multi-frame number adjusted to "+t+", given "+e),this.debugFrameNumber>this.multiFrameNumber?this.debugFrameNumber=this.multiFrameNumber:this.update())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"multiFrameNumber$",{get:function(){return this._multiFrameNumberSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"debugFrameNumber",{get:function(){return this._debugFrameNumber},set:function(e){var t=o.clamp(isNaN(e)?0:e,0,this.multiFrameNumber);t!==this._debugFrameNumber&&(this._debugFrameNumber=t,this.debugFrameNumberNext(),i.logIf(t!==e,i.LogLevel.Debug,"debug-frame number adjusted to "+t+", given "+e),this._block||(this.debugFrameNumber<this._frameNumber?this.prepare():this._pendingRequest||(this.unpause(),this.request())))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"debugFrameNumber$",{get:function(){return this._debugFrameNumberSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"frameNumber",{get:function(){return this._frameNumber},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"frameNumber$",{get:function(){return this._frameNumberSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"intermediateFrameCount",{get:function(){return this._intermediateFrameCount},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"multiFrameCount",{get:function(){return this._multiFrameCount},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"averageFrameTime",{get:function(){return 0===this._frameNumber?0:this._multiFrameTime/this._frameNumber},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"updateFrameTime",{get:function(){return this._updateFrameTime},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"minimumFrameTime",{get:function(){return this._intermediateFrameTimes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maximumFrameTime",{get:function(){return this._intermediateFrameTimes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"multiFrameTime",{get:function(){return 0===this._frameNumber?0:this._multiTime[1]-this._multiTime[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"framesPerSecond",{get:function(){return 0===this._frameNumber?0:1e3/(this.multiFrameTime/this._frameNumber)},enumerable:!0,configurable:!0}),e._debug=!1,e}();t.Controller=a,function(e){!function(e){e[e.Update=0]="Update",e[e.NonOptionalUpdate=1]="NonOptionalUpdate",e[e.Prepare=2]="Prepare",e[e.Frame=3]="Frame"}(e.RequestType||(e.RequestType={}))}(a=t.Controller||(t.Controller={})),t.Controller=a},function(e,t,n){"use strict";var r,i,o=n(80),a=n(0);(i=r||(r={})).validate=function(e,t,n){var r=new o.Validator;if(void 0!==n)for(var i=0,s=n;i<s.length;i++){var u=s[i];r.addSchema(u[0],u[1])}var c=r.validate(e,t);return a.logIf(!c.valid,a.LogLevel.Warning,"schema expected to be valid:\n"+c.toString()),c.valid},i.complement=function e(t,n){if(void 0!==t)switch(a.assert(n.hasOwnProperty("properties")&&"object"===n.type||n.hasOwnProperty("items")&&"array"===n.type,"expected schema to have 'properties' or 'items', given "+n),n.type){case"object":for(var r=n.properties,i=0,o=Object.getOwnPropertyNames(r);i<o.length;i++){var s=o[i],u=r[s],c="object"===u.type,l=t.hasOwnProperty(s),f=u.hasOwnProperty("properties"),h=u.hasOwnProperty("default");a.assert(f&&c||!f&&!c,"expected property '"+s+"' to be of type 'object', given '"+u.type+"'"),l&&f?e(t[s],u):!l&&h&&Object.defineProperty(t,s,{value:u.default,writable:!0})}break;case"array":var d=n.items;if("object"!==d.type)break;for(var p=0,_=Object.getOwnPropertyNames(t);p<_.length;p++){var m=_[p];"length"!==m&&e(t[m],d)}}},i.compare=function e(t,n,r,i){void 0===i&&(i="");var o=void 0!==r;if(a.assert(!o||r.hasOwnProperty("any"),"expected allocation lookup object to have 'any' key"),void 0===t&&void 0!==n||void 0!==t&&void 0===n)return o&&r.alter(i),!0;var s=!0,u=[typeof t,typeof n],c=[t instanceof Array,n instanceof Array];if(!(c[0]&&c[1]||"object"===u[0]&&"object"===u[1]))return!(s=t===n)&&o&&r.alter(""+i),!s;for(var l=0,f=Array.from(new Set(Array().concat(Object.getOwnPropertyNames(t),Object.getOwnPropertyNames(n))).values());l<f.length;l++){var h=f[l];if("length"!==h){var d=[t[h],n[h]];u=[typeof d[0],typeof d[1]];var p=i+(i.length>0&&!c[0]?".":"")+(c[0]?"":h);if(d[0]instanceof Array&&d[1]instanceof Array||"object"===u[0]&&"object"===u[1])s=s&&!e(d[0],d[1],r,p);else{if(u[0]===u[1]&&d[0]===d[1])continue;s=!1,o&&r.alter(p)}}}return!s},e.exports=r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(14),u=n(2),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.create=function(){return this._object=s.Framebuffer.DEFAULT_FRAMEBUFFER,this._valid=!0,this._clearColors=new Array(1),this._clearDepth=1,this._clearStencil=0,this.clear=this.es2Clear,this._object},t.prototype.delete=function(){this._object=void 0,this._valid=!1},t.prototype.hasAttachment=function(e){return!1},t.prototype.bind=function(e){void 0===e&&(e=this.context.gl.FRAMEBUFFER),this.context.gl.bindFramebuffer(e,this._object)},t.prototype.clearColor=function(t){e.prototype.clearColor.call(this,t)},t.prototype.resize=function(){a.assert(!1,"the default framebuffer cannot be resized directly")},Object.defineProperty(t.prototype,"width",{get:function(){return this.context.gl.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.context.gl.canvas.height},enumerable:!0,configurable:!0}),o([u.Initializable.assert_initialized()],t.prototype,"bind",null),t}(s.Framebuffer);t.DefaultFramebuffer=c},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(2),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._buffersBound=!1,t}return i(t,e),t.prototype.create=function(e,n){var r=this;if(this.context.isWebGL2||this.context.supportsVertexArrayObject){var i=this.context.gl2facade;this._object=i.createVertexArray(),this._valid=void 0!==this._object,this._bind=function(){i.bindVertexArray(r.object),r._buffersBound||(e(),r._buffersBound=!0)},this._unbind=function(){return i.bindVertexArray(t.DEFAULT_VERTEX_ARRAY)}}else this._bind=function(){return e()},this._unbind=function(){return n()},this._valid=!0;return this._object},t.prototype.delete=function(){this.context.isWebGL2||this.context.supportsVertexArrayObject?(a.assert(void 0!==this._object,"expected WebGLVertexArrayObject object"),this._context.gl2facade.deleteVertexArray(this._object),this._object=void 0,this._valid=!1,this._buffersBound=!1):this._valid=!1},t.prototype.bind=function(){this._bind()},t.prototype.unbind=function(){this._unbind()},t.prototype.invalidate=function(){this._buffersBound=!1},t.DEFAULT_VERTEX_ARRAY=void 0,o([s.Initializable.assert_initialized()],t.prototype,"bind",null),o([s.Initializable.assert_initialized()],t.prototype,"unbind",null),t}(n(6).AbstractObject);t.VertexArray=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(10),s=n(1),u=n(0),c=n(3),l=n(12),f=n(2),h=n(19),d=n(11),p=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._altered=Object.assign(new l.ChangeLookup,{any:!1,multiFrameNumber:!1,frameSize:!1,canvasSize:!1,framePrecision:!1,clearColor:!1,debugTexture:!1}),t._frameSize=[0,0],t._canvasSize=[0,0],t._framePrecision=d.Wizard.Precision.half,t._clearColor=[0,0,0,1],t._debugTextures=new Array,t._debugTextureSubject=new a.ReplaySubject(1),t}return i(t,e),t.prototype.invalidate=function(e){void 0===e&&(e=!1),this._invalidate(e)},t.prototype.debugTextureNext=function(){this._debugTextureSubject.next(this._debugTexture)},Object.defineProperty(t.prototype,"context",{get:function(){return this.assertInitialized(),this._context},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"canvasSize",{get:function(){return this.assertInitialized(),this._canvasSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"altered",{get:function(){return this._altered.any},enumerable:!0,configurable:!0}),t.prototype.onSwap=function(){},t.prototype.initialize=function(e,t,n,r){return u.assert(void 0!==e,"valid webgl context required"),this._context=e,u.assert(void 0!==t,"valid multi-frame update callback required"),this._invalidate=t,this.onInitialize(e,t,n,r)},t.prototype.uninitialize=function(){this.onUninitialize()},t.prototype.update=function(e){return this._canvasSize[0]===this._context.gl.canvas.width&&this._canvasSize[1]===this._context.gl.canvas.height||(this._canvasSize[0]=this._context.gl.canvas.width,this._canvasSize[1]=this._context.gl.canvas.height,this._altered.alter("canvasSize")),this._multiFrameNumber!==e&&(this._multiFrameNumber=e,this._altered.alter("multiFrameNumber")),this.onUpdate()||this._altered.any},t.prototype.prepare=function(){this.onPrepare()},t.prototype.frame=function(e){this.onFrame(e)},t.prototype.swap=function(){this.onSwap()},t.prototype.frameCoords=function(e,t){var n=s.vec2.divide(c.v2(),this._frameSize,this.canvasSize);return s.vec2.floor(n,s.vec2.multiply(n,[e+.5,t+.5],n)),s.vec2.add(n,n,[.5,.5]),h.tuple2(n)},Object.defineProperty(t.prototype,"frameSize",{set:function(e){this.assertInitialized(),s.vec2.equals(this._frameSize,e)||(Object.assign(this._frameSize,e),this._altered.alter("frameSize"),this.invalidate())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"framePrecision",{set:function(e){this.assertInitialized(),this._framePrecision!==e&&(this._framePrecision=e,this._altered.alter("framePrecision"),this.invalidate())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"clearColor",{set:function(e){this.assertInitialized(),s.vec4.equals(this._clearColor,e)||(Object.assign(this._clearColor,e),this._altered.alter("clearColor"),this.invalidate())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"debugTextures",{get:function(){return this.assertInitialized(),this._debugTextures},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"debugTexture",{get:function(){return this.assertInitialized(),this._debugTexture},set:function(e){this.assertInitialized(),this._debugTexture!==e&&(u.logIf(e>=this._debugTextures.length,u.LogLevel.Error,"invalid texture index, debug texture disabled (index set to -1) | "+e+" not in [-1,+"+(this._debugTextures.length-1)+"]"),this._debugTexture=e<this._debugTextures.length?c.clamp(e,-1,this._debugTextures.length-1):-1,this._altered.alter("debugTexture"),this.invalidate())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"debugTexture$",{get:function(){return this._debugTextureSubject.asObservable()},enumerable:!0,configurable:!0}),o([f.Initializable.assert_initialized()],t.prototype,"invalidate",null),o([f.Initializable.initialize()],t.prototype,"initialize",null),o([f.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([f.Initializable.assert_initialized()],t.prototype,"update",null),o([f.Initializable.assert_initialized()],t.prototype,"prepare",null),o([f.Initializable.assert_initialized()],t.prototype,"frame",null),o([f.Initializable.assert_initialized()],t.prototype,"swap",null),t}(f.Initializable);t.Renderer=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(3),o=n(0),a=function(){function e(t,n,i){this._fovy=e.DEFAULT_FOVY,this._near=e.DEFAULT_NEAR,this._far=e.DEFAULT_FAR,this._viewport=[1,1],this._aspect=1,this._altered=!1,this._eye=t?r.vec3.clone(t):r.vec3.clone(e.DEFAULT_EYE),this._center=n?r.vec3.clone(n):r.vec3.clone(e.DEFAULT_CENTER),this._up=i?r.vec3.clone(i):r.vec3.clone(e.DEFAULT_UP)}return e.calculateFovY=function(e,t){return 2*Math.atan(.5*e/t)},e.prototype.invalidate=function(e,t){e&&(this._view=void 0,this._viewInverse=void 0),t&&(this._projection=void 0,this._projectionInverse=void 0),(e||t)&&(this._viewProjection=void 0,this._viewProjectionInverse=void 0),this._altered=!0},Object.defineProperty(e.prototype,"eye",{get:function(){return this._eye},set:function(e){r.vec3.equals(this._eye,e)||(this._eye=r.vec3.clone(e),this.invalidate(!0,!1))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"center",{get:function(){return this._center},set:function(e){r.vec3.equals(this._center,e)||(this._center=r.vec3.clone(e),this.invalidate(!0,!1))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"up",{get:function(){return this._up},set:function(e){r.vec3.equals(this._up,e)||(this._up=r.vec3.clone(e),this.invalidate(!0,!1))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fovy",{get:function(){return this._fovy},set:function(e){this._fovy!==e&&(this._fovy=e,this.invalidate(!1,!0))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"near",{get:function(){return this._near},set:function(e){this._near!==e&&(e>=this._far&&o.log(o.LogLevel.Warning,"near expected to be smaller than far ("+this._far+"), given "+e),this._near=e,this.invalidate(!1,!0))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"far",{get:function(){return this._far},set:function(e){this._far!==e&&(this._near>=e&&o.log(o.LogLevel.Warning,"far expected to be greater than near ("+this._near+"), given "+e),this._far=e,this.invalidate(!1,!0))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"viewport",{get:function(){return this._viewport},set:function(e){this._viewport[0]===e[0]&&this._viewport[1]===e[1]||(this._viewport=e,this.invalidate(!1,!0))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._viewport[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._viewport[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"aspect",{get:function(){return this._aspect},set:function(e){this._aspect!==e&&(this._aspect=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"view",{get:function(){return this._view||(this._view=r.mat4.lookAt(i.m4(),this._eye,this._center,this._up)),this._view},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"viewInverse",{get:function(){return void 0!==this._viewInverse||(this._viewInverse=r.mat4.invert(i.m4(),this.view)),this._viewInverse},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"projection",{get:function(){return this._projection||(this._projection=r.mat4.perspective(i.m4(),this.fovy*o.DEG2RAD,this.aspect,this.near,this.far)),this._projection},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"projectionInverse",{get:function(){return void 0!==this._projectionInverse||(this._projectionInverse=r.mat4.invert(i.m4(),this.projection)),this._projectionInverse},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"viewProjection",{get:function(){return this._viewProjection||(this._viewProjection=r.mat4.multiply(i.m4(),this.projection,this.view)),this._viewProjection},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"viewProjectionInverse",{get:function(){return void 0!==this._viewProjectionInverse||(this._viewProjectionInverse=r.mat4.invert(i.m4(),this.viewProjection)),this._viewProjectionInverse},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"altered",{get:function(){return this._altered},set:function(e){this._altered=e},enumerable:!0,configurable:!0}),e.DEFAULT_EYE=r.vec3.fromValues(0,0,1),e.DEFAULT_CENTER=r.vec3.fromValues(0,0,0),e.DEFAULT_UP=r.vec3.fromValues(0,1,0),e.DEFAULT_FOVY=45,e.DEFAULT_NEAR=2,e.DEFAULT_FAR=8,e}();t.Camera=a},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(3),s=function(e){function t(){var n=null!==e&&e.apply(this,arguments)||this;return n._rotation=o.mat4.create(),n._sensitivity=t.DEFAULT_SENSITIVITY,n}return i(t,e),t.prototype.initiate=function(e){Object.assign(this._reference,this._camera),this._initialPoint=e},t.prototype.process=function(e,t){this._currentPoint=e;var n=o.vec2.create();void 0===t?o.vec2.subtract(n,this._initialPoint,this._currentPoint):o.vec2.copy(n,t),o.vec2.scale(n,n,window.devicePixelRatio*this._sensitivity),o.vec2.copy(this._initialPoint,this._currentPoint);var r=o.vec3.sub(a.v3(),this._reference.eye,this._reference.center);o.vec3.normalize(r,r);var i=o.vec3.cross(a.v3(),r,this._reference.up),s=o.mat4.fromRotation(a.m4(),-n[0],this._reference.up),u=o.mat4.fromRotation(a.m4(),n[1],i);o.mat4.mul(this._rotation,u,s),this.update()},t.prototype.update=function(){if(void 0!==this._camera){var e=o.mat4.fromTranslation(a.m4(),this._reference.eye);o.mat4.multiply(e,e,this._rotation),o.mat4.translate(e,e,o.vec3.negate(a.v3(),this._reference.eye));var t=o.vec3.transformMat4(a.v3(),this._reference.center,e);this._camera.center=t,Object.assign(this._reference,this._camera)}},Object.defineProperty(t.prototype,"sensitivity",{get:function(){return this._sensitivity},set:function(e){this._sensitivity=e},enumerable:!0,configurable:!0}),t.DEFAULT_SENSITIVITY=8e-4,t}(n(15).CameraModifier);t.FirstPersonModifier=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(3),s=function(e){function t(){var n=null!==e&&e.apply(this,arguments)||this;return n._rotation=o.mat4.create(),n._sensitivity=t.DEFAULT_SENSITIVITY,n}return i(t,e),t.prototype.initiate=function(e){this._initialPoint=e},t.prototype.process=function(e){this._currentPoint=e;var t=o.vec2.subtract(a.v2(),this._initialPoint,this._currentPoint);o.vec2.scale(t,t,window.devicePixelRatio*this._sensitivity),o.vec2.copy(this._initialPoint,this._currentPoint);var n=o.vec3.sub(a.v3(),this._reference.eye,this._reference.center);o.vec3.normalize(n,n);var r=o.vec3.normalize(a.v3(),this._reference.up),i=o.vec3.cross(a.v3(),n,r);o.vec3.scale(r,r,t[1]),o.vec3.scale(i,i,t[0]);var s=o.vec3.cross(a.v3(),o.vec3.add(a.v3(),r,i),n);o.vec3.normalize(s,s);var u=o.quat.setAxisAngle(o.quat.create(),s,o.vec2.len(t));o.mat4.multiply(this._rotation,this._rotation,o.mat4.fromQuat(a.m4(),u)),this.update()},t.prototype.update=function(){if(void 0!==this._camera){var e=o.mat4.fromTranslation(a.m4(),this._reference.center);o.mat4.multiply(e,e,this._rotation),o.mat4.translate(e,e,o.vec3.negate(a.v3(),this._reference.center));var t=o.vec3.transformMat4(a.v3(),[0,1,0],this._rotation),n=o.vec3.transformMat4(a.v3(),this._reference.eye,e);this._camera.up=t,this._camera.eye=n}},Object.defineProperty(t.prototype,"sensitivity",{get:function(){return this._sensitivity},set:function(e){this._sensitivity=e},enumerable:!0,configurable:!0}),t.DEFAULT_SENSITIVITY=.002,t}(n(15).CameraModifier);t.TrackballModifier=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(3),s=function(e){function t(){var n=null!==e&&e.apply(this,arguments)||this;return n._rotation=a.m4(),n._maxAzimuth=.5*+Math.PI-1e-4,n._minAzimuth=.5*-Math.PI+1e-4,n._xAxisScreenSpace=a.v3(),n._sensitivity=t.DEFAULT_SENSITIVITY,n}return i(t,e),t.prototype.initiate=function(e){Object.assign(this._reference,this._camera),this._initialPoint=e;var t=o.vec3.sub(a.v3(),this._reference.eye,this._reference.center);o.vec3.normalize(t,t),this._xAxisScreenSpace=o.vec3.cross(a.v3(),[0,1,0],t),this._azimuth=Math.acos(o.vec3.dot(t,[0,1,0])),this._azimuth=.5*Math.PI-this._azimuth},t.prototype.process=function(e){this._currentPoint=e;var t=o.vec2.subtract(a.v2(),this._initialPoint,this._currentPoint);o.vec2.scale(t,t,window.devicePixelRatio*this._sensitivity),this._minAzimuth&&(t[1]=Math.min(this._azimuth-this._minAzimuth,t[1])),this._maxAzimuth&&(t[1]=Math.max(this._azimuth-this._maxAzimuth,t[1])),o.mat4.rotateY(this._rotation,a.m4(),t[0]),o.mat4.rotate(this._rotation,this._rotation,t[1],this._xAxisScreenSpace),this.update()},t.prototype.update=function(){if(void 0!==this._camera){var e=o.mat4.fromTranslation(a.m4(),this._reference.center);o.mat4.multiply(e,e,this._rotation),o.mat4.translate(e,e,o.vec3.negate(a.v3(),this._reference.center));var t=o.vec3.transformMat4(a.v3(),[0,1,0],this._rotation),n=o.vec3.transformMat4(a.v3(),this._reference.eye,e);this._camera.up=t,this._camera.eye=n}},Object.defineProperty(t.prototype,"sensitivity",{get:function(){return this._sensitivity},set:function(e){this._sensitivity=e},enumerable:!0,configurable:!0}),t.DEFAULT_SENSITIVITY=.002,t}(n(15).CameraModifier);t.TurntableModifier=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.generate=function(){switch(this._width){case 8:this.fromJSON(n(97));break;case 64:this.fromJSON(n(98));break;default:e.prototype.generate.call(this)}},t}(n(49).RandomSquareKernel);t.AntiAliasingKernel=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(e){function t(t){var n=e.call(this,2,t)||this;return n.generate(),n}return i(t,e),t.prototype.generate=function(){o.assert(this.width>0,"expected every kernel to comprise at least one element"),this.set([0,0],0);for(var e=1;e<this.width;++e)this.set([o.rand(-.5,.5),o.rand(-.5,.5)],e)},Object.defineProperty(t.prototype,"width",{get:function(){return this._width},set:function(e){this._width!==e&&(this._width=e,this.resize(),this.generate())},enumerable:!0,configurable:!0}),t}(n(35).KernelF32);t.RandomSquareKernel=a},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(12),u=n(14),c=n(2),l=n(16),f=n(8),h=n(9),d=n(4),p=n(11),_=function(e){function t(t){var n=e.call(this)||this;return n._altered=Object.assign(new s.ChangeLookup,{any:!1,texture:!1,precision:!1,passThrough:!1}),n._precision=p.Wizard.Precision.half,n._write=0,n._ndcTriangleShared=!1,n._context=t,n}return i(t,e),t.prototype.initialize=function(e){var t=this._context.gl;this._accumulationFBOs=[new u.Framebuffer(this._context,"AccumPingFBO"),new u.Framebuffer(this._context,"AccumPongFBO")],this._accumulationTextures=[new d.Texture2D(this._context,"AccumPingTexture"),new d.Texture2D(this._context,"AccumPongTexture")],void 0===e?this._ndcTriangle=new l.NdcFillingTriangle(this._context,"NdcFillingTriangle-Accumulate"):(this._ndcTriangle=e,this._ndcTriangleShared=!0);var r=new h.Shader(this._context,t.VERTEX_SHADER,"ndcvertices.vert (accumulate)");r.initialize(n(23));var i=new h.Shader(this._context,t.FRAGMENT_SHADER,"accumulate.frag");return i.initialize(n(99)),this._program=new f.Program(this._context,"AccumulateProgram"),this._program.initialize([r,i],!1),this._ndcTriangle.initialized||this._ndcTriangle.initialize(),this._program.attribute("a_vertex",this._ndcTriangle.vertexLocation),this._program.link(),this._uWeight=this._program.uniform("u_weight"),this._program.bind(),t.uniform1f(this._uWeight,0),t.uniform1i(this._program.uniform("u_accumulationTexture"),0),t.uniform1i(this._program.uniform("u_currentFrameTexture"),1),this._program.unbind(),!0},t.prototype.uninitialize=function(){!this._ndcTriangleShared&&this._ndcTriangle.initialized&&this._ndcTriangle.uninitialize(),this._program.uninitialize(),this._accumulationFBOs[0].uninitialize(),this._accumulationFBOs[1].uninitialize(),this._accumulationTextures[0].uninitialize(),this._accumulationTextures[1].uninitialize(),this._write=0},t.prototype.update=function(){if(this._texture&&this._texture.valid){if(!this._passThrough){var e=this._altered.texture||this._accumulationTextures[0].width!==this._texture.width||this._accumulationTextures[0].height!==this._texture.height;if(this._altered.any||e){var t=this._context.gl,n=this._context.gl2facade,r=this._texture.size;if(this._accumulationTextures[0].initialized)(this._altered.texture||e)&&(this._accumulationTextures[0].resize(this._texture.width,this._texture.height),this._accumulationTextures[1].resize(this._texture.width,this._texture.height)),this._altered.precision&&(i=p.Wizard.queryInternalTextureFormat(this._context,t.RGBA,this._precision),this._accumulationTextures[0].reformat(i[0],t.RGBA,i[1]),this._accumulationTextures[1].reformat(i[0],t.RGBA,i[1]));else{var i=p.Wizard.queryInternalTextureFormat(this._context,t.RGBA,this._precision);this._accumulationTextures[0].initialize(r[0],r[1],i[0],t.RGBA,i[1]),this._accumulationTextures[1].initialize(r[0],r[1],i[0],t.RGBA,i[1])}this._accumulationFBOs[0].initialized||(this._accumulationFBOs[0].initialize([[n.COLOR_ATTACHMENT0,this._accumulationTextures[0]]]),this._accumulationFBOs[1].initialize([[n.COLOR_ATTACHMENT0,this._accumulationTextures[1]]])),a.assert(this._accumulationFBOs[0].valid&&this._accumulationFBOs[1].valid,"valid accumulation framebuffers expected"),this._altered.reset()}else a.assert(this._accumulationFBOs[0].valid&&this._accumulationFBOs[1].valid,"valid accumulation framebuffers expected")}}else a.log(a.LogLevel.Warning,"valid texture for accumulation update expected, given "+this._texture)},t.prototype.frame=function(e,t){if(a.assert(this._accumulationFBOs[0].valid&&this._accumulationFBOs[1].valid,"valid framebuffer objects for accumulation expected (initialize or update was probably not be called"),!this._passThrough&&void 0!==this._texture){a.logIf(!this._texture||!this._texture.valid,a.LogLevel.Warning,"valid texture for accumulation frame expected, given "+this._texture);var n=this._context.gl;void 0!==t&&n.viewport(0,0,t[0],t[1]);var r=e%2,i=this._write=1-r,o=this._accumulationTextures[r],s=this._texture;o.bind(n.TEXTURE0),s.bind(n.TEXTURE1),this._program.bind(),n.uniform1f(this._uWeight,1/(e+1)),this._accumulationFBOs[i].bind(n.DRAW_FRAMEBUFFER),this._ndcTriangle.bind(),this._ndcTriangle.draw(),this._ndcTriangle.unbind(),this._accumulationFBOs[i].unbind(n.DRAW_FRAMEBUFFER),o.unbind(n.TEXTURE0),s.unbind(n.TEXTURE1)}},Object.defineProperty(t.prototype,"texture",{set:function(e){this.assertInitialized(),this._texture!==e&&(this._texture=e,this._altered.alter("texture"))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"precision",{set:function(e){this.assertInitialized(),this._precision!==e&&(this._precision=e,this._altered.alter("precision"))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"passThrough",{set:function(e){this.assertInitialized(),this._passThrough!==e&&(this._passThrough&&this._accumulationTextures[0].initialized&&(this._accumulationTextures[0].uninitialize(),this._accumulationTextures[1].uninitialize()),this._passThrough&&this._accumulationFBOs[0].initialized&&(this._accumulationFBOs[0].uninitialize(),this._accumulationFBOs[1].uninitialize()),this._passThrough=e,this._altered.alter("passThrough"))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"framebuffer",{get:function(){return this._passThrough?void 0:this._accumulationFBOs[this._write]},enumerable:!0,configurable:!0}),o([c.Initializable.initialize()],t.prototype,"initialize",null),o([c.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([c.Initializable.assert_initialized()],t.prototype,"update",null),o([c.Initializable.assert_initialized()],t.prototype,"frame",null),t}(c.Initializable);t.AccumulatePass=_},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(2),u=n(16),c=n(8),l=n(9),f=function(e){function t(n){var r=e.call(this)||this;return r._enforceProgramBlit=!1,r._ndcTriangleShared=!1,r._debugProgram=void 0,r._debug=t.Debug.None,r._near=0,r._far=0,r._context=n,r}return i(t,e),t.prototype.functionBlit=function(){var e=this._context.gl;this._target.bind(e.DRAW_FRAMEBUFFER),this._framebuffer.bind(e.READ_FRAMEBUFFER),e.readBuffer(this._readBuffer),e.drawBuffers([this._drawBuffer]),e.enable(e.SCISSOR_TEST),e.scissor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),e.disable(e.SCISSOR_TEST),e.blitFramebuffer(0,0,this._framebuffer.width,this._framebuffer.height,0,0,this._target.width,this._target.height,e.COLOR_BUFFER_BIT,e.NEAREST),this._framebuffer.unbind(e.READ_FRAMEBUFFER),this._target.unbind(e.DRAW_FRAMEBUFFER)},t.prototype.programBlit=function(e){a.assert(this._ndcTriangle&&this._ndcTriangle.initialized,"expected an initialized ndc triangle");var t=this._context.gl;t.viewport(0,0,this._target.width,this._target.height),e.bind();var n=this._framebuffer.texture(this._readBuffer);n.bind(t.TEXTURE0);var r=this._context.isWebGL2?t.DRAW_FRAMEBUFFER:t.FRAMEBUFFER;this._target.bind(r),this._ndcTriangle.bind(),this._ndcTriangle.draw(),this._ndcTriangle.unbind(),this._target.unbind(r),n.unbind()},t.prototype.initialize=function(e){var t=this._context.gl;void 0===e?this._ndcTriangle=new u.NdcFillingTriangle(this._context,"NdcFillingTriangle-Blit"):(this._ndcTriangle=e,this._ndcTriangleShared=!0);var r=new l.Shader(this._context,t.VERTEX_SHADER,"ndcvertices.vert (blit)");r.initialize(n(23));var i=new l.Shader(this._context,t.FRAGMENT_SHADER,"blit.frag");return i.initialize(n(100)),this._program=new c.Program(this._context,"BlitProgram"),this._program.initialize([r,i],!1),this._ndcTriangle.initialized||this._ndcTriangle.initialize(),this._program.attribute("a_vertex",this._ndcTriangle.vertexLocation),this._program.link(),this._program.bind(),t.uniform1i(this._program.uniform("u_texture"),0),this._program.unbind(),!0},t.prototype.uninitialize=function(){!this._ndcTriangleShared&&this._ndcTriangle.initialized&&this._ndcTriangle.uninitialize(),this._program.uninitialize(),this._debugProgram&&(this._debugProgram.uninitialize(),this._uDebugMode=void 0,this._uLinearize=void 0)},t.prototype.frame=function(){if(a.logIf(!this._target||!this._target.valid,a.LogLevel.Warning,"valid target expected, given "+this._target),a.logIf(!this._framebuffer||!this._framebuffer.valid,a.LogLevel.Warning,"valid framebuffer for blitting from expected, given "+this._framebuffer),this._debug!==t.Debug.None)return this.programBlit(this._debugProgram);var e=this._context.gl;switch(this._readBuffer){case e.DEPTH_ATTACHMENT:case e.STENCIL_ATTACHMENT:case e.DEPTH_STENCIL_ATTACHMENT:return this.programBlit(this._program)}if(this._context.supportsBlitFramebuffer&&!1===this._enforceProgramBlit)return this.functionBlit();this.programBlit(this._program)},Object.defineProperty(t.prototype,"framebuffer",{set:function(e){this.assertInitialized(),this._framebuffer=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"readBuffer",{set:function(e){this.assertInitialized(),this._readBuffer=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"drawBuffer",{set:function(e){this.assertInitialized(),this._drawBuffer=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"target",{set:function(e){this.assertInitialized(),this._target=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"enforceProgramBlit",{set:function(e){this._enforceProgramBlit=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"debug",{set:function(e){this.assertInitialized();var r=this._context.gl;if(this._debug=e,this._debug!==t.Debug.None){if(void 0!==this._debugProgram)return this._debugProgram.bind(),void r.uniform1i(this._uDebugMode,this._debug);var i=new l.Shader(this._context,r.VERTEX_SHADER,"ndcvertices.vert (blit)");i.initialize(n(23));var o=new l.Shader(this._context,r.FRAGMENT_SHADER,"blit_debug.frag (blit)");o.initialize(n(101)),this._debugProgram=new c.Program(this._context,"BlitProgramDebug"),this._debugProgram.initialize([i,o]),this._uDebugMode=this._debugProgram.uniform("u_mode"),this._uLinearize=this._debugProgram.uniform("u_linearize"),this._debugProgram.bind(),r.uniform1i(this._debugProgram.uniform("u_texture"),0),r.uniform1i(this._uDebugMode,this._debug),r.uniform2f(this._uLinearize,this._near,this._far)}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"near",{set:function(e){this._near=e||0,this._debugProgram&&(this._debugProgram.bind(),this._context.gl.uniform2f(this._uLinearize,this._near,this._far))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"far",{set:function(e){this._far=e||0,this._debugProgram&&(this._debugProgram.bind(),this._context.gl.uniform2f(this._uLinearize,this._near,this._far))},enumerable:!0,configurable:!0}),o([s.Initializable.initialize()],t.prototype,"initialize",null),o([s.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([s.Initializable.assert_initialized()],t.prototype,"frame",null),t}(s.Initializable);t.BlitPass=f,function(e){!function(e){e[e.None=0]="None",e[e.Depth=1]="Depth",e[e.DepthLinear=2]="DepthLinear",e[e.DepthPacked=3]="DepthPacked",e[e.DepthLinearPacked=4]="DepthLinearPacked"}(e.Debug||(e.Debug={}))}(f=t.BlitPass||(t.BlitPass={})),t.BlitPass=f},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),s=n(0),u=n(3),c=n(2),l=n(16),f=n(8),h=n(9),d=function(e){function t(t){var n=e.call(this)||this;return n._kernelSize=7,n._standardDeviation=1,n._redistribute=!0,n._ndcTriangleShared=!1,n._context=t,n}return i(t,e),t.prototype.recalculateWeights=function(){if(this._weights)return!1;var e=1/Math.sqrt(2*Math.PI)*this._standardDeviation,t=2*this._standardDeviation*this._standardDeviation;this._weights=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(var n=0,r=0;r<=Math.floor(this._kernelSize/2);r++)this._weights[r]=e*Math.pow(Math.E,-Math.pow(r,2)/t),n+=r>0?2*this._weights[r]:this._weights[r];if(this._redistribute){var i=1-n;for(r=0;r<=Math.floor(this._kernelSize/2);r++)this._weights[r]+=this._weights[r]/n*i}return!0},Object.defineProperty(t.prototype,"kernelSize",{get:function(){return this._kernelSize},set:function(e){s.assert(e>0,"Kernel size has to be positive."),s.assert(e<=2*(t._MAXKERNELSIZEHALF-1)+1,"Kernel size has to be smaller than "+(2*(t._MAXKERNELSIZEHALF-1)+2)+"."),s.assert(Number.isInteger(e),"Kernel size has to be an integer."),s.assert(e%2==1,"Kernel size has to be odd."),this._kernelSize=e,this._weights=void 0},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"standardDeviation",{get:function(){return this._standardDeviation},set:function(e){s.assert(e>0,"Standard deviation has to be positive."),this._standardDeviation=e,this._weights=void 0},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"redistribute",{get:function(){return this._redistribute},set:function(e){this._redistribute=e,this._weights=void 0},enumerable:!0,configurable:!0}),t.prototype.initialize=function(e){var t=this._context.gl,r=new h.Shader(this._context,t.VERTEX_SHADER,"gauss.vert");r.initialize(n(104)),this._fragmentShader=new h.Shader(this._context,t.FRAGMENT_SHADER,"gauss.frag"),this._fragmentShader.replace("$KERNEL_HALF_SIZE",""+Math.floor(this.kernelSize/2)),this._fragmentShader.initialize(n(105)),this._program=new f.Program(this._context),this._program.initialize([r,this._fragmentShader]),this._uDelta=this._program.uniform("u_delta"),this._uWeights=this._program.uniform("u_weights");var i=this._program.attribute("a_vertex",0);return void 0===e?this._ndcTriangle=new l.NdcFillingTriangle(this._context,"GaussFilterQuad"):(this._ndcTriangle=e,this._ndcTriangleShared=!0),this._ndcTriangle.initialize(i),!0},t.prototype.uninitialize=function(){this._program.uninitialize(),this._ndcTriangleShared||this._ndcTriangle.uninitialize()},t.prototype.filter=function(e,t){var n=this._context.gl,r=[a.vec2.fromValues(1,0),a.vec2.fromValues(0,1)];this.recalculateWeights()&&(this._fragmentShader.replace("$KERNEL_HALF_SIZE",""+Math.floor(this.kernelSize/2)),this._fragmentShader.compile(),this._program.link(),this._uDelta=this._program.uniform("u_delta"),this._uWeights=this._program.uniform("u_weights"),this._program.bind(),n.uniform1fv(this._uWeights,this._weights)),this._program.bind(),e.bind(n.TEXTURE0),n.uniform2fv(this._uDelta,a.vec2.divide(u.v2(),r[t],e.size)),this._ndcTriangle.bind(),this._ndcTriangle.draw(),this._ndcTriangle.unbind(),e.unbind(n.TEXTURE0),this._program.unbind()},t._MAXKERNELSIZEHALF=32,o([c.Initializable.initialize()],t.prototype,"initialize",null),o([c.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([c.Initializable.assert_initialized()],t.prototype,"filter",null),t}(c.Initializable);t.GaussFilter=d,function(e){!function(e){e[e.Horizontal=0]="Horizontal",e[e.Vertical=1]="Vertical"}(e.Direction||(e.Direction={}))}(d=t.GaussFilter||(t.GaussFilter={})),t.GaussFilter=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(107);t.CuboidGeometry=r.CuboidGeometry;var i=n(54);t.Icosahedron=i.Icosahedron;var o=n(108);t.GeosphereGeometry=o.GeosphereGeometry;var a=n(109);t.PlaneGeometry=a.PlaneGeometry;var s=n(110);t.ResourceManager=s.ResourceManager},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(3),o=function(){function e(){}return e.prototype.baseVertices=function(){var e=.5*(1+Math.sqrt(5)),t=1/Math.sqrt(e*e+1),n=e*t;return[r.vec3.fromValues(-t,+n,0),r.vec3.fromValues(+t,+n,0),r.vec3.fromValues(-t,-n,0),r.vec3.fromValues(+t,-n,0),r.vec3.fromValues(0,-t,+n),r.vec3.fromValues(0,+t,+n),r.vec3.fromValues(0,-t,-n),r.vec3.fromValues(0,+t,-n),r.vec3.fromValues(+n,0,-t),r.vec3.fromValues(+n,0,+t),r.vec3.fromValues(-n,0,-t),r.vec3.fromValues(-n,0,+t)]},e.prototype.baseFaces=function(){return[[0,11,5],[0,5,1],[0,1,7],[0,7,10],[0,10,11],[1,5,9],[5,11,4],[11,10,2],[10,7,6],[7,1,8],[3,9,4],[3,4,2],[3,2,6],[3,6,8],[3,8,9],[4,9,5],[2,4,11],[6,2,10],[8,6,7],[9,8,1]]},e.prototype.refine=function(e,t,n){for(var r=new Map,i=0;i<n;i++)for(var o=t.length,a=0;a<o;a++){var s=t[a],u=s[0],c=s[1],l=s[2],f=this.split(u,c,e,r),h=this.split(c,l,e,r),d=this.split(l,u,e,r);t[a]=[f,h,d],t.push([u,f,d]),t.push([c,h,f]),t.push([l,d,h])}},e.prototype.split=function(e,t,n,o){var a=e<t,s=((a?e:t)<<16)+(a?t:e);if(o.has(s))return o.get(s);var u=r.vec3.add(i.v3(),n[e],n[t]);r.vec3.normalize(u,u),n.push(u);var c=n.length-1;return o.set(s,c),c},e.prototype.generateGeometry=function(e){this._vertices=this.baseVertices(),this._faces=this.baseFaces(),e>0&&this.refine(this._vertices,this._faces,Math.min(Math.max(e,0),8))},e.prototype.generateTextureCoordinates=function(){this._texcoords=new Array;for(var e=0,t=this._vertices;e<t.length;e++){var n=t[e],o=r.vec3.normalize(i.v3(),n),a=r.vec2.fromValues(.5-Math.atan2(o[2],o[0])/(2*Math.PI),Math.asin(o[1])/Math.PI+.5);this._texcoords.push(a)}},Object.defineProperty(e.prototype,"faces",{get:function(){return this._faces},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"vertices",{get:function(){return this._vertices},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"texcoords",{get:function(){return this._texcoords},enumerable:!0,configurable:!0}),e}();t.Icosahedron=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),Object.defineProperty(t.prototype,"scene",{get:function(){return this._scene},set:function(e){this._scene=e},enumerable:!0,configurable:!0}),t}(n(2).Initializable);t.SceneRenderPass=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this._nodes=new Array,this._components=new Array,this._name=e,this._parent=void 0}return e.prototype.traverse=function(e){e(this);for(var t=0,n=this._nodes;t<n.length;t++)n[t].traverse(e)},e.prototype.addNode=function(e){return e._parent=this,this._nodes.push(e),e},e.prototype.addComponent=function(e){return this._components.push(e),e},e.prototype.componentsOfType=function(e){return this._components.filter((function(t){return e===t.type}))},Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this._parent},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nodes",{get:function(){return this._nodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"components",{get:function(){return this._components},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isLeaf",{get:function(){return 0===this._nodes.length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isRoot",{get:function(){return void 0===this._parent},enumerable:!0,configurable:!0}),e}();t.SceneNode=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(19),i=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this._bearing=[0,0],this._extent=[0,0],this._kernings=new Map,this._subTextureOrigin=[0,0],this._subTextureExtent=[0,0],this._index=e,this._advance=t}return e.prototype.depictable=function(){return this._subTextureExtent[0]>0&&this._subTextureExtent[1]>0},e.prototype.kerning=function(e){var t=this._kernings.get(e);return void 0!==t?t:0},e.prototype.setKerning=function(e,t){this._kernings.set(e,t)},Object.defineProperty(e.prototype,"index",{get:function(){return this._index},set:function(e){this._index=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"subTextureOrigin",{get:function(){return this._subTextureOrigin},set:function(e){this._subTextureOrigin=r.clampf2(e,"texture origin")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"subTextureExtent",{get:function(){return this._subTextureExtent},set:function(e){this._subTextureExtent=r.clampf2(e,"texture extent")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bearing",{get:function(){return this._bearing},set:function(e){this._bearing=e},enumerable:!0,configurable:!0}),e.prototype.bearingFromFontBaseAndOffset=function(e,t,n){this._bearing[0]=t,this._bearing[1]=e-n},Object.defineProperty(e.prototype,"extent",{get:function(){return this._extent},set:function(e){this._extent=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"advance",{get:function(){return this._advance},set:function(e){this._advance=e},enumerable:!0,configurable:!0}),e}();t.Glyph=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t,n){this._lineFeed=e.DEFAULT_LINE_FEED,this._altered=!1,this._text=t||"",this._lineFeed=void 0!==n?n:this._lineFeed}return Object.defineProperty(e.prototype,"length",{get:function(){return this._text.length},enumerable:!0,configurable:!0}),e.prototype.charAt=function(e){return this._text.charAt(e)},e.prototype.charCodeAt=function(e){return this._text.charCodeAt(e)},Object.defineProperty(e.prototype,"text",{get:function(){return this._text},set:function(e){this._text!==e&&(this._altered=!0,this._text=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lineFeed",{get:function(){return this._lineFeed},set:function(e){this._lineFeed!==e&&(this._altered=!0,this._lineFeed=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"altered",{get:function(){return this._altered},set:function(e){this._altered=e},enumerable:!0,configurable:!0}),e.DEFAULT_LINE_FEED="\n",e}();t.Text=r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(5),u=n(7),c=n(2),l=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r._numberOfGlyphs=0,a.assert(t.isWebGL2||t.supportsInstancedArrays,"expected extension 'ANGLE_instanced_arrays' to be supported"),n=void 0!==n&&""!==n?n:r.constructor.name,r._vertices=new s.Buffer(t,n+"VBO"),r._buffers.push(r._vertices),r._texCoords=new s.Buffer(t,n+"TexCoordVBO"),r._buffers.push(r._texCoords),r._origins=new s.Buffer(t,n+"OriginVBO"),r._buffers.push(r._origins),r._tangents=new s.Buffer(t,n+"TangentVBO"),r._buffers.push(r._tangents),r._ups=new s.Buffer(t,n+"UpVBO"),r._buffers.push(r._ups),r}return i(t,e),t.prototype.bindBuffers=function(){var e=this.context.gl,t=this.context.gl2facade;this._vertices.attribEnable(this._vertexLocation,2,e.FLOAT,!1,8,0,!0,!1),t.vertexAttribDivisor(this._vertexLocation,0),this._texCoords.attribEnable(this._texCoordLocation,4,e.FLOAT,!1,16,0,!0,!1),t.vertexAttribDivisor(this._texCoordLocation,1),this._origins.attribEnable(this._originLocation,3,e.FLOAT,!1,12,0,!0,!1),t.vertexAttribDivisor(this._originLocation,1),this._tangents.attribEnable(this._tangentLocation,3,e.FLOAT,!1,12,0,!0,!1),t.vertexAttribDivisor(this._tangentLocation,1),this._ups.attribEnable(this._upLocation,3,e.FLOAT,!1,12,0,!0,!1),t.vertexAttribDivisor(this._upLocation,1)},t.prototype.unbindBuffers=function(){this._vertices.attribDisable(this._vertexLocation,!1,!1),this._texCoords.attribDisable(this._texCoordLocation,!1,!1),this._origins.attribDisable(this._originLocation,!1,!1),this._tangents.attribDisable(this._tangentLocation,!1,!1),this._ups.attribDisable(this._upLocation,!1,!1)},t.prototype.initialize=function(n,r,i,o,a){void 0===n&&(n=0),void 0===r&&(r=1),void 0===i&&(i=2),void 0===o&&(o=3),void 0===a&&(a=4),this._vertexLocation=n,this._texCoordLocation=r,this._originLocation=i,this._tangentLocation=o,this._upLocation=a;var s=this.context.gl,u=e.prototype.initialize.call(this,[s.ARRAY_BUFFER,s.ARRAY_BUFFER,s.ARRAY_BUFFER,s.ARRAY_BUFFER,s.ARRAY_BUFFER]);return this._vertices.data(t.VERTICES,s.STATIC_DRAW),u},t.prototype.update=function(e,t,n,r){this._numberOfGlyphs=e.length/3;var i=this.context.gl;this._texCoords.data(r,i.STATIC_DRAW),this._origins.data(e,i.STATIC_DRAW),this._tangents.data(t,i.STATIC_DRAW),this._ups.data(n,i.STATIC_DRAW)},t.prototype.draw=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0);var n=this.context.gl,r=this.context.gl2facade;this._vertices.attribEnable(this._vertexLocation,2,n.FLOAT,!1,8,0,!0,!1),this._texCoords.attribEnable(this._texCoordLocation,4,n.FLOAT,!1,16,16*e,!0,!1),this._origins.attribEnable(this._originLocation,3,n.FLOAT,!1,12,12*e,!0,!1),this._tangents.attribEnable(this._tangentLocation,3,n.FLOAT,!1,12,12*e,!0,!1),this._ups.attribEnable(this._upLocation,3,n.FLOAT,!1,12,12*e,!0,!1),r.drawArraysInstanced(n.TRIANGLE_STRIP,0,4,t)},Object.defineProperty(t.prototype,"numberOfGlyphs",{get:function(){return this._numberOfGlyphs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valid",{get:function(){var e=this._vertices&&this._vertices.valid,t=this._texCoords&&this._texCoords.valid,n=this._origins&&this._origins.valid,r=this._tangents&&this._tangents.valid,i=this._ups&&this._ups.valid;return this.initialized&&e&&t&&n&&r&&i},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"vertexLocation",{get:function(){return this._vertexLocation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"texCoordLocation",{get:function(){return this._texCoordLocation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"originLocation",{get:function(){return this._originLocation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tangentLocation",{get:function(){return this._tangentLocation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"upLocation",{get:function(){return this._upLocation},enumerable:!0,configurable:!0}),t.VERTICES=new Float32Array([0,0,0,1,1,0,1,1]),o([c.Initializable.assert_initialized()],t.prototype,"draw",null),t}(u.Geometry);t.LabelGeometry=l},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(0),s=n(3),u=n(17),c=n(18),l=n(25),f=function(e){function t(n,r,i){var a=e.call(this,n,r,i)||this;return a._position=o.vec2.fromValues(0,0),a._direction=o.vec2.fromValues(1,0),a._frameSize=o.vec2.create(),a._fontSize=t.DEFAULT_FONTSIZE_PX,a._fontSizeUnit=c.Label.Unit.Pixel,a}return i(t,e),t.prototype.typeset=function(e){void 0===e&&(e=!1);var t=e||this._altered.typesetting||this._altered.static||this._altered.text||this.text.altered;if(t||this._altered.dynamic||e){if(!this.valid)return new u.GlyphVertices(0);var n=o.vec4.create(),r=o.mat4.create();o.mat4.translate(r,s.m4(),o.vec3.fromValues(-1,-1,0)),o.mat4.scale(r,r,o.vec3.fromValues(2/this._frameSize[0],2/this._frameSize[1],1));var i=o.vec2.sub(s.v2(),o.vec2.fromValues(this._frameSize[0],this._frameSize[1]),o.vec2.fromValues(n[3]+n[1],n[2]+n[0])),a=o.vec3.fromValues(.5*i[0],.5*i[1],0);o.vec3.add(a,a,o.vec3.fromValues(n[3],n[2],0)),o.mat4.translate(r,r,a),o.mat4.translate(r,r,o.vec3.fromValues(this._position[0],this._position[1],0));var f=o.vec2.fromValues(1,0),h=o.vec2.angle(f,this._direction);switch(f[0]*this._direction[1]-f[1]*this._direction[0]<0&&(h=-h),o.mat4.rotateZ(r,r,h),this._type){case c.Label.Type.Static:this.staticTransform=o.mat4.clone(r),this.dynamicTransform=s.m4();break;case c.Label.Type.Dynamic:this.staticTransform=s.m4(),this.dynamicTransform=o.mat4.clone(r)}if(this._altered.reset(),this._text.altered=!1,this._color.altered=!1,t){var d=this.vertices();return l.Typesetter.typeset(this,d),d}}},Object.defineProperty(t.prototype,"frameSize",{get:function(){return this._frameSize},set:function(e){o.vec2.equals(this._frameSize,e)||(o.vec2.max(this._frameSize,e,[1,1]),this._altered.alter(this._type))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(e){o.vec2.equals(this._position,e)||(this._position=o.vec2.clone(e),this._altered.alter(this._type))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"direction",{get:function(){return this._direction},set:function(e){o.vec2.normalize(this._direction,e),this._altered.alter(this._type)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fontSizeUnit",{get:function(){return this._fontSizeUnit},set:function(e){a.logIf(e!==c.Label.Unit.Pixel,a.LogLevel.Warning,"font size unit other than 'px' are not supported in position-2d-label, given "+e)},enumerable:!0,configurable:!0}),t.DEFAULT_FONTSIZE_PX=20,t}(c.Label);t.Position2DLabel=f},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(0),s=n(3),u=n(17),c=n(18),l=n(25),f=function(e){function t(n,r,i){var a=e.call(this,n,r,i)||this;return a._position=o.vec3.fromValues(0,0,0),a._direction=o.vec3.fromValues(1,0,0),a._up=o.vec3.fromValues(0,1,0),a._fontSize=t.DEFAULT_FONTSIZE_WORLD,a._fontSizeUnit=c.Label.Unit.World,a}return i(t,e),t.prototype.typeset=function(e){void 0===e&&(e=!1);var t=e||this._altered.typesetting||this._altered.static||this._altered.text||this.text.altered;if(t||this._altered.dynamic||e){if(!this.valid)return new u.GlyphVertices(0);var n=o.mat4.create();o.mat4.translate(n,s.m4(),this._position);var r=o.vec3.cross(s.v3(),this._direction,this._up),i=o.mat4.fromValues(this._direction[0],this._direction[1],this._direction[2],0,this._up[0],this._up[1],this._up[2],0,r[0],r[1],r[2],0,0,0,0,1);switch(o.mat4.mul(n,n,i),this._type){case c.Label.Type.Static:this.staticTransform=o.mat4.clone(n),this.dynamicTransform=s.m4();break;case c.Label.Type.Dynamic:this.staticTransform=s.m4(),this.dynamicTransform=o.mat4.clone(n)}if(this._altered.reset(),this._text.altered=!1,this._color.altered=!1,t){var a=this.vertices();return l.Typesetter.typeset(this,a),a}}},Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(e){this._position=o.vec3.clone(e),this._altered.alter(this._type)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"direction",{get:function(){return this._direction},set:function(e){o.vec3.normalize(this._direction,e),this._altered.alter(this._type)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"up",{get:function(){return this._up},set:function(e){this._up=o.vec3.normalize(this._up,e),this._altered.alter(this._type)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fontSizeUnit",{get:function(){return this._fontSizeUnit},set:function(e){a.logIf(e!==c.Label.Unit.World,a.LogLevel.Warning,"font size unit other than 'world' are not supported in position-3d-label, given "+e)},enumerable:!0,configurable:!0}),t.DEFAULT_FONTSIZE_WORLD=.05,t}(c.Label);t.Position3DLabel=f},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(0),s=n(3),u=n(17),c=n(18),l=n(25),f=function(e){function t(n,r,i){var a=e.call(this,n,r,i)||this;return a._position=o.vec3.fromValues(0,0,0),a._direction=o.vec2.fromValues(1,0),a._fontSize=t.DEFAULT_FONTSIZE_PX,a._fontSizeUnit=c.Label.Unit.Mixed,a}return i(t,e),t.prototype.typeset=function(e){void 0===e&&(e=!1);var t=e||this._altered.typesetting||this._altered.static||this._altered.text||this.text.altered;if(t||this._altered.dynamic||e){if(!this.valid||void 0===this._camera)return new u.GlyphVertices(0);var n=o.vec4.create(),r=o.mat4.create();o.mat4.translate(r,r,o.vec3.fromValues(-1,-1,0)),o.mat4.scale(r,r,o.vec3.fromValues(2/this._camera.viewport[0],2/this._camera.viewport[1],1)),o.mat4.scale(r,r,o.vec3.fromValues(1,1,1));var i=o.vec2.create();o.vec2.sub(i,o.vec2.fromValues(this._camera.viewport[0]/1,this._camera.viewport[1]/1),o.vec2.fromValues(n[3]+n[1],n[2]+n[0]));var f=o.vec3.fromValues(.5*i[0],.5*i[1],0);o.vec3.add(f,f,o.vec3.fromValues(n[3],n[2],0)),o.mat4.translate(r,r,f);var h=o.vec4.fromValues(this._position[0],this._position[1],this._position[2],1);o.vec4.transformMat4(h,h,this._camera.viewProjection);var d=o.mat4.create(),p=h[3];o.mat4.translate(d,d,o.vec3.fromValues(h[0]/p,h[1]/p,h[2]/p)),o.mat4.mul(r,d,r);var _=o.vec2.fromValues(1,0),m=o.vec2.angle(_,this._direction);switch(_[0]*this._direction[1]-_[1]*this._direction[0]<0&&(m=-m),o.mat4.rotateZ(r,r,m),this._camera.viewProjectionInverse?o.mat4.mul(r,this._camera.viewProjectionInverse,r):a.log(a.LogLevel.Warning,"camera.viewProjectionInverse is null"),this._type){case c.Label.Type.Static:this.staticTransform=o.mat4.clone(r),this.dynamicTransform=s.m4();break;case c.Label.Type.Dynamic:this.staticTransform=s.m4(),this.dynamicTransform=o.mat4.clone(r)}if(this._altered.reset(),this._text.altered=!1,this._color.altered=!1,t){var v=this.vertices();return l.Typesetter.typeset(this,v),v}}},Object.defineProperty(t.prototype,"camera",{get:function(){return this._camera},set:function(e){this._camera=e,this._altered.alter(this._type)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(e){this._position=o.vec3.clone(e),this._altered.alter(this._type)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"direction",{get:function(){return this._direction},set:function(e){o.vec2.normalize(this._direction,e),this._altered.alter(this._type)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fontSizeUnit",{get:function(){return this._fontSizeUnit},set:function(e){a.logIf(e!==c.Label.Unit.Mixed,a.LogLevel.Warning,"font size unit other than 'px' are not supported in projected-3d-label, given "+e)},enumerable:!0,configurable:!0}),t.DEFAULT_FONTSIZE_PX=20,t}(c.Label);t.Projected3DLabel=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this._primitives=new Array}return Object.defineProperty(e.prototype,"primitives",{get:function(){return this._primitives},enumerable:!0,configurable:!0}),e.prototype.addPrimitive=function(e){this._primitives.push(e)},e}();t.GLTFMesh=r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o,a,s=n(1),u=n(24);!function(e){e[e.HAS_NORMALS=1]="HAS_NORMALS",e[e.HAS_TANGENTS=2]="HAS_TANGENTS",e[e.HAS_UV=4]="HAS_UV",e[e.HAS_COLORS=8]="HAS_COLORS",e[e.USE_IBL=16]="USE_IBL",e[e.HAS_BASECOLORMAP=32]="HAS_BASECOLORMAP",e[e.HAS_NORMALMAP=64]="HAS_NORMALMAP",e[e.HAS_EMISSIVEMAP=128]="HAS_EMISSIVEMAP",e[e.HAS_METALROUGHNESSMAP=256]="HAS_METALROUGHNESSMAP",e[e.HAS_OCCLUSIONMAP=512]="HAS_OCCLUSIONMAP",e[e.USE_TEX_LOD=1024]="USE_TEX_LOD"}(o=t.GLTFShaderFlags||(t.GLTFShaderFlags={})),function(e){e[e.OPAQUE=0]="OPAQUE",e[e.MASK=1]="MASK",e[e.BLEND=2]="BLEND"}(a=t.GLTFAlphaMode||(t.GLTFAlphaMode={}));var c=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.baseColorTexCoord=0,r.metallicRoughnessTexCoord=0,r.normalTexCoord=0,r.occlusionTexCoord=0,r.emissiveTexCoord=0,r._alphaMode=a.OPAQUE,r._alphaCutoff=1,r._baseColorFactor=s.vec4.fromValues(1,1,1,1),r._metallicFactor=1,r._roughnessFactor=1,r._emissiveFactor=s.vec3.fromValues(0,0,0),r._isDoubleSided=!1,r._normalScale=1,r}return i(t,e),Object.defineProperty(t.prototype,"baseColorTexture",{get:function(){return this._baseColorTexture},set:function(e){this._baseColorTexture=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"metallicRoughnessTexture",{get:function(){return this._metallicRoughnessTexture},set:function(e){this._metallicRoughnessTexture=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"normalTexture",{get:function(){return this._normalTexture},set:function(e){this._normalTexture=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"occlusionTexture",{get:function(){return this._occlusionTexture},set:function(e){this._occlusionTexture=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"emissiveTexture",{get:function(){return this._emissiveTexture},set:function(e){this._emissiveTexture=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"emissiveFactor",{get:function(){return this._emissiveFactor},set:function(e){this._emissiveFactor=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"baseColorFactor",{get:function(){return this._baseColorFactor},set:function(e){this._baseColorFactor=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"metallicFactor",{get:function(){return this._metallicFactor},set:function(e){this._metallicFactor=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"roughnessFactor",{get:function(){return this._roughnessFactor},set:function(e){this._roughnessFactor=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"normalScale",{get:function(){return this._normalScale},set:function(e){this._normalScale=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isDoubleSided",{get:function(){return this._isDoubleSided},set:function(e){this._isDoubleSided=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"alphaMode",{get:function(){return this._alphaMode},set:function(e){this._alphaMode=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"alphaCutoff",{get:function(){return this._alphaCutoff},set:function(e){this._alphaCutoff=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flags",{get:function(){var e=0;return void 0!==this.baseColorTexture&&(e|=o.HAS_BASECOLORMAP),void 0!==this.metallicRoughnessTexture&&(e|=o.HAS_METALROUGHNESSMAP),void 0!==this.normalTexture&&(e|=o.HAS_NORMALMAP),void 0!==this.occlusionTexture&&(e|=o.HAS_OCCLUSIONMAP),void 0!==this.emissiveTexture&&(e|=o.HAS_EMISSIVEMAP),e},enumerable:!0,configurable:!0}),t}(u.Material);t.GLTFPbrMaterial=c},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(7);t.IndexBinding=function(){};t.VertexBinding=function(){};var a=function(e){function t(t,n,r,i,o,a,s){var u=e.call(this,t,s)||this;return u._bindings=n,u._indexBinding=r,u._material=o,u._geometryFlags=a,u._drawMode=i,u}return i(t,e),t.prototype.bindBuffers=function(){this._indexBinding&&this._indexBinding.buffer.bind();for(var e=0,t=this._bindings;e<t.length;e++){var n=t[e];n.buffer.attribEnable(n.attributeIndex,n.size,n.type,n.normalized,n.stride,n.offset,!0,!0)}},t.prototype.unbindBuffers=function(){this._indexBinding&&this._indexBinding.buffer.unbind();for(var e=0,t=this._bindings;e<t.length;e++){var n=t[e];n.buffer.attribDisable(n.attributeIndex,!0,!0)}},t.prototype.draw=function(){var e=this.context.gl;this._indexBinding?e.drawElements(this._drawMode,this._indexBinding.numIndices,this._indexBinding.type,this._indexBinding.offset):e.drawArrays(this._drawMode,0,this._bindings[0].numVertices)},Object.defineProperty(t.prototype,"material",{get:function(){return this._material},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flags",{get:function(){return this._geometryFlags},enumerable:!0,configurable:!0}),t}(o.Geometry);t.GLTFPrimitive=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(31),i=function(){function e(e,t){var n=this;this._altered=!1,this._eventHandler=new r.EventHandler(e,t,void 0),this._eventHandler.pushMouseEnterHandler((function(e,t){return n.onMouseEnter(e,t)})),this._eventHandler.pushMouseLeaveHandler((function(e,t){return n.onMouseLeave(e,t)}))}return e.prototype.onMouseEnter=function(e,t){this._altered=!1},e.prototype.onMouseLeave=function(e,t){this._altered=!0},e.prototype.update=function(){this._eventHandler.update()},e.prototype.reset=function(){this._altered=!1},Object.defineProperty(e.prototype,"altered",{get:function(){return this._altered},enumerable:!0,configurable:!0}),e}();t.TestNavigation=i},function(e,t,n){n(68),n(69),e.exports=n(70)},function(e,t,n){},function(e,t,n){"use strict";var r=this;void 0===String.prototype.repeat&&(String.prototype.repeat=function(e){if(null===this)throw new TypeError("can't convert "+this+" to object");var t=""+this;if((e=+e)!=e&&(e=0),e<0)throw new RangeError("repeat count must be non-negative");if(e===1/0)throw new RangeError("repeat count must be less than infinity");if(e=Math.floor(e),0===t.length||0===e)return"";if(t.length*e>=1<<28)throw new RangeError("repeat count must not overflow maximum string size");for(var n="",r=0;r<e;r++)n+=t;return n}),void 0===String.prototype.startsWith&&(String.prototype.startsWith=function(e,t){return t=t||0,this.indexOf(e,t)===t}),void 0===String.prototype.endsWith&&(String.prototype.endsWith=function(e,t){return(void 0===t||t>this.length)&&(t=this.length),this.substring(t-e.length,t)===e}),void 0===String.prototype.includes&&(String.prototype.includes=function(e,t){return"number"!=typeof t&&(t=0),!(t+e.length>this.length)&&-1!==this.indexOf(e,t)}),void 0===String.prototype.trimLeft&&(String.prototype.trimLeft=function(){return this.replace(/^\s+/,"")}),void 0===String.prototype.trimRight&&(String.prototype.trimRight=function(){return this.replace(/^\s+/,"")}),void 0===Array.prototype.forEach&&(Array.prototype.forEach=function(e,t){for(var n=r.length,i=0;i<n;i++)i in r&&e.call(t,r[i],i,r)}),void 0===Array.prototype.fill&&(Array.prototype.fill=function(e,t,n){if(null===r)throw new TypeError("this is null or not defined");for(var i=Object(r),o=i.length>>>0,a=t>>0,s=a<0?Math.max(o+a,0):Math.min(a,o),u=void 0===n?o:n>>0,c=u<0?Math.max(o+u,0):Math.min(u,o);s<c;)i[s]=e,++s;return i}),void 0===Math.log10&&(Math.log10=function(e){return Math.log(e)*Math.LOG10E}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),[Float32Array,Uint8Array,Int8Array,Uint32Array,Int32Array].forEach((function(e){e.prototype.slice||Object.defineProperty(e.prototype,"slice",{value:Array.prototype.slice}),e.prototype.reduce||Object.defineProperty(e.prototype,"reduce",{value:Array.prototype.reduce}),e.prototype.filter||Object.defineProperty(e.prototype,"filter",{value:Array.prototype.filter}),e.prototype.map||Object.defineProperty(e.prototype,"map",{value:Array.prototype.map}),e.prototype.indexOf||Object.defineProperty(e.prototype,"indexOf",{value:Array.prototype.indexOf})})),void 0===Object.assign&&Object.defineProperty(Object,"assign",{value:function(e,t){if(void 0===e&&null===e)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(e),r=1;r<arguments.length;r++){var i=arguments[r];if(null!=i)for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])}return n},configurable:!0,writable:!0})},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(71)),r(n(121));var i=n(40);t.properties=i;var o=n(32);t.fetch=o;var a=n(127);t.ray_math=a,r(n(128));var s=n(132),u=n(133);!function(e){e.EventBlocker=s.EventBlocker,e.Fullscreen=u.Fullscreen}(t.viewer||(t.viewer={}))},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0});var i=n(72);t.branch=i.branch,t.commit=i.commit,t.version=i.version;var o=n(26);t.Context=o.Context;var a=n(76);t.Canvas=a.Canvas;var s=n(39);t.Controller=s.Controller;var u=n(2);t.Initializable=u.Initializable;var c=n(37);t.ContextMasquerade=c.ContextMasquerade;var l=n(27);t.ExtensionsHash=l.ExtensionsHash;var f=n(12);t.ChangeLookup=f.ChangeLookup;var h=n(28);t.MouseEventProvider=h.MouseEventProvider;var d=n(30);t.TouchEventProvider=d.TouchEventProvider;var p=n(31);t.EventHandler=p.EventHandler;var _=n(5);t.Buffer=_.Buffer;var m=n(20);t.Color=m.Color;var v=n(79);t.ColorScale=v.ColorScale;var g=n(41);t.DefaultFramebuffer=g.DefaultFramebuffer;var b=n(14);t.Framebuffer=b.Framebuffer;var y=n(7);t.Geometry=y.Geometry;var x=n(8);t.Program=x.Program;var E=n(21);t.Renderbuffer=E.Renderbuffer;var T=n(43);t.Renderer=T.Renderer;var w=n(9);t.Shader=w.Shader;var A=n(4);t.Texture2D=A.Texture2D;var M=n(91);t.Texture3D=M.Texture3D;var O=n(92);t.TextureCube=O.TextureCube;var R=n(42);t.VertexArray=R.VertexArray;var S=n(11);t.Wizard=S.Wizard;var P=n(44);t.Camera=P.Camera;var L=n(15);t.CameraModifier=L.CameraModifier;var F=n(93);t.Navigation=F.Navigation;var I=n(45);t.FirstPersonModifier=I.FirstPersonModifier;var C=n(94);t.PanModifier=C.PanModifier;var N=n(29);t.PointerLock=N.PointerLock;var j=n(46);t.TrackballModifier=j.TrackballModifier;var D=n(47);t.TurntableModifier=D.TurntableModifier;var B=n(95);t.ZoomModifier=B.ZoomModifier;var U=n(96);t.NdcFillingRectangle=U.NdcFillingRectangle;var z=n(16);t.NdcFillingTriangle=z.NdcFillingTriangle;var k=n(35);t.AbstractKernel=k.AbstractKernel;var G=n(48);t.AntiAliasingKernel=G.AntiAliasingKernel;var q=n(49);t.RandomSquareKernel=q.RandomSquareKernel;var V=n(35);t.KernelF32=V.KernelF32,t.KernelI32=V.KernelI32,t.KernelI8=V.KernelI8,t.KernelUI32=V.KernelUI32,t.KernelUI8=V.KernelUI8;var H=n(50);t.AccumulatePass=H.AccumulatePass;var W=n(51);t.BlitPass=W.BlitPass;var X=n(102);t.ReadbackPass=X.ReadbackPass;var Y=n(52);t.GaussFilter=Y.GaussFilter;var K=n(106);t.ShadowPass=K.ShadowPass,r(n(53)),r(n(24)),r(n(115));var $=n(0);t.auxiliaries=$;var Z=n(1);t.vec2=Z.vec2,t.vec3=Z.vec3,t.vec4=Z.vec4;var Q=n(1);t.mat2=Q.mat2,t.mat2d=Q.mat2d,t.mat3=Q.mat3,t.mat4=Q.mat4;var J=n(1);t.quat=J.quat;var ee=n(3);t.gl_matrix_extensions=ee;var te=n(19);t.tuples=te},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.branch="HEAD",t.commit="ca45d845a5e34594750c90b94cd592c2e79716fd",t.version="v0.5.2-194-gca45d84"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(0),o=function(){function e(){this._bytesByIdentifier=new Map,this._bytes=0,this._bytesSubject=new r.ReplaySubject(1)}return e.prototype.bytesNext=function(){this._bytesSubject.next([this._bytes,this.bytesToString()])},e.prototype.assertIdentifier=function(e){i.assert(this._bytesByIdentifier.has(e),"allocation identifier unknown")},e.prototype.createUniqueIdentifier=function(e){for(var t=e,n=2;this._bytesByIdentifier.has(t);)t=e+"-"+n,++n;return this._bytesByIdentifier.set(t,0),t},e.prototype.deleteUniqueIdentifier=function(e){i.assert(this._bytesByIdentifier.has(e),"identifier expected to be known for allocation registration"),this._bytesByIdentifier.delete(e)},e.prototype.allocate=function(e,t){if(this.assertIdentifier(e),i.assert(t>=0,"positive number of bytes expected for allocation, given "+t),0!==t){var n=this._bytesByIdentifier.get(e)+t;this._bytesByIdentifier.set(e,n),this._bytes=this._bytes+t,this.bytesNext()}},e.prototype.deallocate=function(e,t){this.assertIdentifier(e);var n=this._bytesByIdentifier.get(e);i.assert(t>=0,"positive number of bytes expected for deallocation, given "+t),i.assert(t<=n,"deallocation cannot exceed previous allocations of "+n+", given "+t),0!==t&&(this._bytesByIdentifier.set(e,n-t),this._bytes=this._bytes-t,this.bytesNext())},e.prototype.reallocate=function(e,t){this.assertIdentifier(e),i.assert(t>=0,"positive number of bytes expected for reallocation, given "+t);var n=this._bytesByIdentifier.get(e);n!==t&&(this._bytes=this._bytes-n,this._bytesByIdentifier.set(e,t),this._bytes=this._bytes+t,this.bytesNext())},e.prototype.allocated=function(e){return void 0===e?this._bytes:(this.assertIdentifier(e),this._bytesByIdentifier.get(e))},e.prototype.toString=function(){var e=new Array;return this._bytesByIdentifier.forEach((function(t,n){e.push(n+": "+i.prettyPrintBytes(t))})),e.join(", ")},e.prototype.bytesToString=function(e){return i.prettyPrintBytes(this.allocated(e))},Object.defineProperty(e.prototype,"bytes",{get:function(){return this._bytes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bytes$",{get:function(){return this._bytesSubject.asObservable()},enumerable:!0,configurable:!0}),e}();t.AllocationRegister=o},function(e){e.exports=[{identifier:"chrome-63",backend:"webgl2",extensions_strive:["EXT_color_buffer_float","EXT_disjoint_timer_query_webgl2","EXT_texture_filter_anisotropic","OES_texture_float_linear","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_renderer_info","WEBGL_debug_shaders","WEBGL_lose_context"]},{identifier:"edge-41",backend:"webgl1",extensions_strive:["ANGLE_instanced_arrays","EXT_frag_depth","EXT_texture_filter_anisotropic","OES_texture_float","OES_texture_float_linear","OES_standard_derivatives","OES_element_index_uint","OES_texture_half_float","OES_texture_half_float_linear","WEBGL_compressed_texture_s3tc","WEBGL_debug_renderer_info","WEBGL_depth_texture"]},{identifier:"ie-11",backend:"webgl1",extensions_strive:["ANGLE_instanced_arrays","EXT_texture_filter_anisotropic","OES_texture_float","OES_texture_float_linear","OES_standard_derivatives","OES_element_index_uint","WEBGL_compressed_texture_s3tc","WEBGL_debug_renderer_info"]},{identifier:"firefox-57",backend:"webgl2",extensions_strive:["EXT_color_buffer_float","EXT_texture_filter_anisotropic","EXT_disjoint_timer_query","OES_texture_float_linear","WEBGL_compressed_texture_s3tc","WEBGL_debug_renderer_info","WEBGL_debug_shaders","WEBGL_lose_context","MOZ_WEBGL_lose_context","MOZ_WEBGL_compressed_texture_s3tc"]},{identifier:"safari-10.1",backend:"webgl1",extensions_strive:["compressed_texture_pvrtc","compressed_texture_s3tc","debug_renderer_info","disjoint_timer_query","draw_buffers","element_index_uint","frag_depth","instanced_arrays","lose_context","sRGB","shader_texture_lod","standard_derivatives","texture_filter_anisotropic","texture_float","texture_float_linear","texture_half_float","texture_half_float_linear","vertex_array_object"],functions_undefine:["readBuffer"]},{identifier:"no-WEBGL_draw_buffers",backend:"webgl1",extensions_conceal:["WEBGL_draw_buffers"]},{identifier:"no-readBuffer",extensions_hash:"100000",functions_undefine:["readBuffer"]},{identifier:"webgl1",extensions_hash:"1+++++"},{identifier:"webgl2",extensions_hash:"2+++++"}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(26),o=function(){function e(e){this.drawBuffers=void 0,r.assert(void 0!==e,"gl2 facade expects a valid WebGL context"),this.queryHalfFloatSupport(e),this.queryColorAttachments(e),this.queryInstancedArraySupport(e),this.queryDrawBuffersSupport(e),this.queryVertexArrayObjectSupport(e),this.queryMaxUniformVec3Components(e),this.queryBufferSubDataInterface(e),this.queryTexImageInterface(e)}return Object.defineProperty(e.prototype,"HALF_FLOAT",{get:function(){return this._halfFloat},enumerable:!0,configurable:!0}),e.prototype.queryHalfFloatSupport=function(e){switch(e.backend){case i.Context.BackendType.WebGL1:this._halfFloat=e.supportsTextureHalfFloat&&e.textureHalfFloat?e.textureHalfFloat.HALF_FLOAT_OES:void 0;break;case i.Context.BackendType.WebGL2:default:this._halfFloat=e.gl.HALF_FLOAT}},Object.defineProperty(e.prototype,"COLOR_ATTACHMENT_MIN",{get:function(){return this._colorAttachmentMin},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT_MAX",{get:function(){return this._colorAttachmentMax},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT0",{get:function(){return this._colorAttachments[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT1",{get:function(){return this._colorAttachments[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT2",{get:function(){return this._colorAttachments[2]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT3",{get:function(){return this._colorAttachments[3]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT4",{get:function(){return this._colorAttachments[4]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT5",{get:function(){return this._colorAttachments[5]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT6",{get:function(){return this._colorAttachments[6]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT7",{get:function(){return this._colorAttachments[7]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT8",{get:function(){return this._colorAttachments[8]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT9",{get:function(){return this._colorAttachments[9]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT10",{get:function(){return this._colorAttachments[10]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT11",{get:function(){return this._colorAttachments[11]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT12",{get:function(){return this._colorAttachments[12]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT13",{get:function(){return this._colorAttachments[13]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT14",{get:function(){return this._colorAttachments[14]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"COLOR_ATTACHMENT15",{get:function(){return this._colorAttachments[15]},enumerable:!0,configurable:!0}),e.prototype.queryColorAttachments=function(e){var t=e.gl;switch(this._colorAttachments=new Array(16),this._colorAttachments[0]=t.COLOR_ATTACHMENT0,e.backend){case i.Context.BackendType.WebGL1:var n=e.supportsDrawBuffers?e.drawBuffers:void 0;if(this._colorAttachmentMin=this._colorAttachments[0],this._colorAttachmentMax=this._colorAttachmentMin+(n?t.getParameter(n.MAX_COLOR_ATTACHMENTS_WEBGL):0),this._colorAttachments[0]=n?n.COLOR_ATTACHMENT0_WEBGL:t.COLOR_ATTACHMENT0,!n)break;for(var r=1;r<16;++r)this._colorAttachments[r]=n.COLOR_ATTACHMENT0_WEBGL+r;break;case i.Context.BackendType.WebGL2:default:for(this._colorAttachmentMin=e.gl.COLOR_ATTACHMENT0,this._colorAttachmentMax=e.gl.COLOR_ATTACHMENT0+t.getParameter(t.MAX_COLOR_ATTACHMENTS),r=0;r<16;++r)this._colorAttachments[r]=t.COLOR_ATTACHMENT0+r}},e.prototype.queryInstancedArraySupport=function(e){(e.isWebGL2||e.supportsInstancedArrays)&&(this.drawArraysInstanced=e.isWebGL2?function(t,n,r,i){return e.gl.drawArraysInstanced(t,n,r,i)}:function(t,n,r,i){return e.instancedArrays.drawArraysInstancedANGLE(t,n,r,i)},this.drawElementsInstanced=e.isWebGL2?function(t,n,r,i,o){return e.gl.drawElementsInstanced(t,n,r,i,o)}:function(t,n,r,i,o){return e.instancedArrays.drawElementsInstancedANGLE(t,n,r,i,o)},this.vertexAttribDivisor=e.isWebGL2?function(t,n){return e.gl.vertexAttribDivisor(t,n)}:function(t,n){return e.instancedArrays.vertexAttribDivisorANGLE(t,n)})},e.prototype.queryDrawBuffersSupport=function(e){(e.isWebGL2||e.supportsDrawBuffers)&&(this.drawBuffers=e.isWebGL2?function(t){return e.gl.drawBuffers(t)}:function(t){return e.drawBuffers.drawBuffersWEBGL(t)})},e.prototype.queryVertexArrayObjectSupport=function(e){(e.isWebGL2||e.supportsVertexArrayObject)&&(this.createVertexArray=e.isWebGL2?function(){return e.gl.createVertexArray()}:function(){return e.vertexArrayObject.createVertexArrayOES()},this.deleteVertexArray=e.isWebGL2?function(t){return e.gl.deleteVertexArray(t)}:function(t){return e.vertexArrayObject.deleteVertexArrayOES(t)},this.isVertexArray=e.isWebGL2?function(t){return e.gl.isVertexArray(t)}:function(t){return e.vertexArrayObject.isVertexArrayOES(t)},this.bindVertexArray=e.isWebGL2?function(t){return e.gl.bindVertexArray(t)}:function(t){return e.vertexArrayObject.bindVertexArrayOES(t)})},Object.defineProperty(e.prototype,"maxUniformVec3Components",{get:function(){return this._maxUniformVec3Components},enumerable:!0,configurable:!0}),e.prototype.queryMaxUniformVec3Components=function(e){var t=e.gl;this._maxUniformVec3Components=e.isWebGL2?t.getParameter(t.MAX_VERTEX_UNIFORM_COMPONENTS):3*t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS)},e.prototype.queryBufferSubDataInterface=function(e){var t=e.gl;e.isWebGL2?this.bufferSubData=function(e,n,r,i,o){return void 0===o&&(o=0),t.bufferSubData(e,n,r,i,o)}:this.bufferSubData=function(e,n,i,o,a){return void 0===o&&(o=0),void 0===a&&(a=0),r.logIf(0!==o,r.LogLevel.Warning,"srcOffset ignored (not supported in WebGL)"),r.logIf(0!==a,r.LogLevel.Warning,"length ignored (not supported in WebGL)"),t.bufferSubData(e,n,i)}},e.prototype.queryTexImageInterface=function(e){var t=e.gl;e.isWebGL2?this.texImage2D=function(e,n,i,o,a,s,u,c,l,f){return l instanceof ArrayBuffer?t.texImage2D(e,n,i,o,a,s,u,c,void 0===l?null:l,f):(r.assert(void 0===f,"offset expected to be undefined for non ArrayBuffer source"),t.texImage2D(e,n,i,o,a,s,u,c,void 0===l?null:l))}:this.texImage2D=function(e,n,r,i,o,a,s,u,c,l){return void 0===c?t.texImage2D(e,n,r,i,o,a,s,u,null):c instanceof Int8Array||c instanceof Uint8Array||c instanceof Uint8ClampedArray||c instanceof Int16Array||c instanceof Uint16Array||c instanceof Int32Array||c instanceof Uint32Array||c instanceof Float32Array||c instanceof Float64Array||c instanceof DataView?t.texImage2D(e,n,r,i,o,a,s,u,c):t.texImage2D(e,n,r,s,u,c)},e.supportsTexImage3D?this.texImage3D=function(e,n,i,o,a,s,u,c,l,f,h){return f instanceof ArrayBuffer?t.texImage3D(e,n,i,o,a,s,u,c,l,void 0===f?null:f,h):(r.assert(void 0===h,"offset expected to be undefined for non ArrayBuffer source"),t.texImage3D(e,n,i,o,a,s,u,c,l,void 0===f?null:f))}:this.texImage3D=function(e,t,n,i,o,a,s,u,c,l,f){return r.assert(!1,"texImage3D not supported on this context")}},e}();t.GL2Facade=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(10),a=n(1),s=n(3),u=n(0),c=n(19),l=n(20),f=n(26),h=n(39),d=n(28),p=n(78),_=n(30),m=n(11),v=function(e){function t(n,r){var i=e.call(this)||this;i._framePrecisionSubject=new o.ReplaySubject(1),i._size=[0,0],i._sizeSubject=new o.ReplaySubject(1),i._frameScaleSubject=new o.ReplaySubject(1),i._frameSizeSubject=new o.ReplaySubject(1),i._element=n instanceof HTMLCanvasElement?n:document.getElementById(n),i.observe(i._element),i._mouseEventProvider=new d.MouseEventProvider(i._element,200),i._touchEventProvider=new _.TouchEventProvider(i._element,200);var a,h=i._element.dataset;i._context=f.Context.request(i._element,r),i.configureController(h),i.configureSizeAndScale(h),h.clearColor&&(a=s.parseVec4(h.clearColor),u.logIf(void 0===a,u.LogLevel.Warning,"data-clear-color could not be parsed, given '"+h.clearColor+"'")),i._clearColor=a?new l.Color(c.tuple4(a)):t.DEFAULT_CLEAR_COLOR;var p=h.accumulationFormat?h.accumulationFormat:t.DEFAULT_FRAME_PRECISION;return p in m.Wizard.Precision||(p=t.DEFAULT_FRAME_PRECISION,u.log(u.LogLevel.Warning,"unknown frame precision '"+h.accumulationFormat+"' changed to '"+p+"'")),i._framePrecision=p,i.framePrecisionNext(),i}return i(t,e),t.prototype.configureController=function(e){var n,r;this._controller=new h.Controller,this._controller.block(),e.multiFrameNumber&&(n=parseInt(e.multiFrameNumber,10),u.logIf(isNaN(n),u.LogLevel.Warning,"data-multi-frame-number could not be parsed, given '"+e.multiFrameNumber+"'")),e.debugFrameNumber&&(r=parseInt(e.debugFrameNumber,10),u.logIf(isNaN(r),u.LogLevel.Warning,"data-debug-frame-number could not be parsed, given '"+e.debugFrameNumber+"'")),this._controller.multiFrameNumber=n||t.DEFAULT_MULTI_FRAME_NUMBER,this._controller.debugFrameNumber=r||0;var i=!!n&&n!==this._controller.multiFrameNumber;u.logIf(i,u.LogLevel.Warning,"data-multi-frame-number changed to "+this._controller.multiFrameNumber+", given '"+e.multiFrameNumber+"'");var o=!!r&&r!==this._controller.debugFrameNumber;u.logIf(o,u.LogLevel.Warning,"data-debug-frame-number changed to "+this._controller.debugFrameNumber+", given '"+e.debugFrameNumber+"'")},t.prototype.configureSizeAndScale=function(e){var t,n;e.frameScale&&(t=s.parseVec2(e.frameScale),u.logIf(void 0!==e.frameScale&&void 0===t,u.LogLevel.Warning,"data-frame-scale could not be parsed, given '"+e.frameScale+"'")),this._frameScale=t?c.tuple2(t):[1,1],e.frameSize&&(n=s.parseVec2(e.frameSize),u.logIf(void 0!==e.frameSize&&void 0===n,u.LogLevel.Warning,"data-frame-size could not be parsed, given '"+e.frameSize+"'")),this._favorSizeOverScale=void 0!==n,this._frameSize=n?c.tuple2(n):[this._size[0],this._size[1]],this.onResize()},t.prototype.retrieveSize=function(){var e=p.Resizable.elementSize(this._element);void 0!==e?(this._size=[e[0],e[1]],this.sizeNext()):this._size=[0,0]},t.prototype.onResize=function(){if(this.retrieveSize(),0===this._size[0]||0===this._size[1])return u.log(u.LogLevel.Debug,"canvas width or height is invalid, resize discarded and controller blocked"),void this._controller.block();this._element.width=this._size[0],this._element.height=this._size[1],this._renderer&&this._controller.block(),this._favorSizeOverScale?this.frameSize=this._frameSize:this.frameScale=this._frameScale,this._renderer&&(this._controller.unblock(),this._renderer.swap())},t.prototype.framePrecisionNext=function(){this._framePrecisionSubject.next(this._framePrecision)},t.prototype.sizeNext=function(){this._sizeSubject.next(this._size)},t.prototype.frameScaleNext=function(){this._frameScaleSubject.next(this._frameScale)},t.prototype.frameSizeNext=function(){this._frameSizeSubject.next(this._frameSize)},t.prototype.bind=function(e){var t=this;this._renderer!==e&&(this.unbind(),void 0!==e&&(u.assert(this._controller.blocked,"expected controller to be blocked"),this._renderer=e,this._renderer.initialize(this.context,(function(e){return t._controller.update(e)}),this._mouseEventProvider,this._touchEventProvider),this._renderer.frameSize=this._frameSize,this._renderer.clearColor=this._clearColor.rgba,this._renderer.framePrecision=this._framePrecision,this._renderer.debugTexture=-1,this._controller.controllable=this._renderer,this._controller.unblock()))},t.prototype.unbind=function(){void 0!==this._renderer&&(this._controller.block(),this._controller.controllable=void 0,this._renderer=void 0)},t.prototype.dispose=function(){e.prototype.dispose.call(this),this._renderer&&(this._renderer.uninitialize(),this.unbind())},t.prototype.resize=function(){this.onResize()},Object.defineProperty(t.prototype,"controller",{get:function(){return this._controller},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"renderer",{get:function(){return this._renderer},set:function(e){this.bind(e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"frameScale",{get:function(){return this._frameScale},set:function(e){if(isFinite(e[0])&&isFinite(e[1])){u.logIf(e[0]<0||e[0]>2,u.LogLevel.Info,"frame width scale clamped to [0.0,2.0], given "+e[0]),u.logIf(e[1]<0||e[1]>2,u.LogLevel.Info,"frame height scale clamped to [0.0,2.0], given "+e[0]);var t=a.vec2.create();s.clamp2(t,e,[0,0],[2,2]);var n=a.vec2.create();a.vec2.mul(n,this._size,t),a.vec2.max(n,[1,1],n),a.vec2.round(n,n),a.vec2.div(t,n,this._size),u.logIf(!a.vec2.exactEquals(t,e),2,"frame scale was adjusted to "+t.toString()+", given "+e.toString()),this._frameScale=c.tuple2(t),this._frameSize=c.tuple2(n),this._favorSizeOverScale=!1,this.frameScaleNext(),this.frameSizeNext(),this._renderer&&(this._renderer.frameSize=this._frameSize)}else u.log(u.LogLevel.Warning,"expected finite frame size, non-finite values ignored, given ["+e+"]")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"frameScale$",{get:function(){return this._frameScaleSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"frameSize",{get:function(){return this._frameSize},set:function(e){if(isFinite(e[0])&&isFinite(e[1])){u.logIf(e[0]<1||e[0]>this._size[0],u.LogLevel.Info,"frame width scale clamped to [1,"+this._size[0]+"], given "+e[0]),u.logIf(e[1]<1||e[1]>this._size[1],u.LogLevel.Info,"frame height scale clamped to [1, "+this._size[1]+"], given "+e[1]);var t=a.vec2.create();s.clamp2(t,e,[1,1],this._size),a.vec2.round(t,t),u.logIf(!a.vec2.exactEquals(t,e),u.LogLevel.Warning,"frame size was adjusted to "+t.toString()+", given "+e.toString());var n=a.vec2.create();a.vec2.div(n,t,this._size),this._frameScale=c.tuple2(n),this._frameSize=c.tuple2(t),this._favorSizeOverScale=!a.vec2.exactEquals(this._frameSize,this._size),this.frameScaleNext(),this.frameSizeNext(),this._renderer&&(this._renderer.frameSize=this._frameSize)}else u.log(u.LogLevel.Warning,"expected finite frame size, non-finite values ignored, given ["+e+"]")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"frameSize$",{get:function(){return this._frameSizeSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"clearColor",{get:function(){return this._clearColor},set:function(e){this._clearColor=e,this._renderer&&(this._renderer.clearColor=this._clearColor.rgba)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"framePrecision",{get:function(){return this._framePrecision},set:function(e){this._framePrecision=e,this._renderer&&(this._renderer.framePrecision=this._framePrecision,this._framePrecision=this._renderer.framePrecision),this.framePrecisionNext()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"framePrecision$",{get:function(){return this._framePrecisionSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this._context},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"backend",{get:function(){return this._context.backendString},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size$",{get:function(){return this._sizeSubject.asObservable()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this._size[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._size[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"element",{get:function(){return this._element},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"mouseEventProvider",{get:function(){return this._mouseEventProvider},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"touchEventProvider",{get:function(){return this._touchEventProvider},enumerable:!0,configurable:!0}),t.DEFAULT_CLEAR_COLOR=new l.Color([.203,.227,.25,1]),t.DEFAULT_FRAME_PRECISION=m.Wizard.Precision.auto,t.DEFAULT_MULTI_FRAME_NUMBER=0,t}(p.Resizable);t.Canvas=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IS_IE11="undefined"==typeof navigator?void 0:/MSIE 11|Windows/i.test(navigator.userAgent),t.IS_EDGE="undefined"==typeof navigator?void 0:/Edge\/\d./i.test(navigator.userAgent)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(){var t=this;if(this._resizeEventListener=function(){return e.resize()},this._mutationEventListener=function(){t._mutationObserver.takeRecords(),e.resize()},0===e.instances.length){var n="on"+e.EVENT_IDENTIFIER;e.eventSupported=document&&(n in document.documentElement||n in document.body),r.logIf(!e.eventSupported,r.LogLevel.Warning,"resize event not supported")}0===e.instances.length&&e.eventSupported&&window.addEventListener(e.EVENT_IDENTIFIER,this._resizeEventListener),e.instances.push(this)}return e.resize=function(){r.assert(e.instances.length>0,"resize event received without a single resizable registered"),e.instances.forEach((function(e){return e.onResize()}))},e.elementSize=function(e){if(void 0===e||void 0===window||"number"!=typeof window.devicePixelRatio)return[0,0];var t=window.devicePixelRatio,n=getComputedStyle(e);if(null!==n.width&&n.width.endsWith("px")&&null!==n.height&&n.height.endsWith("px")){var i=[parseFloat(n.width),parseFloat(n.height)];return[Math.round(i[0]*t),Math.round(i[1]*t)]}r.log(r.LogLevel.Debug,"computed element size expected in 'px', given "+n.width+" "+n.height)},e.prototype.observe=function(t){void 0!==t&&(this._mutationObserver=new MutationObserver(this._mutationEventListener)),this._mutationObserver.observe(t,e.MUTATION_OBSERVER_CONFIG)},e.prototype.dispose=function(){var t=e.instances.indexOf(this);r.assert(-1!==t,"invalid reference counting of resizable instances"),e.instances.splice(t,1),0===e.instances.length&&e.eventSupported&&window.removeEventListener(e.EVENT_IDENTIFIER,this._resizeEventListener),this._mutationObserver&&this._mutationObserver.disconnect()},e.EVENT_IDENTIFIER="resize",e.instances=[],e.eventSupported=!1,e.MUTATION_OBSERVER_CONFIG={attributes:!0,attributeFilter:["style","class"],childList:!0,subtree:!0},e}();t.Resizable=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(0),o=n(20),a=n(32),s=function(){function e(){this._colors=new Array}return e.stride=function(t){switch(t){default:case e.ArrayType.RGB:case e.ArrayType.RGBf:return 3;case e.ArrayType.RGBA:case e.ArrayType.RGBAf:return 4}},e.fromPreset=function(t,n,r){return a.fetchJsonAsync(t,(function(t){for(var i,o=0,a=t;o<a.length;o++){var s=a[o];if(s.identifier===n){i=s;break}}if(void 0!==i){for(var u=i.format,c=e.stride(u),l=i.colors,f=l.length-1,h=0;h<l.length;++h)if(l[h].length===r*c){f=h;break}var d,p=l[f],_=i.positions;if(void 0===_)return e.fromArray(p,u,r,void 0);for(h=0;h<_.length;++h)_[h].length===p.length&&(d=_[h]);return e.fromArray(p,u,r,d)}}),e.SCHEMA.properties)},e.fromArray=function(t,n,r,a){if(0===r||0===t.length)return new e;for(var s=t,u=e.stride(n),c=s.length/u,l=new Array(c),f=0;f<s.length;f+=u){var h=new o.Color;switch(n){case e.ArrayType.RGB:h.fromUI8(s[f+0],s[f+1],s[f+2]);break;case e.ArrayType.RGBA:h.fromUI8(s[f+0],s[f+1],s[f+2],s[f+3]);break;case e.ArrayType.RGBf:h.fromF32(s[f+0],s[f+1],s[f+2]);break;case e.ArrayType.RGBAf:h.fromF32(s[f+0],s[f+1],s[f+2],s[f+3])}l[f/u]=h}var d=new e;if(void 0===a&&r===c)return d._colors=l,d;if(1===r&&d._colors.push(l[0]),void 0===a)for((a=new Array(c))[0]=0,f=1;f<c;++f)a[f]=f/(c-1);i.assert(a.length===l.length,"expected number of positions to match number of colors");var p=0,_=p+1,m=c-1;for(f=0;f<r;++f){var v=0===f?0:f/(r-1);if(v<=a[p])d._colors.push(l[p]);else if(a[m]<=v)d._colors.push(l[m]);else{for(var g=p+1;g<c;++g)if(!(a[g]<v)){_=g,p=g-1;break}var b=(v-a[p])/(a[_]-a[p]);d._colors.push(o.Color.mix(l[p],l[_],b,o.Color.Space.LAB))}}return d},e.prototype.lerp=function(t,n){if(void 0===n&&(n=o.Color.Space.LAB),0!==this._colors.length){if(1===this._colors.length)return this._colors[0];var a=r.clamp(t,0,1);if(a<=0)return this._colors[0];if(a>=1)return this._colors[this._colors.length-1];var s=t*this._colors.length,u=Math.floor(s),c=u+1;return i.assert(c<this._colors.length,"expected upper not exceed maximum color index"),this._hint===e.InterpolationHint.Nearest?this._colors[s-u>c-s?u:c]:o.Color.mix(this._colors[u],this._colors[c],s-u,n)}},e.prototype.color=function(e){if(!(e<0||e>=this._colors.length))return this._colors[e]},Object.defineProperty(e.prototype,"colors",{get:function(){return this._colors},set:function(e){this._colors=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hint",{get:function(){return this._hint},set:function(e){this._hint=e},enumerable:!0,configurable:!0}),e.prototype.bitsUI8=function(e,t){void 0===e&&(e=o.Color.Space.RGB),void 0===t&&(t=!0);for(var n=this._colors.length,r=t?4:3,i=new Uint8Array(n*r),a=0;a<n;++a){var s=this._colors[a].tuple(e,t);i[a*r+0]=255*s[0],i[a*r+1]=255*s[1],i[a*r+2]=255*s[2],t&&4===s.length&&(i[a*r+3]=255*s[3])}return i},e.prototype.bitsF32=function(e,t){void 0===e&&(e=o.Color.Space.RGB),void 0===t&&(t=!0);for(var n=this._colors.length,r=t?4:3,i=new Float32Array(n*r),a=0;a<n;++a){var s=this._colors[a].tuple(e,t);i[a*r+0]=s[0],i[a*r+1]=s[1],i[a*r+2]=s[2],t&&4===s.length&&(i[a*r+3]=s[3])}return i},Object.defineProperty(e.prototype,"length",{get:function(){return this._colors.length},enumerable:!0,configurable:!0}),e.SCHEMA=n(90),e}();t.ColorScale=s,function(e){!function(e){e.Linear="linear",e.Nearest="nearest"}(e.InterpolationHint||(e.InterpolationHint={})),function(e){e.sequential="sequential",e.diverging="diverging",e.qualitative="qualitative"}(e.ScaleType||(e.ScaleType={})),function(e){e.RGB="rgb",e.RGBf="rgbf",e.RGBA="rgba",e.RGBAf="rgbaf"}(e.ArrayType||(e.ArrayType={}))}(s=t.ColorScale||(t.ColorScale={})),t.ColorScale=s},function(e,t,n){"use strict";var r=e.exports.Validator=n(81);e.exports.ValidatorResult=n(13).ValidatorResult,e.exports.ValidationError=n(13).ValidationError,e.exports.SchemaError=n(13).SchemaError,e.exports.SchemaScanResult=n(34).SchemaScanResult,e.exports.scan=n(34).scan,e.exports.validate=function(e,t,n){return(new r).validate(e,t,n)}},function(e,t,n){"use strict";var r=n(33),i=n(89),o=n(13),a=n(34).scan,s=o.ValidatorResult,u=o.SchemaError,c=o.SchemaContext,l=function e(){this.customFormats=Object.create(e.prototype.customFormats),this.schemas={},this.unresolvedRefs=[],this.types=Object.create(h),this.attributes=Object.create(i.validators)};function f(e){var t="string"==typeof e?e:e.$ref;return"string"==typeof t&&t}l.prototype.customFormats={},l.prototype.schemas=null,l.prototype.types=null,l.prototype.attributes=null,l.prototype.unresolvedRefs=null,l.prototype.addSchema=function(e,t){var n=this;if(!e)return null;var r=a(t||"/",e),i=t||e.id;for(var o in r.id)this.schemas[o]=r.id[o];for(var o in r.ref)this.unresolvedRefs.push(o);return this.unresolvedRefs=this.unresolvedRefs.filter((function(e){return void 0===n.schemas[e]})),this.schemas[i]},l.prototype.addSubSchemaArray=function(e,t){if(Array.isArray(t))for(var n=0;n<t.length;n++)this.addSubSchema(e,t[n])},l.prototype.addSubSchemaObject=function(e,t){if(t&&"object"==typeof t)for(var n in t)this.addSubSchema(e,t[n])},l.prototype.setSchemas=function(e){this.schemas=e},l.prototype.getSchema=function(e){return this.schemas[e]},l.prototype.validate=function(e,t,n,i){if("boolean"!=typeof t&&"object"!=typeof t||null===t)throw new u("Expected `schema` to be an object or boolean");n||(n={});var o=n.propertyName||"instance",s=r.resolve(n.base||"/",t.id||"");if(!i){(i=new c(t,n,o,s,Object.create(this.schemas))).schemas[s]||(i.schemas[s]=t);var l=a(s,t);for(var f in l.id){var h=l.id[f];i.schemas[f]=h}}var d=this.validateSchema(e,t,n,i);if(!d)throw new Error("Result undefined");return d},l.prototype.validateSchema=function(e,t,n,r){var a=new s(e,t,n,r);if("boolean"==typeof t)!0===t?t={}:!1===t&&(t={type:[]});else if(!t)throw new Error("schema is undefined");if(t.extends)if(Array.isArray(t.extends)){var l={schema:t,ctx:r};t.extends.forEach(this.schemaTraverser.bind(this,l)),t=l.schema,l.schema=null,l.ctx=null,l=null}else t=o.deepMerge(t,this.superResolve(t.extends,r));var h=f(t);if(h){var d=this.resolve(t,h,r),p=new c(d.subschema,n,r.propertyPath,d.switchSchema,r.schemas);return this.validateSchema(e,d.subschema,n,p)}var _=n&&n.skipAttributes||[];for(var m in t)if(!i.ignoreProperties[m]&&_.indexOf(m)<0){var v=null,g=this.attributes[m];if(g)v=g.call(this,e,t,n,r);else if(!1===n.allowUnknownAttributes)throw new u("Unsupported attribute: "+m,t);v&&a.importErrors(v)}if("function"==typeof n.rewrite){var b=n.rewrite.call(this,e,t,n,r);a.instance=b}return a},l.prototype.schemaTraverser=function(e,t){e.schema=o.deepMerge(e.schema,this.superResolve(t,e.ctx))},l.prototype.superResolve=function(e,t){var n=f(e);return n?this.resolve(e,n,t).subschema:e},l.prototype.resolve=function(e,t,n){if(t=n.resolve(t),n.schemas[t])return{subschema:n.schemas[t],switchSchema:t};var i=r.parse(t),a=i&&i.hash,s=a&&a.length&&t.substr(0,t.length-a.length);if(!s||!n.schemas[s])throw new u("no such schema <"+t+">",e);var c=o.objectGetPath(n.schemas[s],a.substr(1));if(void 0===c)throw new u("no such schema "+a+" located in <"+s+">",e);return{subschema:c,switchSchema:t}},l.prototype.testType=function(e,t,n,r,i){if(void 0!==i){if(null===i)throw new u('Unexpected null in "type" keyword');if("function"==typeof this.types[i])return this.types[i].call(this,e);if(i&&"object"==typeof i){var o=this.validateSchema(e,i,n,r);return void 0===o||!(o&&o.errors.length)}return!0}};var h=l.prototype.types={};h.string=function(e){return"string"==typeof e},h.number=function(e){return"number"==typeof e&&isFinite(e)},h.integer=function(e){return"number"==typeof e&&e%1==0},h.boolean=function(e){return"boolean"==typeof e},h.array=function(e){return Array.isArray(e)},h.null=function(e){return null===e},h.date=function(e){return e instanceof Date},h.any=function(e){return!0},h.object=function(e){return e&&"object"==typeof e&&!Array.isArray(e)&&!(e instanceof Date)},e.exports=l},function(e,t,n){(function(e,r){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){t&&t.nodeType,e&&e.nodeType;var a="object"==typeof r&&r;a.global!==a&&a.window!==a&&a.self;var s,u=2147483647,c=/^xn--/,l=/[^\x20-\x7E]/,f=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,p=String.fromCharCode;function _(e){throw new RangeError(h[e])}function m(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function v(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+m((e=e.replace(f,".")).split("."),t).join(".")}function g(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function b(e){return m(e,(function(e){var t="";return e>65535&&(t+=p((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+p(e)})).join("")}function y(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,n){var r=0;for(e=n?d(e/700):e>>1,e+=d(e/t);e>455;r+=36)e=d(e/35);return d(r+36*e/(e+38))}function E(e){var t,n,r,i,o,a,s,c,l,f,h,p=[],m=e.length,v=0,g=128,y=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&_("not-basic"),p.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<m;){for(o=v,a=1,s=36;i>=m&&_("invalid-input"),((c=(h=e.charCodeAt(i++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:36)>=36||c>d((u-v)/a))&&_("overflow"),v+=c*a,!(c<(l=s<=y?1:s>=y+26?26:s-y));s+=36)a>d(u/(f=36-l))&&_("overflow"),a*=f;y=x(v-o,t=p.length+1,0==o),d(v/t)>u-g&&_("overflow"),g+=d(v/t),v%=t,p.splice(v++,0,g)}return b(p)}function T(e){var t,n,r,i,o,a,s,c,l,f,h,m,v,b,E,T=[];for(m=(e=g(e)).length,t=128,n=0,o=72,a=0;a<m;++a)(h=e[a])<128&&T.push(p(h));for(r=i=T.length,i&&T.push("-");r<m;){for(s=u,a=0;a<m;++a)(h=e[a])>=t&&h<s&&(s=h);for(s-t>d((u-n)/(v=r+1))&&_("overflow"),n+=(s-t)*v,t=s,a=0;a<m;++a)if((h=e[a])<t&&++n>u&&_("overflow"),h==t){for(c=n,l=36;!(c<(f=l<=o?1:l>=o+26?26:l-o));l+=36)E=c-f,b=36-f,T.push(p(y(f+E%b,0))),c=d(E/b);T.push(p(y(c,0))),o=x(n,v,r==i),n=0,++r}++n,++t}return T.join("")}s={version:"1.4.1",ucs2:{decode:g,encode:b},decode:E,encode:T,toASCII:function(e){return v(e,(function(e){return l.test(e)?"xn--"+T(e):e}))},toUnicode:function(e){return v(e,(function(e){return c.test(e)?E(e.slice(4).toLowerCase()):e}))}},void 0===(i=function(){return s}.call(t,n,t,e))||(e.exports=i)}()}).call(this,n(83)(e),n(84))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,n){"use strict";t.decode=t.parse=n(87),t.encode=t.stringify=n(88)},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,o){t=t||"&",n=n||"=";var a={};if("string"!=typeof e||0===e.length)return a;var s=/\+/g;e=e.split(t);var u=1e3;o&&"number"==typeof o.maxKeys&&(u=o.maxKeys);var c=e.length;u>0&&c>u&&(c=u);for(var l=0;l<c;++l){var f,h,d,p,_=e[l].replace(s,"%20"),m=_.indexOf(n);m>=0?(f=_.substr(0,m),h=_.substr(m+1)):(f=_,h=""),d=decodeURIComponent(f),p=decodeURIComponent(h),r(a,d)?i(a[d])?a[d].push(p):a[d]=[a[d],p]:a[d]=p}return a};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,s){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?o(a(e),(function(a){var s=encodeURIComponent(r(a))+n;return i(e[a])?o(e[a],(function(e){return s+encodeURIComponent(r(e))})).join(t):s+encodeURIComponent(r(e[a]))})).join(t):s?encodeURIComponent(r(s))+n+encodeURIComponent(r(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function o(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t,n){"use strict";var r=n(13),i=r.ValidatorResult,o=r.SchemaError,a={ignoreProperties:{id:!0,default:!0,description:!0,title:!0,exclusiveMinimum:!0,exclusiveMaximum:!0,additionalItems:!0,$schema:!0,$ref:!0,extends:!0}},s=a.validators={};function u(e,t,n,r,i){var o=t.throwError;t.throwError=!1;var a=this.validateSchema(e,i,t,n);return t.throwError=o,!a.valid&&r instanceof Function&&r(a),a.valid}function c(e,t){if(Object.hasOwnProperty.call(e,t))return e[t];if(t in e)for(;e=Object.getPrototypeOf(e);)if(Object.propertyIsEnumerable.call(e,t))return e[t]}function l(e,t,n,r,i,o){if(this.types.object(e)&&(!t.properties||void 0===t.properties[i]))if(!1===t.additionalProperties)o.addError({name:"additionalProperties",argument:i,message:"additionalProperty "+JSON.stringify(i)+" exists in instance when not allowed"});else{var a=t.additionalProperties||{};"function"==typeof n.preValidateProperty&&n.preValidateProperty(e,i,a,n,r);var s=this.validateSchema(e[i],a,n,r.makeChild(a,i));s.instance!==o.instance[i]&&(o.instance[i]=s.instance),o.importErrors(s)}}s.type=function(e,t,n,r){if(void 0===e)return null;var o=new i(e,t,n,r),a=Array.isArray(t.type)?t.type:[t.type];if(!a.some(this.testType.bind(this,e,t,n,r))){var s=a.map((function(e){if(e)return e.id&&"<"+e.id+">"||e+""}));o.addError({name:"type",argument:s,message:"is not of a type(s) "+s})}return o},s.anyOf=function(e,t,n,r){if(void 0===e)return null;var a=new i(e,t,n,r),s=new i(e,t,n,r);if(!Array.isArray(t.anyOf))throw new o("anyOf must be an array");if(!t.anyOf.some(u.bind(this,e,n,r,(function(e){s.importErrors(e)})))){var c=t.anyOf.map((function(e,t){return e.id&&"<"+e.id+">"||e.title&&JSON.stringify(e.title)||e.$ref&&"<"+e.$ref+">"||"[subschema "+t+"]"}));n.nestedErrors&&a.importErrors(s),a.addError({name:"anyOf",argument:c,message:"is not any of "+c.join(",")})}return a},s.allOf=function(e,t,n,r){if(void 0===e)return null;if(!Array.isArray(t.allOf))throw new o("allOf must be an array");var a=new i(e,t,n,r),s=this;return t.allOf.forEach((function(t,i){var o=s.validateSchema(e,t,n,r);if(!o.valid){var u=t.id&&"<"+t.id+">"||t.title&&JSON.stringify(t.title)||t.$ref&&"<"+t.$ref+">"||"[subschema "+i+"]";a.addError({name:"allOf",argument:{id:u,length:o.errors.length,valid:o},message:"does not match allOf schema "+u+" with "+o.errors.length+" error[s]:"}),a.importErrors(o)}})),a},s.oneOf=function(e,t,n,r){if(void 0===e)return null;if(!Array.isArray(t.oneOf))throw new o("oneOf must be an array");var a=new i(e,t,n,r),s=new i(e,t,n,r),c=t.oneOf.filter(u.bind(this,e,n,r,(function(e){s.importErrors(e)}))).length,l=t.oneOf.map((function(e,t){return e.id&&"<"+e.id+">"||e.title&&JSON.stringify(e.title)||e.$ref&&"<"+e.$ref+">"||"[subschema "+t+"]"}));return 1!==c&&(n.nestedErrors&&a.importErrors(s),a.addError({name:"oneOf",argument:l,message:"is not exactly one from "+l.join(",")})),a},s.properties=function(e,t,n,r){if(this.types.object(e)){var a=new i(e,t,n,r),s=t.properties||{};for(var u in s){var l=s[u];if(void 0!==l){if(null===l)throw new o('Unexpected null, expected schema in "properties"');"function"==typeof n.preValidateProperty&&n.preValidateProperty(e,u,l,n,r);var f=c(e,u),h=this.validateSchema(f,l,n,r.makeChild(l,u));h.instance!==a.instance[u]&&(a.instance[u]=h.instance),a.importErrors(h)}}return a}},s.patternProperties=function(e,t,n,r){if(this.types.object(e)){var a=new i(e,t,n,r),s=t.patternProperties||{};for(var u in e){var c=!0;for(var f in s){var h=s[f];if(void 0!==h){if(null===h)throw new o('Unexpected null, expected schema in "patternProperties"');try{var d=new RegExp(f,"u")}catch(e){d=new RegExp(f)}if(d.test(u)){c=!1,"function"==typeof n.preValidateProperty&&n.preValidateProperty(e,u,h,n,r);var p=this.validateSchema(e[u],h,n,r.makeChild(h,u));p.instance!==a.instance[u]&&(a.instance[u]=p.instance),a.importErrors(p)}}}c&&l.call(this,e,t,n,r,u,a)}return a}},s.additionalProperties=function(e,t,n,r){if(this.types.object(e)){if(t.patternProperties)return null;var o=new i(e,t,n,r);for(var a in e)l.call(this,e,t,n,r,a,o);return o}},s.minProperties=function(e,t,n,r){if(this.types.object(e)){var o=new i(e,t,n,r);return Object.keys(e).length>=t.minProperties||o.addError({name:"minProperties",argument:t.minProperties,message:"does not meet minimum property length of "+t.minProperties}),o}},s.maxProperties=function(e,t,n,r){if(this.types.object(e)){var o=new i(e,t,n,r);return Object.keys(e).length<=t.maxProperties||o.addError({name:"maxProperties",argument:t.maxProperties,message:"does not meet maximum property length of "+t.maxProperties}),o}},s.items=function(e,t,n,r){var o=this;if(this.types.array(e)&&t.items){var a=new i(e,t,n,r);return e.every((function(e,i){var s=Array.isArray(t.items)?t.items[i]||t.additionalItems:t.items;if(void 0===s)return!0;if(!1===s)return a.addError({name:"items",message:"additionalItems not permitted"}),!1;var u=o.validateSchema(e,s,n,r.makeChild(s,i));return u.instance!==a.instance[i]&&(a.instance[i]=u.instance),a.importErrors(u),!0})),a}},s.minimum=function(e,t,n,r){if(this.types.number(e)){var o=new i(e,t,n,r);return(t.exclusiveMinimum&&!0===t.exclusiveMinimum?e>t.minimum:e>=t.minimum)||o.addError({name:"minimum",argument:t.minimum,message:"must have a minimum value of "+t.minimum}),o}},s.maximum=function(e,t,n,r){if(this.types.number(e)){var o=new i(e,t,n,r);return(t.exclusiveMaximum&&!0===t.exclusiveMaximum?e<t.maximum:e<=t.maximum)||o.addError({name:"maximum",argument:t.maximum,message:"must have a maximum value of "+t.maximum}),o}};var f=function(e,t,n,a,s,u){if(this.types.number(e)){var c=t[s];if(0==c)throw new o(s+" cannot be zero");var l=new i(e,t,n,a),f=r.getDecimalPlaces(e),h=r.getDecimalPlaces(c),d=Math.max(f,h),p=Math.pow(10,d);return Math.round(e*p)%Math.round(c*p)!=0&&l.addError({name:s,argument:c,message:u+JSON.stringify(c)}),l}};function h(e,t,n){var i,o=n.length;for(i=t+1;i<o;i++)if(r.deepCompareStrict(e,n[i]))return!1;return!0}s.multipleOf=function(e,t,n,r){return f.call(this,e,t,n,r,"multipleOf","is not a multiple of (divisible by) ")},s.divisibleBy=function(e,t,n,r){return f.call(this,e,t,n,r,"divisibleBy","is not divisible by (multiple of) ")},s.required=function(e,t,n,r){var o=new i(e,t,n,r);return void 0===e&&!0===t.required?o.addError({name:"required",message:"is required"}):this.types.object(e)&&Array.isArray(t.required)&&t.required.forEach((function(t){void 0===c(e,t)&&o.addError({name:"required",argument:t,message:"requires property "+JSON.stringify(t)})})),o},s.pattern=function(e,t,n,r){if(this.types.string(e)){var o=new i(e,t,n,r),a=t.pattern;try{var s=new RegExp(a,"u")}catch(e){s=new RegExp(a)}return e.match(s)||o.addError({name:"pattern",argument:t.pattern,message:"does not match pattern "+JSON.stringify(t.pattern.toString())}),o}},s.format=function(e,t,n,o){if(void 0!==e){var a=new i(e,t,n,o);return a.disableFormat||r.isFormat(e,t.format,this)||a.addError({name:"format",argument:t.format,message:"does not conform to the "+JSON.stringify(t.format)+" format"}),a}},s.minLength=function(e,t,n,r){if(this.types.string(e)){var o=new i(e,t,n,r),a=e.match(/[\uDC00-\uDFFF]/g);return e.length-(a?a.length:0)>=t.minLength||o.addError({name:"minLength",argument:t.minLength,message:"does not meet minimum length of "+t.minLength}),o}},s.maxLength=function(e,t,n,r){if(this.types.string(e)){var o=new i(e,t,n,r),a=e.match(/[\uDC00-\uDFFF]/g);return e.length-(a?a.length:0)<=t.maxLength||o.addError({name:"maxLength",argument:t.maxLength,message:"does not meet maximum length of "+t.maxLength}),o}},s.minItems=function(e,t,n,r){if(this.types.array(e)){var o=new i(e,t,n,r);return e.length>=t.minItems||o.addError({name:"minItems",argument:t.minItems,message:"does not meet minimum length of "+t.minItems}),o}},s.maxItems=function(e,t,n,r){if(this.types.array(e)){var o=new i(e,t,n,r);return e.length<=t.maxItems||o.addError({name:"maxItems",argument:t.maxItems,message:"does not meet maximum length of "+t.maxItems}),o}},s.uniqueItems=function(e,t,n,r){if(!0===t.uniqueItems&&this.types.array(e)){var o=new i(e,t,n,r);return e.every(h)||o.addError({name:"uniqueItems",message:"contains duplicate item"}),o}},s.dependencies=function(e,t,n,r){if(this.types.object(e)){var o=new i(e,t,n,r);for(var a in t.dependencies)if(void 0!==e[a]){var s=t.dependencies[a],u=r.makeChild(s,a);if("string"==typeof s&&(s=[s]),Array.isArray(s))s.forEach((function(t){void 0===e[t]&&o.addError({name:"dependencies",argument:u.propertyPath,message:"property "+t+" not found, required by "+u.propertyPath})}));else{var c=this.validateSchema(e,s,n,u);o.instance!==c.instance&&(o.instance=c.instance),c&&c.errors.length&&(o.addError({name:"dependencies",argument:u.propertyPath,message:"does not meet dependency required by "+u.propertyPath}),o.importErrors(c))}}return o}},s.enum=function(e,t,n,a){if(void 0===e)return null;if(!Array.isArray(t.enum))throw new o("enum expects an array",t);var s=new i(e,t,n,a);return t.enum.some(r.deepCompareStrict.bind(null,e))||s.addError({name:"enum",argument:t.enum,message:"is not one of enum values: "+t.enum.map(String).join(",")}),s},s.const=function(e,t,n,o){if(void 0===e)return null;var a=new i(e,t,n,o);return r.deepCompareStrict(t.const,e)||a.addError({name:"const",argument:t.const,message:"does not exactly match expected constant: "+t.const}),a},s.not=s.disallow=function(e,t,n,r){var o=this;if(void 0===e)return null;var a=new i(e,t,n,r),s=t.not||t.disallow;return s?(Array.isArray(s)||(s=[s]),s.forEach((function(i){if(o.testType(e,t,n,r,i)){var s=i&&i.id&&"<"+i.id+">"||i;a.addError({name:"not",argument:s,message:"is of prohibited type "+s})}})),a):null},e.exports=a},function(e){e.exports={id:"/ColorScalePresets",title:"Color Scale Presets Schema",description:"JSON schema for a color scale presets data, used in the webgl-operate module for validation.",type:"array",items:{type:"object",properties:{identifier:{type:"string"},type:{type:"string",enum:["sequential","diverging","qualitative"]},format:{type:"string",enum:["rgb","rgbf"]},colors:{type:"array",items:{type:"array",items:{type:["integer","number"]}}},positions:{type:"array",items:{type:"array",items:{type:["integer","number"]}}}},required:["identifier","format","colors"],additionalProperties:!1}}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(22),u=n(2),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._width=0,t._height=0,t._depth=0,t._internalFormat=0,t._format=0,t._type=0,t}return i(t,e),t.prototype.create=function(e,n,r,i,o,s){a.assert(this._context.supportsTexImage3D,"expected texImage3D to be supported"),a.assert(e>0&&n>0&&r>0,"texture requires valid width, height, and depth of greater than zero");var u=this._context.gl,c=this._context.gl2facade;return this._object=u.createTexture(),this._width=e,this._height=n,this._depth=r,this._internalFormat=i,this._format=o,this._type=s,u.bindTexture(u.TEXTURE_3D,this._object),u.texParameteri(u.TEXTURE_3D,u.TEXTURE_MAG_FILTER,u.NEAREST),u.texParameteri(u.TEXTURE_3D,u.TEXTURE_MIN_FILTER,u.NEAREST),u.texParameteri(u.TEXTURE_3D,u.TEXTURE_WRAP_S,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_3D,u.TEXTURE_WRAP_T,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_3D,u.TEXTURE_WRAP_R,u.CLAMP_TO_EDGE),c.texImage3D(u.TEXTURE_3D,0,this._internalFormat,this._width,this._height,this._depth,0,this._format,this._type),u.bindTexture(u.TEXTURE_3D,t.DEFAULT_TEXTURE),this._valid=u.isTexture(this._object),this.reallocate(),this._object},t.prototype.delete=function(){a.assert(this._object instanceof WebGLTexture,"expected WebGLTexture object"),this._context.gl.deleteTexture(this._object),this._object=void 0,this._valid=!1,this._internalFormat=0,this._format=0,this._type=0,this._width=0,this._height=0,this._depth=0},t.prototype.reallocate=function(){var e=this.context.gl,t=this._context.gl2facade,n=this._width*this._height*this._depth*s.byteSizeOfFormat(this.context,this._internalFormat);this._type===t.HALF_FLOAT&&this._internalFormat!==e.RGBA16F?n*=2:this._type===e.FLOAT&&this._internalFormat!==e.RGBA16F&&(n*=4),this.context.allocationRegister.reallocate(this._identifier,n)},t.prototype.bind=function(e){var t=this.context.gl;e&&t.activeTexture(e),t.bindTexture(t.TEXTURE_3D,this._object)},t.prototype.unbind=function(e){var n=this.context.gl;e&&n.activeTexture(e),n.bindTexture(n.TEXTURE_3D,t.DEFAULT_TEXTURE)},t.prototype.load=function(e,t,n){return void 0===n&&(n=!1),a.assert(!1,"not implemented"),new Promise((function(){return!0}))},t.prototype.data=function(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!0);var r=this.context.gl,i=this._context.gl2facade;t&&this.bind(),i.texImage3D(r.TEXTURE_3D,0,this._internalFormat,this._width,this._height,this._depth,0,this._format,this._type,e),n&&this.unbind(),this.reallocate()},t.prototype.filter=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl;n&&this.bind(),i.texParameteri(i.TEXTURE_3D,i.TEXTURE_MAG_FILTER,e),i.texParameteri(i.TEXTURE_3D,i.TEXTURE_MIN_FILTER,t),r&&this.unbind()},t.prototype.wrap=function(e,t,n,r,i){void 0===r&&(r=!0),void 0===i&&(i=!0);var o=this.context.gl;r&&this.bind(),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_WRAP_S,e),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_WRAP_T,t),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_WRAP_T,n),i&&this.unbind()},t.prototype.reformat=function(e,t,n,r,i){void 0===r&&(r=!0),void 0===i&&(i=!0),(e!==this._internalFormat||void 0!==t&&t!==this._format||void 0!==n&&n!==this._type)&&(a.assert(void 0!==e,"valid internal format expected"),this._internalFormat=e,t&&(this._format=t),n&&(this._type=n),this.data(void 0,r,i))},t.prototype.resize=function(e,t,n,r,i){void 0===r&&(r=!0),void 0===i&&(i=!0),e===this._width&&t===this._height&&n===this._depth||(this._width=e,this._height=t,this._depth=n,this.data(void 0,r,i))},Object.defineProperty(t.prototype,"bytes",{get:function(){return this.assertInitialized(),this.context.allocationRegister.allocated(this._identifier)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"internalFormat",{get:function(){return this.assertInitialized(),this._internalFormat},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"format",{get:function(){return this.assertInitialized(),this._format},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this.assertInitialized(),this._type},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.assertInitialized(),this._width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.assertInitialized(),this._height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"depth",{get:function(){return this.assertInitialized(),this._depth},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.assertInitialized(),[this._width,this._height,this._depth]},enumerable:!0,configurable:!0}),t.DEFAULT_TEXTURE=void 0,o([u.Initializable.assert_initialized()],t.prototype,"bind",null),o([u.Initializable.assert_initialized()],t.prototype,"unbind",null),o([u.Initializable.assert_initialized()],t.prototype,"load",null),o([u.Initializable.assert_initialized()],t.prototype,"data",null),o([u.Initializable.assert_initialized()],t.prototype,"filter",null),o([u.Initializable.assert_initialized()],t.prototype,"wrap",null),o([u.Initializable.assert_initialized()],t.prototype,"reformat",null),o([u.Initializable.assert_initialized()],t.prototype,"resize",null),t}(n(6).AbstractObject);t.Texture3D=c},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(22),u=n(2),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._size=0,t._internalFormat=0,t._format=0,t._type=0,t._bytes=[0,0,0,0,0,0],t}return i(t,e),t.prototype.faceID=function(e){var t=this._context.gl;switch(e){case t.TEXTURE_CUBE_MAP_POSITIVE_X:return 0;case t.TEXTURE_CUBE_MAP_NEGATIVE_X:return 1;case t.TEXTURE_CUBE_MAP_POSITIVE_Y:return 2;case t.TEXTURE_CUBE_MAP_NEGATIVE_Y:return 3;case t.TEXTURE_CUBE_MAP_POSITIVE_Z:return 4;case t.TEXTURE_CUBE_MAP_NEGATIVE_Z:return 5;default:return a.assert(!1,"expected texture cube map identifier ("+t.TEXTURE_CUBE_MAP_POSITIVE_X+", "+t.TEXTURE_CUBE_MAP_NEGATIVE_X+", "+t.TEXTURE_CUBE_MAP_POSITIVE_Y+", "+t.TEXTURE_CUBE_MAP_NEGATIVE_Y+", "+t.TEXTURE_CUBE_MAP_POSITIVE_Z+", or"+t.TEXTURE_CUBE_MAP_NEGATIVE_Z+"), given "+e),-1}},t.prototype.create=function(e,n,r,i){a.assert(e>0,"texture cube requires valid size (width/height) of greater than zero");var o=this._context.gl,s=this._context.gl2facade;return this._object=o.createTexture(),this._size=e,this._internalFormat=n,this._format=r,this._type=i,o.bindTexture(o.TEXTURE_CUBE_MAP,this._object),o.texParameteri(o.TEXTURE_CUBE_MAP,o.TEXTURE_MIN_FILTER,o.LINEAR),o.texParameteri(o.TEXTURE_CUBE_MAP,o.TEXTURE_MAG_FILTER,o.LINEAR),o.texParameteri(o.TEXTURE_CUBE_MAP,o.TEXTURE_WRAP_S,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_CUBE_MAP,o.TEXTURE_WRAP_T,o.CLAMP_TO_EDGE),s.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X,0,this._internalFormat,this._size,this._size,0,this._format,this._type),s.texImage2D(o.TEXTURE_CUBE_MAP_NEGATIVE_X,0,this._internalFormat,this._size,this._size,0,this._format,this._type),s.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_Y,0,this._internalFormat,this._size,this._size,0,this._format,this._type),s.texImage2D(o.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,this._internalFormat,this._size,this._size,0,this._format,this._type),s.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_Z,0,this._internalFormat,this._size,this._size,0,this._format,this._type),s.texImage2D(o.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,this._internalFormat,this._size,this._size,0,this._format,this._type),o.bindTexture(o.TEXTURE_CUBE_MAP,t.DEFAULT_TEXTURE),this._valid=o.isTexture(this._object),this.context.allocationRegister.reallocate(this._identifier,0),this._object},t.prototype.delete=function(){a.assert(this._object instanceof WebGLTexture,"expected WebGLTexture object"),this._context.gl.deleteTexture(this._object),this._object=void 0,this._valid=!1,this._internalFormat=0,this._format=0,this._type=0,this._size=0},t.prototype.bind=function(e){var t=this.context.gl;e&&t.activeTexture(e),t.bindTexture(t.TEXTURE_CUBE_MAP,this._object)},t.prototype.unbind=function(e){var n=this.context.gl;e&&n.activeTexture(e),n.bindTexture(n.TEXTURE_CUBE_MAP,t.DEFAULT_TEXTURE)},t.prototype.fetch=function(e,t,n){var r=this;void 0===t&&(t=0),void 0===n&&(n=!1);var i=this.context.gl;return new Promise((function(o,s){var u=new Array;e.positiveX&&u.push([i.TEXTURE_CUBE_MAP_POSITIVE_X,e.positiveX]),e.negativeX&&u.push([i.TEXTURE_CUBE_MAP_NEGATIVE_X,e.negativeX]),e.positiveY&&u.push([i.TEXTURE_CUBE_MAP_POSITIVE_Y,e.positiveY]),e.negativeY&&u.push([i.TEXTURE_CUBE_MAP_NEGATIVE_Y,e.negativeY]),e.positiveZ&&u.push([i.TEXTURE_CUBE_MAP_POSITIVE_Z,e.positiveZ]),e.negativeZ&&u.push([i.TEXTURE_CUBE_MAP_NEGATIVE_Z,e.negativeZ]);for(var c=u.length,l=function(e){var i=new Image;i.onerror=function(){return s()},i.onload=function(){var n=r.calculateMipLevelSize(t);i.width===i.height?i.width===n?(r.data([e[0],i],t),0==(c-=1)&&o()):a.log(a.LogLevel.Warning,"image ignored, width and height expected to match this texture's size "+n+", given "+i.width):a.log(a.LogLevel.Warning,"image ignored, width and height expected to be equal (square image)")},n&&(i.crossOrigin="anonymous"),i.src=e[1]},f=0,h=u;f<h.length;f++)l(h[f])}))},t.prototype.calculateMipLevelSize=function(e){return this._size*Math.pow(.5,e)},t.prototype.data=function(e,t,n,r){void 0===t&&(t=0),void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl,o=this.context.gl2facade,a=this.calculateMipLevelSize(t),u=a*a*s.byteSizeOfFormat(this.context,this._internalFormat);if(this._type===this.context.gl2facade.HALF_FLOAT&&this._internalFormat!==this.context.gl.RGBA16F?u*=2:this._type===this.context.gl.FLOAT&&this._internalFormat!==this.context.gl.RGBA16F&&(u*=4),n&&this.bind(),e instanceof Array&&2===e.length){o.texImage2D(e[0],t,this._internalFormat,a,a,0,this._format,this._type,e[1]);var c=this.faceID(e[0]);this.context.allocationRegister.deallocate(this._identifier,this._bytes[c]),this.context.allocationRegister.allocate(this._identifier,u),this._bytes[c]=u}else{var l=e;void 0!==l.positiveX&&(o.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X,t,this._internalFormat,a,a,0,this._format,this._type,l.positiveX),this.context.allocationRegister.deallocate(this._identifier,this._bytes[0]),this.context.allocationRegister.allocate(this._identifier,u),this._bytes[0]=u),void 0!==l.negativeX&&(o.texImage2D(i.TEXTURE_CUBE_MAP_NEGATIVE_X,t,this._internalFormat,a,a,0,this._format,this._type,l.negativeX),this.context.allocationRegister.deallocate(this._identifier,this._bytes[1]),this.context.allocationRegister.allocate(this._identifier,u),this._bytes[1]=u),void 0!==l.positiveY&&(o.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_Y,t,this._internalFormat,a,a,0,this._format,this._type,l.positiveY),this.context.allocationRegister.deallocate(this._identifier,this._bytes[2]),this.context.allocationRegister.allocate(this._identifier,u),this._bytes[2]=u),void 0!==l.negativeY&&(o.texImage2D(i.TEXTURE_CUBE_MAP_NEGATIVE_Y,t,this._internalFormat,a,a,0,this._format,this._type,l.negativeY),this.context.allocationRegister.deallocate(this._identifier,this._bytes[3]),this.context.allocationRegister.allocate(this._identifier,u),this._bytes[3]=u),void 0!==l.positiveZ&&(o.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_Z,t,this._internalFormat,a,a,0,this._format,this._type,l.positiveZ),this.context.allocationRegister.deallocate(this._identifier,this._bytes[4]),this.context.allocationRegister.allocate(this._identifier,u),this._bytes[4]=u),void 0!==l.negativeZ&&(o.texImage2D(i.TEXTURE_CUBE_MAP_NEGATIVE_Z,t,this._internalFormat,a,a,0,this._format,this._type,l.negativeZ),this.context.allocationRegister.deallocate(this._identifier,this._bytes[5]),this.context.allocationRegister.allocate(this._identifier,u),this._bytes[5]=u)}r&&this.unbind()},t.prototype.filter=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl;n&&this.bind(),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_MAG_FILTER,e),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_MIN_FILTER,t),r&&this.unbind()},t.prototype.wrap=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl;n&&this.bind(),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_WRAP_S,e),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_WRAP_T,t),r&&this.unbind()},t.prototype.levels=function(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=!0);var i=this.context.gl;n&&this.bind(),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_BASE_LEVEL,e),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_MAX_LEVEL,t),r&&this.unbind()},t.prototype.reformat=function(e,t,n,r,i){void 0===r&&(r=!0),void 0===i&&(i=!0),(e!==this._internalFormat||void 0!==t&&t!==this._format||void 0!==n&&n!==this._type)&&(a.assert(void 0!==e,"valid internal format expected"),this._internalFormat=e,t&&(this._format=t),n&&(this._type=n),this.data({clearOnUndefined:!0},0,r,i))},t.prototype.resize=function(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!0),e!==this._size&&(this._size=e,this.data({clearOnUndefined:!0},0,t,n))},Object.defineProperty(t.prototype,"bytes",{get:function(){return this.assertInitialized(),this.context.allocationRegister.allocated(this._identifier)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"internalFormat",{get:function(){return this.assertInitialized(),this._internalFormat},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"format",{get:function(){return this.assertInitialized(),this._format},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this.assertInitialized(),this._type},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.assertInitialized(),this._size},enumerable:!0,configurable:!0}),t.DEFAULT_TEXTURE=void 0,o([u.Initializable.assert_initialized()],t.prototype,"bind",null),o([u.Initializable.assert_initialized()],t.prototype,"unbind",null),o([u.Initializable.assert_initialized()],t.prototype,"fetch",null),o([u.Initializable.assert_initialized()],t.prototype,"data",null),o([u.Initializable.assert_initialized()],t.prototype,"filter",null),o([u.Initializable.assert_initialized()],t.prototype,"wrap",null),o([u.Initializable.assert_initialized()],t.prototype,"levels",null),o([u.Initializable.assert_initialized()],t.prototype,"reformat",null),o([u.Initializable.assert_initialized()],t.prototype,"resize",null),t}(n(6).AbstractObject);t.TextureCube=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(31),o=n(29),a=n(45),s=n(46),u=n(47),c=function(){function e(t,n){var r=this;this._alwaysRotateOnMove=!1,this._invalidate=t,this._eventHandler=new i.EventHandler(t,n,void 0),this._eventHandler.pushMouseDownHandler((function(e,t){return r.onMouseDown(e,t)})),this._eventHandler.pushMouseUpHandler((function(e,t){return r.onMouseUp(e,t)})),this._eventHandler.pushMouseMoveHandler((function(e,t){return r.onMouseMove(e,t)})),this._eventHandler.pushClickHandler((function(e,t){return r.onClick(e,t)})),this.metaphor=e.Metaphor.Turntable}return e.prototype.mode=function(t){var n=1&t.buttons,r="mousedown"===t.type,i="mousemove"===t.type;if(o.PointerLock.active()&&this._alwaysRotateOnMove||(r||i)&&n)return e.Modes.Rotate},e.prototype.rotate=function(t,n){var i=this._eventHandler.offsets(t)[0];switch(this._metaphor){case e.Metaphor.FirstPerson:var a=this._firstPerson,s=void 0;o.PointerLock.active()&&t instanceof MouseEvent&&(s=r.vec2.fromValues(t.movementX,t.movementY)),n?a.initiate(i):a.process(i,s),t.preventDefault();break;case e.Metaphor.Trackball:var u=this._trackball;n?u.initiate(i):u.process(i),t.preventDefault();break;case e.Metaphor.Turntable:var c=this._turntable;n?c.initiate(i):c.process(i),t.preventDefault()}},e.prototype.onMouseDown=function(t,n){var r=t[t.length-1];switch(this._mode=this.mode(r),this._mode){case e.Modes.Zoom:break;case e.Modes.Rotate:this.rotate(r,!0)}},e.prototype.onMouseUp=function(e,t){var n=e[e.length-1];void 0!==this._mode&&n.preventDefault()},e.prototype.onMouseMove=function(t,n){var r=t[t.length-1],i=void 0===this._mode;switch(this._mode=this.mode(r),this._mode){case e.Modes.Rotate:this.rotate(r,i)}},e.prototype.onClick=function(e,t){},e.prototype.update=function(){this._eventHandler.update()},Object.defineProperty(e.prototype,"camera",{set:function(e){this._camera=e,this._firstPerson&&(this._firstPerson.camera=e),this._trackball&&(this._trackball.camera=e),this._turntable&&(this._turntable.camera=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"metaphor",{get:function(){return this._metaphor},set:function(t){if(this._metaphor!==t){switch(this._firstPerson=void 0,this._trackball=void 0,this._turntable=void 0,this._eventHandler.exitPointerLock(),this._alwaysRotateOnMove=!1,this._metaphor=t,this._metaphor){case e.Metaphor.FirstPerson:this._eventHandler.requestPointerLock(),this._alwaysRotateOnMove=!0,this._firstPerson=new a.FirstPersonModifier,this._firstPerson.camera=this._camera;break;case e.Metaphor.Trackball:this._trackball=new s.TrackballModifier,this._trackball.camera=this._camera;break;case e.Metaphor.Turntable:this._turntable=new u.TurntableModifier,this._turntable.camera=this._camera}this._invalidate(!0)}},enumerable:!0,configurable:!0}),e}();t.Navigation=c,function(e){!function(e){e[e.Move=0]="Move",e[e.Pan=1]="Pan",e[e.Rotate=2]="Rotate",e[e.Zoom=3]="Zoom",e[e.ZoomStep=4]="ZoomStep"}(e.Modes||(e.Modes={})),function(e){e.FirstPerson="firstperson",e.Flight="flight",e.Trackball="trackball",e.Turntable="turntable"}(e.Metaphor||(e.Metaphor={}))}(c=t.Navigation||(t.Navigation={})),t.Navigation=c},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.update=function(){},t}(n(15).CameraModifier);t.PanModifier=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.update=function(){},t}(n(15).CameraModifier);t.ZoomModifier=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5),s=n(7),u=n(2),c=function(e){function t(t,n){var r=e.call(this,t,n)||this;n=void 0!==n&&""!==n?n:r.constructor.name;var i=new a.Buffer(t,n+"VBO");return r._buffers.push(i),r}return i(t,e),t.prototype.bindBuffers=function(){this._buffers[0].attribEnable(this._vertexLocation,2,this.context.gl.FLOAT,!1,0,0,!0,!1)},t.prototype.unbindBuffers=function(){this._buffers[0].attribDisable(this._vertexLocation,!0,!0)},t.prototype.initialize=function(n){void 0===n&&(n=0),this._vertexLocation=n;var r=this.context.gl,i=e.prototype.initialize.call(this,[r.ARRAY_BUFFER]);return this._buffers[0].data(t.VERTICES,r.STATIC_DRAW),i},t.prototype.draw=function(){var e=this.context.gl;e.drawArrays(e.TRIANGLE_STRIP,0,4)},Object.defineProperty(t.prototype,"vertexLocation",{get:function(){return this._vertexLocation},enumerable:!0,configurable:!0}),t.VERTICES=new Float32Array([-1,-1,1,-1,-1,1,1,1]),o([u.Initializable.assert_initialized()],t.prototype,"draw",null),t}(s.Geometry);t.NdcFillingRectangle=c},function(e){e.exports={kernel:[[[[-.41692,-.0735727],[.201114,.0165974],[-.0906823,-.219471],[.437182,.252665],[-.180852,.162495],[.291284,-.365369],[.0552157,.398563],[-.32675,-.455539]]]],size:{depth:1,height:1,width:8}}},function(e){e.exports={kernel:[[[[-.49667,.0980561],[-.0589763,.0210422],[.370588,-.29204],[.259132,.381722],[.447602,-.20187],[-.449072,-.0478419],[.0656358,-.0346857],[-.31633,-.485536],[.13452,.43745],[.301704,.235824],[.190248,-.0904137],[.245976,-.236312],[-.247446,-.0133998],[.100078,.201382],[-.350772,.278396],[-.0245342,.25711],[.357432,.0899264],[.31486,-.146142],[.168962,-.326482],[-.358902,-.339638],[-.4065,-.19374],[.482044,.0341984],[.121364,-.180584],[.22469,.145654],[-.427786,.188226],[-.22616,-.395366],[.336146,.471892],[-.157276,-.305196],[.0311937,-.270754],[-.191718,.458736],[.155806,.0554843],[.211534,-.47238],[-.011378,-.124856],[.078792,-.416652],[-.260602,.368566],[-.337616,-.10357],[-.0458201,-.360924],[-.213004,.222668],[-.0802622,-.215026],[-.204874,-.159298],[-.101548,.16694],[-.393344,.424294],[.426316,.180096],[-.170432,.0767702],[-.372058,.0423281],[-.483514,-.28391],[-.114704,-.451094],[-.122834,-.0691278],[-.067106,.403008],[-.13599,.312838],[-.303174,.132498],[.177092,.291552],[-.462228,.334124],[.460758,.416164],[-.281888,-.249468],[.267262,-243664e-9],[.00990784,.493178],[.0443499,.34728],[.41316,-.437938],[.40503,-.0559716],[.391874,.325994],[-.440942,-.429808],[.023064,.111212],[.280418,-.38221]]]],size:{depth:1,height:1,width:64}}},function(e,t){e.exports="\nprecision lowp float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n#else\n    layout(location = 0) out vec4 fragColor;\n#endif\n\n\nuniform float u_weight;\nuniform sampler2D u_accumulationTexture;\nuniform sampler2D u_currentFrameTexture;\n\nvarying vec2 v_uv;\n\n\nvoid main(void)\n{\n    vec4 accumulationColor = texture(u_accumulationTexture, v_uv);\n    vec4 currentFrameColor = texture(u_currentFrameTexture, v_uv);\n    fragColor = mix(accumulationColor, currentFrameColor, u_weight);\n}\n"},function(e,t){e.exports="\nprecision highp float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n#else\n    layout(location = 0) out vec4 fragColor;\n#endif\n\n\nuniform sampler2D u_texture;\n\nvarying vec2 v_uv;\n\n\nvoid main(void)\n{\n    fragColor = texture(u_texture, v_uv);\n}\n"},function(e,t){e.exports="\nprecision highp float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n\nconst float one255ths = 1.0 / 255.0;\n\nvec3 float24x1_to_uint8x3(const in float f) {\n    vec3 uint8x3 = vec3(f, fract(f * 256.0), fract(f * 65536.0));\n    return floor(uint8x3 * 256.0) * one255ths;\n}\n\nvec4 float24x1_to_uint8x4(const in float f) {\n    vec4 uint8x4 = vec4(f, fract(f * 256.0), fract(f * 65536.0), fract(f * 16777216.0));\n    return floor(uint8x4 * 256.0) * one255ths;\n}\n\nconst vec3 premultUint8x3 = vec3(255.0 / 256.0, 255.0 / 65536.0, 255.0 / 16777216.0);\nfloat uint8x3_to_float24x1(const in vec3 v) {\n    return dot(v, premultUint8x3); // a1 * b1 + a2 * b2 + a3 * b3  ;)\n}\n\nconst vec4 premultUint8x4 = vec4(255.0 / 256.0, 255.0 / 65536.0, 255.0 / 16777216.0, 255.0 / 4294967296.0);\nfloat uint8x4_to_float32x1(const in vec4 v) {\n    return dot(v, premultUint8x4); // a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4  ;)\n}\n\n\nfloat linearizeDepth(float zInNDC, float near, float far) {\n    float zLinear = 2.0 * near;\n    zLinear /= far + near - zInNDC * (far - near);\n    return zLinear;\n}\n\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n#else\n    layout(location = 0) out vec4 fragColor;\n#endif\n\n\nuniform sampler2D u_texture;\n\nuniform int u_mode; /* Debug mode. */\nuniform vec2 u_linearize; /* [ zNear, zFar ] */\n\n\nvarying vec2 v_uv;\n\n\nvoid main(void)\n{\n    vec4 source = texture(u_texture, v_uv);\n\n    if(u_mode == 1) {           /* Depth */\n        source.rgb = vec3(source[0]);\n\n    } else if (u_mode == 2) {   /* DepthLinear */\n        float zLinear = linearizeDepth(source[0], u_linearize[0], u_linearize[1]);\n        source.rgb = vec3(zLinear);\n\n    } else if(u_mode == 3) {    /* DepthPacked */\n        source.rgb = float24x1_to_uint8x3(source[0]);\n\n    } else if (u_mode == 4) {   /* DepthLinearPacked */\n        float zLinear = linearizeDepth(source[0], u_linearize[0], u_linearize[1]);\n        source.rgb = float24x1_to_uint8x3(zLinear);\n    }\n\n    fragColor = source;\n}\n"},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),s=n(0),u=n(3),c=n(14),l=n(2),f=n(16),h=n(8),d=n(9),p=n(4),_=function(e){function t(t){var n=e.call(this)||this;return n._cache=!1,n._depthAttachment=0,n._cachedDepths=new Map,n._cachedIDs=new Map,n._buffer=new Uint8Array(4),n._ndcTriangleShared=!1,n._context=t,n}return i(t,e),t.maxClearDepth=function(){return u.decode_float24x1_from_uint8x3(a.vec3.fromValues(255,255,255))},t.prototype.onFrame=function(){this._cachedDepths.clear(),this._cachedIDs.clear()},t.prototype.hash=function(e,t){return 65535*t+e},t.prototype.directReadDepthAt=function(e,t){s.assert(void 0!==this._depthFBO&&this._depthFBO.valid,"valid depth FBO expected for reading back depth");var n=this._depthFBO.texture(this._depthAttachment),r=this._context.gl,i=n.size;this._depthFBO.bind();var o=void 0===this._referenceSize?[1,1]:[i[0]/this._referenceSize[0],i[1]/this._referenceSize[1]];return(this._context.isWebGL2||this._context.supportsDrawBuffers)&&r.readBuffer(this._depthAttachment),r.readPixels(e*o[0],i[1]-t*o[1],1,1,r.RGBA,r.UNSIGNED_BYTE,this._buffer),this._buffer},t.prototype.renderThenReadDepthAt=function(e,t){s.assert(void 0!==this._depthFBO&&this._depthFBO.valid,"valid depth FBO expected for reading back depth");var n=this._depthFBO.texture(this._depthAttachment),r=this._context.gl,i=n.size,o=void 0===this._referenceSize?[1,1]:[i[0]/this._referenceSize[0],i[1]/this._referenceSize[1]];return r.viewport(0,0,1,1),this._program.bind(),r.uniform2f(this._uOffset,e*o[0]/i[0],(i[1]-t*o[1])/i[1]),r.uniform2f(this._uScale,1/i[0],1/i[1]),n.bind(r.TEXTURE0),this._framebuffer.bind(),this._ndcTriangle.bind(),this._ndcTriangle.draw(),this._ndcTriangle.unbind(),n.unbind(),(this._context.isWebGL2||this._context.supportsDrawBuffers)&&r.readBuffer&&r.readBuffer(r.COLOR_ATTACHMENT0),r.readPixels(0,0,1,1,r.RGBA,r.UNSIGNED_BYTE,this._buffer),this._framebuffer.unbind(),this._buffer},t.prototype.initialize=function(e,t){var r=this._context.gl,i=this._context.gl2facade;if(t)return this.readDepthAt=this.directReadDepthAt,!0;this.readDepthAt=this.renderThenReadDepthAt;var o=new d.Shader(this._context,r.VERTEX_SHADER,"ndcvertices.vert (readback)");o.initialize(n(23));var a=new d.Shader(this._context,r.FRAGMENT_SHADER,"readbackdepth.frag");return a.initialize(n(103)),this._program=new h.Program(this._context,"ReadbackDepthProgram"),this._program.initialize([o,a],!1),void 0===e?this._ndcTriangle=new f.NdcFillingTriangle(this._context):(this._ndcTriangle=e,this._ndcTriangleShared=!0),this._ndcTriangle.initialized||this._ndcTriangle.initialize(),this._program.attribute("a_vertex",this._ndcTriangle.vertexLocation),this._program.link(),this._uOffset=this._program.uniform("u_offset"),this._program.bind(),r.uniform1i(this._program.uniform("u_texture"),0),this._program.unbind(),this._texture=new p.Texture2D(this._context,"ReadbackRenderTexture"),this._texture.initialize(1,1,r.RGBA,r.RGBA,r.UNSIGNED_BYTE),this._framebuffer=new c.Framebuffer(this._context,"ReadbackFBO"),this._framebuffer.initialize([[i.COLOR_ATTACHMENT0,this._texture]]),!0},t.prototype.uninitialize=function(){this._context.isWebGL1&&!this._context.supportsDepthTexture||(!this._ndcTriangleShared&&this._ndcTriangle.initialized&&this._ndcTriangle.uninitialize(),this._program.uninitialize(),this._texture.uninitialize(),this._framebuffer.uninitialize())},t.prototype.depthAt=function(e,t){var n=this.hash(e,t);if(this._cache&&this._cachedDepths.has(n))return this._cachedDepths.get(n);var r=this.readDepthAt(e,t),i=255===r[0]&&255===r[1]&&255===r[2]?void 0:u.decode_float24x1_from_uint8x3(a.vec3.fromValues(r[0],r[1],r[2]));return this._cache&&this._cachedDepths.set(n,i),i},t.prototype.coordsAt=function(e,t,n,r){var i=this._depthFBO.texture(this._depthAttachment).size,o=void 0===n?this.depthAt(e,t):n;if(void 0!==o){var s=void 0===this._referenceSize?[1,1]:[i[0]/this._referenceSize[0],i[1]/this._referenceSize[1]],u=a.vec3.fromValues(e*s[0]*2/i[0]-1,1-t*s[1]*2/i[1],2*o-1);return a.vec3.transformMat4(a.vec3.create(),u,r)}},t.prototype.idAt=function(e,t){var n=this.hash(e,t);if(this._cache&&this._cachedIDs.has(n))return this._cachedIDs.get(n);var r=this._context.gl,i=this._idFBO.texture(this._idAttachment).size,o=void 0===this._referenceSize?[1,1]:[i[0]/this._referenceSize[0],i[1]/this._referenceSize[1]];this._idFBO.bind(),this._context.isWebGL2&&r.readBuffer(this._idAttachment),r.readPixels(e*o[0],i[1]-t*o[1],1,1,r.RGBA,r.UNSIGNED_BYTE,this._buffer);var s=u.decode_uint32_from_rgba8(a.vec4.fromValues(this._buffer[0],this._buffer[1],this._buffer[2],this._buffer[3]));return this._cache&&this._cachedIDs.set(n,s),s},t.prototype.frame=function(){this.onFrame()},Object.defineProperty(t.prototype,"cache",{set:function(e){this._cache=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"depthFBO",{set:function(e){this._depthFBO=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"depthAttachment",{set:function(e){this._depthAttachment=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"idFBO",{set:function(e){this._idFBO=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"idAttachment",{set:function(e){this._idAttachment=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"coordinateReferenceSize",{set:function(e){this._referenceSize=e},enumerable:!0,configurable:!0}),o([l.Initializable.assert_initialized()],t.prototype,"directReadDepthAt",null),o([l.Initializable.assert_initialized()],t.prototype,"renderThenReadDepthAt",null),o([l.Initializable.initialize()],t.prototype,"initialize",null),o([l.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([l.Initializable.assert_initialized()],t.prototype,"depthAt",null),o([l.Initializable.assert_initialized()],t.prototype,"coordsAt",null),o([l.Initializable.assert_initialized()],t.prototype,"idAt",null),t}(l.Initializable);t.ReadbackPass=_},function(e,t){e.exports="\nprecision highp float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\nconst float one255ths = 1.0 / 255.0;\n\nvec3 float24x1_to_uint8x3(const in float f) {\n    vec3 uint8x3 = vec3(f, fract(f * 256.0), fract(f * 65536.0));\n    return floor(uint8x3 * 256.0) * one255ths;\n}\n\nvec4 float24x1_to_uint8x4(const in float f) {\n    vec4 uint8x4 = vec4(f, fract(f * 256.0), fract(f * 65536.0), fract(f * 16777216.0));\n    return floor(uint8x4 * 256.0) * one255ths;\n}\n\nconst vec3 premultUint8x3 = vec3(255.0 / 256.0, 255.0 / 65536.0, 255.0 / 16777216.0);\nfloat uint8x3_to_float24x1(const in vec3 v) {\n    return dot(v, premultUint8x3); // a1 * b1 + a2 * b2 + a3 * b3  ;)\n}\n\nconst vec4 premultUint8x4 = vec4(255.0 / 256.0, 255.0 / 65536.0, 255.0 / 16777216.0, 255.0 / 4294967296.0);\nfloat uint8x4_to_float32x1(const in vec4 v) {\n    return dot(v, premultUint8x4); // a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4  ;)\n}\n\n\n\n#if __VERSION__ == 100\n    #define fragDepth gl_FragColor\n#else \n    layout(location = 0) out vec4 fragDepth;\n#endif\n\n\nuniform sampler2D u_texture;\nuniform vec2 u_offset;\nuniform vec2 u_scale;\n\nvarying vec2 v_uv;\n\n\n\nvoid main(void)\n{\n    vec2 uv = vec2(v_uv.x, 1.0 - v_uv.y) * u_scale + u_offset;\n    float depth = texture(u_texture, uv).r;\n\n    fragDepth = vec4(float24x1_to_uint8x3(depth), 1.0);\n}\n"},function(e,t){e.exports="\nprecision lowp float;\nprecision lowp int;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else\n    #define varying out\n#endif\n\n\n#if __VERSION__ == 100\n  attribute vec2 a_vertex;\n#else\n  layout(location = 0) in vec2 a_vertex;\n#endif\n\n\nvarying vec2 v_texCoords;\n\n\nvoid main()\n{\n    v_texCoords = a_vertex * 0.5 + 0.5;\n    gl_Position = vec4(a_vertex, 0.0, 1.0);\n}\n"},function(e,t){e.exports="\nprecision lowp float;\nprecision lowp int;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n#if __VERSION__ == 100\n  #define fragColor gl_FragColor\n#else\n  layout(location = 0) out vec4 fragColor;\n#endif\n\n\nuniform float u_weights[32];\nuniform vec2 u_delta;\n\nuniform sampler2D u_texture;\n\nvarying vec2 v_texCoords;\n\n\nvoid main()\n{\n    vec4 result = u_weights[0] * texture(u_texture, v_texCoords);\n    for (int i = 1; i <= $KERNEL_HALF_SIZE; i++)\n    {\n        result += u_weights[i] * texture(u_texture, v_texCoords + float(i) * u_delta);\n        result += u_weights[i] * texture(u_texture, v_texCoords - float(i) * u_delta);\n    }\n\n    fragColor = result;\n}\n"},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),s=n(14),u=n(52),c=n(2),l=n(21),f=n(4),h=n(11),d=function(e){function t(t){var n=e.call(this)||this;return n._gaussFilterKernelSize=21,n._context=t,n}return i(t,e),Object.defineProperty(t.prototype,"shadowMapTexture",{get:function(){return this.hasBlur?this._blurTexture:this._shadowMapTexture},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"hasBlur",{get:function(){return this._shadowType!==t.ShadowMappingType.HardShadowMapping},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"blurSize",{get:function(){return this._gaussFilterKernelSize},set:function(e){e!==this._gaussFilterKernelSize&&(void 0!==this._gaussFilter&&(this._gaussFilter.kernelSize=e,this._gaussFilter.standardDeviation=e/6),this._gaussFilterKernelSize=e)},enumerable:!0,configurable:!0}),t.prototype.resize=function(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!0),a.assert(e[0]>0&&e[1]>0,"Size has to be > 0."),this._shadowMapSize=e,this._shadowMapFBO.resize(this._shadowMapSize[0],this._shadowMapSize[1],t,n)},t.prototype.resizeBlurTexture=function(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!0),a.assert(e[0]>0&&e[1]>0,"Size has to be > 0."),this._blurredShadowMapSize=e,this._intermediateBlurFBO.resize(this._blurredShadowMapSize[0],this._blurredShadowMapSize[1],t,n),this._blurFBO.resize(this._blurredShadowMapSize[0],this._blurredShadowMapSize[1],t,n)},t.prototype.initialize=function(e,n,r){a.assert(n[0]>0&&n[1]>0,"Size has to be > 0."),this._shadowType=e,this._shadowMapSize=n,this._blurredShadowMapSize=void 0!==r?r:this._shadowMapSize;var i=this._context.gl,o=this._context.gl2facade,c=i.RGBA;if(this._context.isWebGL2){var d=this._context.gl;switch(this._shadowType){case t.ShadowMappingType.HardShadowMapping:case t.ShadowMappingType.ExponentialShadowMapping:c=d.RED;break;case t.ShadowMappingType.VarianceShadowMapping:c=d.RG;break;case t.ShadowMappingType.ExponentialVarianceShadowMapping:c=d.RGBA;break;default:a.assert(!1,"Unexpected value for shadowType")}}var p=h.Wizard.queryInternalTextureFormat(this._context,c,h.Wizard.Precision.float),_=p[0],m=p[1];this._shadowType!==t.ShadowMappingType.HardShadowMapping&&m!==i.FLOAT&&(a.log(a.LogLevel.Warning,"floating point textures are not supported, falling back to HardShadowMapping"),this._shadowType=t.ShadowMappingType.HardShadowMapping);var v=i.LINEAR;return m!==i.FLOAT||this._context.supportsTextureFloatLinear||(v=i.NEAREST),m!==o.HALF_FLOAT||this._context.supportsTextureHalfFloatLinear||(v=i.NEAREST),this._shadowMapTexture=new f.Texture2D(this._context),this._shadowMapTexture.initialize(this._shadowMapSize[0],this._shadowMapSize[1],_,c,i.FLOAT),this._shadowMapTexture.wrap(i.CLAMP_TO_EDGE,i.CLAMP_TO_EDGE),this._shadowMapTexture.filter(v,v),this._shadowMapRenderbuffer=new l.Renderbuffer(this._context),this._shadowMapRenderbuffer.initialize(this._shadowMapSize[0],this._shadowMapSize[1],i.DEPTH_COMPONENT16),this._shadowMapFBO=new s.Framebuffer(this._context),this._shadowMapFBO.initialize([[o.COLOR_ATTACHMENT0,this._shadowMapTexture],[i.DEPTH_ATTACHMENT,this._shadowMapRenderbuffer]]),this._shadowMapFBO.clearColor([1,1,1,1]),this._shadowMapFBO.clearDepth(1),this.hasBlur&&(this._gaussFilter=new u.GaussFilter(this._context),this._gaussFilter.kernelSize=this._gaussFilterKernelSize,this._gaussFilter.standardDeviation=this._gaussFilterKernelSize/6,this._gaussFilter.initialize(),this._intermediateBlurTexture=new f.Texture2D(this._context,"IntermediateBlurTexture"),this._intermediateBlurTexture.initialize(this._blurredShadowMapSize[0],this._blurredShadowMapSize[1],_,c,i.FLOAT),this._intermediateBlurTexture.wrap(i.CLAMP_TO_EDGE,i.CLAMP_TO_EDGE),this._intermediateBlurTexture.filter(v,v),this._intermediateBlurFBO=new s.Framebuffer(this._context,"IntermediateBlurFramebuffer"),this._intermediateBlurFBO.initialize([[o.COLOR_ATTACHMENT0,this._intermediateBlurTexture]]),this._intermediateBlurFBO.clearColor([1,1,1,1]),this._intermediateBlurFBO.clearDepth(1),this._blurTexture=new f.Texture2D(this._context,"BlurTexture"),this._blurTexture.initialize(this._blurredShadowMapSize[0],this._blurredShadowMapSize[1],_,c,i.FLOAT),this._blurTexture.wrap(i.CLAMP_TO_EDGE,i.CLAMP_TO_EDGE),this._blurTexture.filter(v,v),this._blurFBO=new s.Framebuffer(this._context,"BlurFramebuffer"),this._blurFBO.initialize([[o.COLOR_ATTACHMENT0,this._blurTexture]]),this._blurFBO.clearColor([1,1,1,1]),this._blurFBO.clearDepth(1)),!0},t.prototype.uninitialize=function(){this._shadowMapFBO.uninitialize(),this._shadowMapRenderbuffer.uninitialize(),this._shadowMapTexture.uninitialize(),this.hasBlur&&(this._intermediateBlurFBO.uninitialize(),this._intermediateBlurTexture.uninitialize(),this._blurFBO.uninitialize(),this._blurTexture.uninitialize(),this._gaussFilter.uninitialize())},t.prototype.frame=function(e){var t=this._context.gl;t.viewport(0,0,this._shadowMapSize[0],this._shadowMapSize[1]),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),this._shadowMapFBO.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT,!0,!1),e(),t.disable(t.DEPTH_TEST),t.depthFunc(t.LESS),this.hasBlur&&(t.viewport(0,0,this._intermediateBlurFBO.width,this._intermediateBlurFBO.height),this._intermediateBlurFBO.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT,!0,!1),this._gaussFilter.filter(this._shadowMapTexture,u.GaussFilter.Direction.Horizontal),t.viewport(0,0,this._blurFBO.width,this._blurFBO.height),this._blurFBO.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT,!0,!1),this._gaussFilter.filter(this._intermediateBlurTexture,u.GaussFilter.Direction.Vertical))},o([c.Initializable.assert_initialized()],t.prototype,"resize",null),o([c.Initializable.assert_initialized()],t.prototype,"resizeBlurTexture",null),o([c.Initializable.initialize()],t.prototype,"initialize",null),o([c.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([c.Initializable.assert_initialized()],t.prototype,"frame",null),t}(c.Initializable);t.ShadowPass=d,function(e){!function(e){e[e.HardShadowMapping=0]="HardShadowMapping",e[e.VarianceShadowMapping=1]="VarianceShadowMapping",e[e.ExponentialShadowMapping=2]="ExponentialShadowMapping",e[e.ExponentialVarianceShadowMapping=3]="ExponentialVarianceShadowMapping"}(e.ShadowMappingType||(e.ShadowMappingType={}))}(d=t.ShadowPass||(t.ShadowPass={})),t.ShadowPass=d},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(5),s=function(e){function t(t,n,r,i){void 0===r&&(r=!1),void 0===i&&(i=[1,1,1]);var s=e.call(this,t,n)||this;s._vertexLocation=0,s._extent=o.vec3.fromValues(1,1,1),s._uvCoordinates=!1,n=void 0!==n&&""!==n?n:s.constructor.name;var u=new a.Buffer(t,n+"VBO");s._buffers.push(u);var c=new a.Buffer(t,n+"IndicesVBO");return s._buffers.push(c),s._extent=o.vec3.clone(i),s._uvCoordinates=r,s}return i(t,e),t.prototype.bindBuffers=function(){!1===this._uvCoordinates?this._buffers[0].attribEnable(this._vertexLocation,3,this.context.gl.FLOAT,!1,0,0,!0,!1):(this._buffers[0].attribEnable(this._vertexLocation,3,this.context.gl.FLOAT,!1,20,0,!0,!1),this._buffers[0].attribEnable(this._uvCoordLocation,2,this.context.gl.FLOAT,!1,20,12,!1,!1)),this._buffers[1].bind()},t.prototype.unbindBuffers=function(){this._buffers[0].attribDisable(this._vertexLocation,!0,!0),this._uvCoordinates&&this._buffers[0].attribDisable(this._uvCoordLocation,!1,!0),this._buffers[1].unbind()},t.prototype.initialize=function(n,r){var i=this;void 0===n&&(n=0),void 0===r&&(r=1),this._vertexLocation=n,this._uvCoordLocation=r;var o=this.context.gl,a=e.prototype.initialize.call(this,[o.ARRAY_BUFFER,o.ELEMENT_ARRAY_BUFFER],[n,r]),s=this._uvCoordinates,u=s?t.VERTICES_UV:t.VERTICES;return u=u.map((function(e,t){return e*(!1===s?.5*i._extent[t%3]:t%5<3?.5*i._extent[t%5]:1)})),this._buffers[0].data(u,o.STATIC_DRAW),this._buffers[1].data(s?t.INDICES_UV:t.INDICES,o.STATIC_DRAW),this._count=s?t.INDICES_UV.length:t.INDICES.length,a},t.prototype.draw=function(){var e=this.context.gl;e.drawElements(e.TRIANGLE_STRIP,this._count,e.UNSIGNED_BYTE,0)},Object.defineProperty(t.prototype,"vertexLocation",{get:function(){return this._vertexLocation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"uvCoordLocation",{get:function(){return this._uvCoordLocation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"extent",{get:function(){return this._extent},enumerable:!0,configurable:!0}),t.VERTICES=new Float32Array([-1,-1,1,1,-1,1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1,1,1,-1]),t.INDICES=new Uint8Array([0,1,2,3,7,1,5,4,7,6,2,4,0,1]),t.VERTICES_UV=new Float32Array([-1,-1,1,0,0,1,-1,1,1,0,-1,1,1,0,1,1,1,1,1,1,-1,1,1,0,0,1,1,1,1,0,1,1,-1,1,1,1,1,1,0,1,1,-1,1,0,0,1,-1,-1,1,0,1,-1,1,1,1,-1,-1,-1,0,0,1,-1,-1,0,0,-1,-1,-1,1,0,1,1,-1,0,1,-1,1,-1,1,1,-1,1,-1,0,1,-1,1,1,1,1,-1,-1,1,1,0,-1,-1,1,0,1]),t.INDICES_UV=new Uint8Array([3,2,1,0,10,19,11,18,11,17,16,4,16,5,6,7,6,8,9,10,9,11,12,13,14,15]),t}(n(7).Geometry);t.CuboidGeometry=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(5),s=n(7),u=n(54),c=function(e){function t(t,n,r,i){void 0===r&&(r=1),void 0===i&&(i=!0);var o=e.call(this,t,n)||this;o._diameter=1,o._textured=!1,o._size=0,n=void 0!==n&&""!==n?n:o.constructor.name,o._diameter=r,o._textured=i;var s=new a.Buffer(t,n+"IndexBuffer");o._buffers.push(s);var u=new a.Buffer(t,n+"VBO");if(o._buffers.push(u),o._textured){var c=new a.Buffer(t,n+"UV");o._buffers.push(c)}return o}return i(t,e),t.prototype.bindBuffers=function(){this._buffers[0].bind(),this._buffers[1].attribEnable(this._vertexLocation,3,this.context.gl.FLOAT,!1,0,0,!0,!1),this._textured&&this._buffers[2].attribEnable(this._texCoordLocation,2,this.context.gl.FLOAT,!1,0,0,!0,!1)},t.prototype.unbindBuffers=function(){this._buffers[0].unbind(),this._buffers[1].attribDisable(this._vertexLocation,!0,!0),this._textured&&this._buffers[2].attribDisable(this._texCoordLocation,!0,!0)},t.prototype.initialize=function(t,n){void 0===t&&(t=0),void 0===n&&(n=1);var r=this.context.gl;this._vertexLocation=t,this._texCoordLocation=n;var i=e.prototype.initialize.call(this,[r.ELEMENT_ARRAY_BUFFER,r.ARRAY_BUFFER,r.ARRAY_BUFFER],[8,t,n]);o.assert(void 0!==this._buffers[0]&&this._buffers[0].object instanceof WebGLBuffer,"expected valid WebGLBuffer"),o.assert(void 0!==this._buffers[1]&&this._buffers[1].object instanceof WebGLBuffer,"expected valid WebGLBuffer"),this._textured&&o.assert(void 0!==this._buffers[2]&&this._buffers[2].object instanceof WebGLBuffer,"expected valid WebGLBuffer");var a=new u.Icosahedron;a.generateGeometry(3),this._textured&&a.generateTextureCoordinates();for(var s=a.faces,c=new Uint16Array(3*s.length),l=0,f=0,h=s;f<h.length;f++){var d=h[f];c[l+0]=d[0],c[l+1]=d[1],c[l+2]=d[2],l+=3}this._buffers[0].data(c,r.STATIC_DRAW),this._size=3*s.length;var p=a.vertices,_=new Float32Array(3*p.length);l=0;for(var m=0,v=p;m<v.length;m++){var g=v[m];_[l+0]=g[0]*this._diameter,_[l+1]=g[1]*this._diameter,_[l+2]=g[2]*this._diameter,l+=3}if(this._buffers[1].data(_,r.STATIC_DRAW),this._textured){var b=a.texcoords,y=new Float32Array(2*b.length);if(b&&b.length>0){l=0;for(var x=0,E=b;x<E.length;x++){var T=E[x];y[l+0]=T[0],y[l+1]=T[1],l+=2}}this._buffers[2].data(y,r.STATIC_DRAW)}return i},t.prototype.draw=function(){var e=this.context.gl;e.drawElements(e.TRIANGLES,this._size,e.UNSIGNED_SHORT,0)},Object.defineProperty(t.prototype,"vertexLocation",{get:function(){return this._vertexLocation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"texCoordLocation",{get:function(){return this._texCoordLocation},enumerable:!0,configurable:!0}),t}(s.Geometry);t.GeosphereGeometry=c},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(5),s=function(e){function t(t,n){var r=e.call(this,t,n)||this;r._vertexLocation=0,r._translation=o.vec3.fromValues(0,0,0),r._scale=o.vec3.fromValues(1,1,1),r._rotation=o.quat.create(),n=void 0!==n&&""!==n?n:r.constructor.name;var i=new a.Buffer(t,n+"VBO"),s=new a.Buffer(t,n+"IndexBuffer");return r._buffers.push(i),r._buffers.push(s),r}return i(t,e),t.prototype.bindBuffers=function(){this._buffers[0].attribEnable(this._vertexLocation,3,this.context.gl.FLOAT,!1,0,0,!0,!1),this._buffers[1].bind()},t.prototype.unbindBuffers=function(e){this._buffers[0].attribDisable(e[0],!0,!0),this._buffers[1].unbind()},t.prototype.initialize=function(n){void 0===n&&(n=0);var r=this.context.gl;this._vertexLocation=n;var i=e.prototype.initialize.call(this,[r.ARRAY_BUFFER,r.ELEMENT_ARRAY_BUFFER],[n,8]);return this._buffers[0].data(t.VERTICES,r.STATIC_DRAW),this._buffers[1].data(t.INDICES,r.STATIC_DRAW),i},t.prototype.draw=function(){var e=this.context.gl;e.drawElements(e.TRIANGLE_STRIP,t.INDICES.length,e.UNSIGNED_BYTE,0)},Object.defineProperty(t.prototype,"translation",{set:function(e){this._translation=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scale",{set:function(e){this._scale=o.vec3.fromValues(e[0],1,e[1])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rotation",{set:function(e){this._rotation=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"transformation",{get:function(){var e=o.mat4.create();return o.mat4.fromRotationTranslationScale(e,this._rotation,this._translation,this._scale)},enumerable:!0,configurable:!0}),t.VERTICES=new Float32Array([-1,0,-1,-1,0,1,1,0,-1,1,0,1]),t.INDICES=new Uint8Array([0,1,2,3]),t}(n(7).Geometry);t.PlaneGeometry=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(5),o=n(7),a=n(24),s=n(4),u=function(){function e(e){this._texture2Ds=new Map,this._materials=new Map,this._geometries=new Map,this._buffers=new Map,this._context=e}return e.prototype.fetchTexture2D=function(e,t,n){if(void 0===n&&(n=!1),!this._texture2Ds.has(e)){var i=new s.Texture2D(this._context,e);return r.assert(i.identifier===e,"expected object identifier to be unchanged"),this._texture2Ds.set(e,i),i.fetch(t,n)}},e.prototype.add=function(e,t){var n=new Array;if(e instanceof s.Texture2D)for(var r=e,u=0,c=t;u<c.length;u++){var l=c[u];this._texture2Ds.has(l)||(this._texture2Ds.set(l,r),n.push(l))}if(e instanceof a.Material)for(var f=e,h=0,d=t;h<d.length;h++)l=d[h],this._materials.has(l)||(this._materials.set(l,f),n.push(l));if(e instanceof o.Geometry)for(var p=e,_=0,m=t;_<m.length;_++)l=m[_],this._geometries.has(l)||(this._geometries.set(l,p),n.push(l));if(e instanceof i.Buffer)for(var v=e,g=0,b=t;g<b.length;g++)l=b[g],this._buffers.has(l)||(this._buffers.set(l,v),n.push(l));return n},e.prototype.get=function(e){return this._texture2Ds.has(e)?this._texture2Ds.get(e):this._materials.has(e)?this._materials.get(e):this._geometries.has(e)?this._geometries.get(e):this._buffers.has(e)?this._buffers.get(e):void 0},e.prototype.uninitialize=function(){for(var e=0,t=Array.from(this._geometries.values());e<t.length;e++){var n=t[e];n.initialized&&n.uninitialize()}this._geometries.clear();for(var r=0,i=Array.from(this._texture2Ds.values());r<i.length;r++){var o=i[r];o.initialized&&o.uninitialize()}this._texture2Ds.clear();for(var a=0,s=Array.from(this._buffers.values());a<s.length;a++){var u=s[a];u.initialized&&u.uninitialize()}this._buffers.clear(),this._materials.clear()},e}();t.ResourceManager=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),s=n(0),u=n(12),c=n(2),l=function(e){function t(t){var n=e.call(this)||this;return n._altered=Object.assign(new u.ChangeLookup,{any:!1,camera:!1}),n._context=t,n}return i(t,e),t.prototype.initialize=function(){return!0},t.prototype.uninitialize=function(){},t.prototype.prepare=function(){},t.prototype.update=function(e){void 0===e&&(e=!1)},t.prototype.frame=function(){if(s.assert(this._target&&this._target.valid,"valid target expected"),s.assert(this._program&&this._program.valid,"valid program expected"),s.assert(void 0!==this.updateModelTransform,"Model transform function needs to be initialized."),s.assert(void 0!==this.updateViewProjectionTransform,"View Projection transform function needs to be initialized."),s.assert(void 0!==this.bindMaterial,"Material binding function needs to be initialized."),void 0!==this._scene){var e=this._context.gl;e.enable(e.CULL_FACE),e.cullFace(e.BACK),e.enable(e.DEPTH_TEST);var t=this._target.size;e.viewport(0,0,t[0],t[1]);var n=this._clearColor;e.clearColor(n[0],n[1],n[2],n[3]),this._target.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT,!0,!1),this._program.bind(),void 0!==this.bindUniforms&&this.bindUniforms(),this.renderNode(this._scene,a.mat4.create()),this._program.unbind(),e.cullFace(e.BACK),e.disable(e.CULL_FACE),e.disable(e.BLEND)}},t.prototype.renderNode=function(e,t){s.assert(void 0!==this.updateModelTransform,"Model transform function needs to be initialized."),s.assert(void 0!==this.updateViewProjectionTransform,"View Projection transform function needs to be initialized.");var n=a.mat4.clone(t),r=e.componentsOfType("TransformComponent");if(s.assert(r.length<=1,"SceneNode can not have more than one transform component"),1===r.length){var i=r[0];a.mat4.mul(n,n,i.transform)}for(var o=0,u=e.componentsOfType("GeometryComponent");o<u.length;o++){var c=u[o],l=c.material,f=c.geometry;f.bind(),void 0!==this.bindGeometry&&this.bindGeometry(f),this.bindMaterial(l),this.updateModelTransform(n),this.updateViewProjectionTransform(this._camera.viewProjection),f.draw(),f.unbind()}if(e.nodes)for(var h=0,d=e.nodes;h<d.length;h++){var p=d[h];this.renderNode(p,n)}},Object.defineProperty(t.prototype,"target",{set:function(e){this.assertInitialized(),this._target=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ndcOffset",{set:function(e){this.assertInitialized(),this._ndcOffset=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"camera",{set:function(e){this.assertInitialized(),this._camera!==e&&(this._camera=e,this._altered.alter("camera"))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"clearColor",{set:function(e){this._clearColor=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"program",{set:function(e){this._program=e},enumerable:!0,configurable:!0}),o([c.Initializable.initialize()],t.prototype,"initialize",null),o([c.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([c.Initializable.assert_initialized()],t.prototype,"update",null),o([c.Initializable.assert_initialized()],t.prototype,"frame",null),t}(n(55).SceneRenderPass);t.ForwardSceneRenderPass=l},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){var n=e.call(this,"TransformComponent")||this;return n._transform=t,n}return i(t,e),Object.defineProperty(t.prototype,"transform",{get:function(){return this._transform},enumerable:!0,configurable:!0}),t}(n(36).SceneNodeComponent);t.TransformComponent=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return e.call(this,"GeometryComponent")||this}return i(t,e),Object.defineProperty(t.prototype,"geometry",{get:function(){return this._geometry},set:function(e){this._geometry=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"material",{get:function(){return this._material},set:function(e){this._material=e},enumerable:!0,configurable:!0}),t}(n(36).SceneNodeComponent);t.GeometryComponent=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this._context=e,this._name=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),e}();t.Material=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(116);t.FontFace=r.FontFace;var i=n(17);t.GlyphVertices=i.GlyphVertices;var o=n(18);t.Label=o.Label;var a=n(59);t.LabelGeometry=a.LabelGeometry;var s=n(118);t.LabelRenderPass=s.LabelRenderPass;var u=n(60);t.Position2DLabel=u.Position2DLabel;var c=n(61);t.Position3DLabel=c.Position3DLabel;var l=n(62);t.Projected3DLabel=l.Projected3DLabel;var f=n(58);t.Text=f.Text;var h=n(25);t.Typesetter=h.Typesetter},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(4),o=n(11),a=n(32),s=n(117),u=n(57),c=function(){function e(e,t){this._ascent=0,this._descent=0,this._lineGap=0,this._glyphTextureExtent=[0,0],this._glyphTexturePadding=[0,0,0,0],this._glyphs=new Map,this._context=e;var n=e.gl;t=void 0!==t&&""!==t?t:this.constructor.name,this._glyphTexture=new i.Texture2D(e,t+"GlyphAtlas");var r=o.Wizard.queryInternalTextureFormat(e,n.RGBA,o.Wizard.Precision.byte);this._glyphTexture.initialize(1,1,r[0],n.RGBA,r[1]),this._glyphTexture.filter(n.LINEAR,n.LINEAR)}return e.fromFile=function(t,n,r,i){return void 0===r&&(r=!1),a.fetchAsync(t,"text").then((function(o){var a=new e(n,i);return s.FontFaceLoader.process(a,o,t,r).then((function(e){return e})).catch((function(e){return Promise.reject("processing font face data failed: "+e)}))}))},e.prototype.hasGlyph=function(e){return!!this._glyphs.get(e)},e.prototype.glyph=function(e){var t=this._glyphs.get(e);if(t)return t;var n=new u.Glyph;return n.index=e,n},e.prototype.addGlyph=function(e){r.assert(!this._glyphs.get(e.index),"expected glyph to not already exist"),this._glyphs.set(e.index,e)},e.prototype.arrayOfGlyphIndices=function(){return Array.from(this._glyphs.keys())},e.prototype.depictable=function(e){return this.glyph(e).depictable()},e.prototype.kerning=function(e,t){var n=this._glyphs.get(e);return n?n.kerning(t):0},e.prototype.setKerning=function(e,t,n){var i=this._glyphs.get(e);i&&this.hasGlyph(t)?i.setKerning(t,n):r.assert(!1,"expected glyph or glyph of subsequent index to exist,                 given "+e+" and "+t+" respectively")},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},set:function(e){r.assert(e>0,"expected size to be greater than 0.0, given "+e),this._size=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"base",{get:function(){return this._base},set:function(e){r.assert(e>0,"expected base to be greater than 0.0, given "+e),this._base=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ascent",{get:function(){return this._ascent},set:function(e){r.assert(e>0,"expected ascent to be greater than 0.0, given "+e),this._ascent=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"descent",{get:function(){return this._descent},set:function(e){this._descent=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lineGap",{get:function(){return this._lineGap},set:function(e){this._lineGap=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lineHeight",{get:function(){return this.size+this.lineGap},set:function(e){r.assert(this.size>0,"expected size to be greater than zero to derive line gap from line height"),this._lineGap=e-this.size},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lineSpace",{get:function(){return 0===this.lineHeight?this.lineHeight:this.size/this.lineHeight},set:function(e){this._lineGap=this.size*(e-1)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glyphTextureExtent",{get:function(){return this._glyphTextureExtent},set:function(e){r.assert(e[0]>0,"expected extent.x to be greater than 0.0, given "+e[0]),r.assert(e[1]>0,"expected extent.y to be greater than 0.0, given "+e[1]),this._glyphTextureExtent=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glyphTexturePadding",{get:function(){return this._glyphTexturePadding},set:function(e){r.assert(e[0]>=0,"expected padding[0] to be greater than 0.0, given "+e[0]),r.assert(e[1]>=0,"expected padding[1] to be greater than 0.0, given "+e[1]),r.assert(e[2]>=0,"expected padding[2] to be greater than 0.0, given "+e[2]),r.assert(e[3]>=0,"expected padding[3] to be greater than 0.0, given "+e[3]),this._glyphTexturePadding=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glyphTexture",{get:function(){return this._glyphTexture},set:function(e){this._glyphTexture=e},enumerable:!0,configurable:!0}),e}();t.FontFace=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(57),o=function(){function e(){}return e.processInfo=function(e,t){var n=new Map;if(!this.readKeyValuePairs(e,["size","padding"],n))return!1;t.size=parseFloat(n.get("size"));var i=n.get("padding").split(",");if(4!==i.length)return r.log(r.LogLevel.Warning,"expected 4 values for padding, given "+i+" ("+i.length+")"),!1;var o=[parseFloat(i[0]),parseFloat(i[1]),parseFloat(i[2]),parseFloat(i[3])];return t.glyphTexturePadding=o,!0},e.processCommon=function(e,t){var n=new Map;return!!this.readKeyValuePairs(e,["lineHeight","base","scaleW","scaleH"],n)&&(t.base=parseFloat(n.get("base")),n.has("ascent")&&(t.ascent=parseFloat(n.get("ascent"))),n.has("descent")&&(t.descent=parseFloat(n.get("descent"))),t.lineHeight=parseFloat(n.get("lineHeight")),t.glyphTextureExtent=[parseFloat(n.get("scaleW")),parseFloat(n.get("scaleH"))],!0)},e.processPage=function(e,t,n){var i=new Map;if(this.readKeyValuePairs(e,["file"],i)){var o=r.dirname(n),a=i.get("file");return a=a.replace(/['"]+/g,""),t.glyphTexture.fetch(o+"/"+a,!1,!0).catch((function(){return Promise.reject("page '"+a+"' referenced in font file '"+n+"' was not found")}))}},e.processChar=function(e,t){var n=new Map;if(!this.readKeyValuePairs(e,["id","x","y","width","height","xoffset","yoffset","xadvance"],n))return!1;var o=parseInt(n.get("id"),10);r.logIf(o<=0,r.LogLevel.Warning,"expected glyph index to be greater than 0, given "+o);var a=new i.Glyph;a.index=o;var s=[1/t.glyphTextureExtent[0],1/t.glyphTextureExtent[1]],u=[parseFloat(n.get("width")),parseFloat(n.get("height"))];return a.subTextureOrigin=[parseFloat(n.get("x"))*s[0],1-(parseFloat(n.get("y"))+u[1])*s[1]],a.extent=u,a.subTextureExtent[0]=u[0]*s[0],a.subTextureExtent[1]=u[1]*s[1],a.bearingFromFontBaseAndOffset(t.base,parseFloat(n.get("xoffset")),parseFloat(n.get("yoffset"))),a.advance=parseFloat(n.get("xadvance")),t.addGlyph(a),!0},e.processKerning=function(e,t){var n=new Map;if(!this.readKeyValuePairs(e,["first","second","amount"],n))return!1;var i=parseInt(n.get("first"),10);if(i<=0)return r.log(r.LogLevel.Warning,"expected kerning's first to be greater than 0, given "+i),!1;var o=parseInt(n.get("second"),10);if(o<=0)return r.log(r.LogLevel.Warning,"expected kerning's second to be greater than 0, given "+o),!1;var a=parseFloat(n.get("amount"));return t.setKerning(i,o,a),!0},e.readKeyValuePairs=function(e,t,n){for(var i,o,a=0,s=e;a<s.length;a++){var u=s[a].split("=");i=u[0],o=u[1],n.set(i,o)}var c=!0;return t.forEach((function(e){return c=c&&n.has(e)})),c||r.log(r.LogLevel.Warning,"Not all required keys are provided! Mandatory keys: "+t),c},e.findAscentAndDescentIfNoneProvided=function(e,t){if(!(e.ascent>0&&e.descent<0)){e.ascent>0&&(e.descent=e.ascent-t),e.descent<0&&(e.ascent=e.descent-t);for(var n=Number.MIN_VALUE,i=0,o=e.arrayOfGlyphIndices();i<o.length;i++){var a=o[i];0!==e.glyph(a).extent[1]&&(n=Math.max(e.glyph(a).bearing[1],n))}e.ascent=n,e.descent=e.ascent-t,r.log(r.LogLevel.Debug,"ascent not specified, derived "+e.ascent+" from maximum y-offset")}},e.process=function(t,n,i,o){void 0===o&&(o=!1);for(var a=n.split("\n"),s=new Array,u=!0,c=0,l=a;c<l.length;c++){var f=l[c].split(" "),h=f[0];switch(f=f.slice(1),h){case"info":u=this.processInfo(f,t);break;case"common":u=this.processCommon(f,t);break;case"page":if(o)break;var d=this.processPage(f,t,i);void 0!==d&&s.push(d);break;case"char":u=this.processChar(f,t);break;case"kerning":this.processKerning(f,t)}if(!1===u)break}return e.findAscentAndDescentIfNoneProvided(t,t.size),t.size<=0&&r.log(r.LogLevel.Warning,"expected fontFace.size to be greater than 0, given "+t.size),Promise.all(s).then((function(){return t}))},e}();t.FontFaceLoader=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),s=n(0),u=n(12),c=n(2),l=n(8),f=n(9),h=n(4),d=n(17),p=n(18),_=n(59),m=n(60),v=n(61),g=n(62),b=function(e){function t(n){var r=e.call(this)||this;return r._altered=Object.assign(new u.ChangeLookup,{any:!1,camera:!1,geometry:!1,labels:!1,aaStepScale:!1,aaSampling:!1}),r._ndcOffset=[0,0],r._depthMask=!1,r._aaSampling=t.Sampling.Smooth1,r._labels=new Array,r._ranges=new Array,r._verticesPerLabel=new Array,r._context=n,r._depthFunc=n.gl.LESS,r._program=new l.Program(n,"LabelRenderProgram"),r._geometry=new _.LabelGeometry(r._context,"LabelGeometry"),r._aaStepScale=t.DEFAULT_AA_STEP_SCALE,r}return i(t,e),t.prototype.prepare=function(){for(var e=this._camera.viewport,t=0;t<this._labels.length;++t){var n=this._labels[t],r=void 0,i=this._altered.labels&&void 0===this._verticesPerLabel[t];n instanceof m.Position2DLabel?(n.frameSize=e,r=n.typeset(i)):n instanceof g.Projected3DLabel?(n.camera=this._camera,r=n.typeset(i)):n instanceof v.Position3DLabel&&(r=n.typeset(i)),void 0===r?r=this._verticesPerLabel[t]:this._verticesPerLabel[t]=r;var o=t>0?this._ranges[t-1][1]:0,a=o+(void 0===r?0:r.length);this._ranges[t]=[o,a]}var s=d.GlyphVertices.concat(this._verticesPerLabel);this._geometry.update(s.origins,s.tangents,s.ups,s.texCoords)},t.prototype.initialize=function(){var e=this._context.gl;this._geometry.initialize(),this._context.enable(["OES_standard_derivatives"]);var t=new f.Shader(this._context,e.VERTEX_SHADER,"glyph.vert");t.initialize(n(119));var r=new f.Shader(this._context,e.FRAGMENT_SHADER,"glyph.frag");return r.initialize(n(120)),this._program.initialize([t,r],!1),this._program.attribute("a_vertex",this._geometry.vertexLocation),this._program.attribute("a_texCoord",this._geometry.texCoordLocation),this._program.attribute("a_origin",this._geometry.originLocation),this._program.attribute("a_tangent",this._geometry.tangentLocation),this._program.attribute("a_up",this._geometry.upLocation),this._program.link(),this._uViewProjection=this._program.uniform("u_viewProjection"),this._uNdcOffset=this._program.uniform("u_ndcOffset"),this._uColor=this._program.uniform("u_color"),this._uAAStepScale=this._program.uniform("u_aaStepScale"),this._uAASampling=this._program.uniform("u_aaSampling"),this._uTransform=this._program.uniform("u_transform"),this._uDynamic=this._program.uniform("u_dynamic"),this._program.bind(),e.uniform1i(this._program.uniform("u_glyphs"),0),e.uniform1f(this._uAAStepScale,this._aaStepScale),e.uniform1i(this._uAASampling,this._aaSampling),this._program.unbind(),!0},t.prototype.uninitialize=function(){this._geometry.uninitialize(),this._program.uninitialize(),this._uViewProjection=void 0,this._uNdcOffset=void 0,this._uColor=void 0,this._uAAStepScale=void 0,this._uAASampling=void 0,this._uTransform=void 0,this._uDynamic=void 0},t.prototype.update=function(e){void 0===e&&(e=!1);var t=this._context.gl;this._program.bind(),(e||this._altered.camera||this._camera.altered)&&t.uniformMatrix4fv(this._uViewProjection,!1,this._camera.viewProjection),(e||this._altered.aaStepScale)&&t.uniform1f(this._uAAStepScale,this._aaStepScale),(e||this._altered.aaSampling)&&t.uniform1i(this._uAASampling,this._aaSampling);for(var n=e||this._altered.labels||this._altered.camera||this._camera.altered,r=0;!1===n&&r<this._labels.length;)n=this._labels[r].altered,++r;n&&this.prepare(),this._altered.reset()},t.prototype.frame=function(){if(0!==this._geometry.numberOfGlyphs&&0!==this._labels.length){s.assert(this._target&&this._target.valid,"valid target expected");var e=this._context.gl,t=this._target.size;e.viewport(0,0,t[0],t[1]),e.enable(e.DEPTH_TEST),e.depthFunc(this._depthFunc),!1===this._depthMask&&e.depthMask(this._depthMask),e.enable(e.BLEND),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA),this._program.bind(),e.uniform2fv(this._uNdcOffset,this._ndcOffset),e.uniformMatrix4fv(this._uViewProjection,e.GL_FALSE,this._camera.viewProjection),this._target.bind(),this._geometry.bind();for(var n,r,i=[0,0],o=a.mat4.create(),u=0;u<this._labels.length;++u){var c=this._labels[u];if(i[1]=this._ranges[u][1],!(i[0]===i[1]||u<this._labels.length-1&&!c.valid)){var l=u<this._labels.length-1?this._labels[u+1]:void 0,f=l&&c.type===p.Label.Type.Static&&l.type===p.Label.Type.Static,d=l&&c.color.equals(l.color),_=l&&c.fontFace===l.fontFace,m=l&&c.fontSizeUnit===l.fontSizeUnit;if(!l||!(this._ranges[u+1][0]===this._ranges[u+1][1]||f&&d&&_&&m)){var v=c.type===p.Label.Type.Dynamic;switch(e.uniform1i(this._uDynamic,v),v&&e.uniformMatrix4fv(this._uTransform,!1,c.dynamicTransform),void 0!==n&&n.equals(c.color)||(e.uniform4fv(this._uColor,c.color.rgbaF32),n=c.color),r!==c.fontFace&&(c.fontFace.glyphTexture.bind(e.TEXTURE0),r=c.fontFace),c.fontSizeUnit){case p.Label.Unit.Pixel:e.uniformMatrix4fv(this._uViewProjection,e.GL_FALSE,o);break;case p.Label.Unit.World:case p.Label.Unit.Mixed:default:e.uniformMatrix4fv(this._uViewProjection,e.GL_FALSE,this._camera.viewProjection)}this._geometry.draw(i[0],i[1]-i[0]),i[0]=i[1]}}}e.bindTexture(e.TEXTURE_2D,h.Texture2D.DEFAULT_TEXTURE),!1===this._depthMask&&e.depthMask(!0),e.depthFunc(e.LESS),e.disable(e.DEPTH_TEST),e.disable(e.BLEND)}},t.prototype.unbind=function(){this._geometry.valid&&this._geometry.unbind(),this._program.valid&&this._program.unbind()},Object.defineProperty(t.prototype,"target",{set:function(e){this.assertInitialized(),this._target=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ndcOffset",{set:function(e){this.assertInitialized(),this._ndcOffset=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"camera",{set:function(e){this.assertInitialized(),this._camera!==e&&(this._camera=e,this._altered.alter("camera"))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"depthMask",{get:function(){return this._depthMask},set:function(e){this._depthMask=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"depthFunc",{get:function(){return this._depthFunc},set:function(e){this._depthFunc=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"labels",{get:function(){return this._labels},set:function(e){this._labels=e,this._ranges.length=this._labels.length,this._verticesPerLabel.length=this._labels.length,this._verticesPerLabel.fill(void 0),this._altered.alter("labels")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"aaStepScale",{get:function(){return this._aaStepScale},set:function(e){this._aaStepScale!==e&&(this._aaStepScale=e,this._altered.alter("aaStepScale"))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"aaSampling",{get:function(){return this._aaSampling},set:function(e){this._aaSampling!==e&&(this._aaSampling=e,this._altered.alter("aaSampling"))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"geometry",{get:function(){return this._geometry},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"program",{get:function(){return this._program},enumerable:!0,configurable:!0}),t.DEFAULT_AA_STEP_SCALE=.6666,o([c.Initializable.initialize()],t.prototype,"initialize",null),o([c.Initializable.uninitialize()],t.prototype,"uninitialize",null),o([c.Initializable.assert_initialized()],t.prototype,"update",null),o([c.Initializable.assert_initialized()],t.prototype,"frame",null),o([c.Initializable.assert_initialized()],t.prototype,"unbind",null),t}(c.Initializable);t.LabelRenderPass=b,function(e){!function(e){e[e.None=0]="None",e[e.Smooth1=1]="Smooth1",e[e.Horizontal3=2]="Horizontal3",e[e.Vertical3=3]="Vertical3",e[e.Grid3x3=4]="Grid3x3",e[e.Grid4x4=5]="Grid4x4"}(e.Sampling||(e.Sampling={}))}(b=t.LabelRenderPass||(t.LabelRenderPass={})),t.LabelRenderPass=b},function(e,t){e.exports="precision mediump float;\nprecision lowp int;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else\n    #define varying out\n#endif\n\n\n\n#if __VERSION__ == 100\n\n#extension GL_EXT_draw_buffers : enable\nattribute vec2 a_vertex;\n/* [ texture ll: vec2, ur: vec2 ] */\nattribute vec4 a_texCoord;\nattribute vec3 a_origin;\nattribute vec3 a_tangent;\nattribute vec3 a_up;\n\n#else\n\nin vec2 a_vertex;\n/* [ texture ll: vec2, ur: vec2 ]*/\nin vec4 a_texCoord;\nin vec3 a_origin;\nin vec3 a_tangent;\nin vec3 a_up;\n\n#endif\n\n\nuniform mat4 u_viewProjection;\nuniform vec2 u_ndcOffset;\nuniform mat4 u_transform;\nuniform bool u_dynamic;\n\nvarying vec2 v_uv;\n\n\nvoid ndcOffset(inout vec4 vertex, in vec2 offset) {\n    vertex.xy = offset * vec2(vertex.w) + vertex.xy;\n}\n\n\n\nvoid main(void)\n{\n    /* TEXTURE COORDS */\n\n    /* flip y-coordinates */\n    vec2 texExt = vec2(a_texCoord[2] - a_texCoord[0], a_texCoord[1] - a_texCoord[3]);\n\n    v_uv = a_vertex * texExt + vec2(a_texCoord[0], 1.0 - a_texCoord[1]);\n\n    /* POSITIONING */\n    /* quad data as flat array: [0, 0,  0, 1,  1, 0,  1, 1] (a_vertex), which translates to ll, lr, ul, ur corners.\n     * 2-------4\n     * |  \\    |\n     * |    \\  |\n     * 1-------3\n     * The current vertex is calculated based on the current quad corners and the tangent attributes.\n     * The following lines are optimized for MAD optimization.\n     */\n    vec3 tangentDirection = a_origin + a_vertex.x * a_tangent;\n    vec4 vertex = vec4(tangentDirection + a_vertex.y * a_up, 1.0);\n\n    if(u_dynamic) {\n        vertex = u_transform * vertex;\n    }\n    vertex = u_viewProjection * vertex;\n\n    ndcOffset(vertex, u_ndcOffset);\n    gl_Position = vertex;\n}\n"},function(e,t){e.exports="precision mediump float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n\n    #ifdef GL_OES_standard_derivatives\n        #extension GL_OES_standard_derivatives : enable\n        #define AASTEP\n    #endif\n\n#else\n    layout(location = 0) out vec4 fragColor;\n\n    #define AASTEP\n\n#endif\n\n\nuniform sampler2D u_glyphs;\nuniform vec4 u_color;\nuniform float u_aaStepScale;\nuniform int u_aaSampling;\n\nvarying vec2 v_uv;\n\nconst int channel = 0;\n\n\nfloat aastep(float t, float value)\n{\n#ifdef AASTEP\n    /* float afwidth = length(vec2(dFdx(value), dFdy(value))) * u_aaStepScale; */\n    float afwidth = fwidth(value) * u_aaStepScale;\n    /* The aa step scale is more of a hack to provide seemingly smoother (e.g., >= 1.0) or crisper (e.g., between 0.0\n     * and 1.0) contours without specific sampling. It's just scaling the outcome of the derivatives.\n     */\n\n    return smoothstep(t - afwidth, t + afwidth, value);\n#else\n    return step(t, value);\n#endif\n}\n\n\nfloat tex(float t, vec2 uv)\n{\n \treturn aastep(t, texture(u_glyphs, uv)[channel]);\n}\n\n#ifdef AASTEP\n\nfloat aastep3h(float t, vec2 uv)\n{\n\tfloat x = dFdy(uv.x) * 1.0 / 3.0;\n\n\tfloat v = tex(t, uv + vec2( -x, 0.0))\n          \t+ tex(t, uv + vec2(0.0, 0.0))\n          \t+ tex(t, uv + vec2( +x, 0.0));\n\n\treturn v / 3.0;\n}\n\nfloat aastep3v(float t, vec2 uv)\n{\n\tfloat y = dFdy(uv.y) * 1.0 / 3.0;\n\n\tfloat v = tex(t, uv + vec2( 0.0,  -y))\n          \t+ tex(t, uv + vec2( 0.0, 0.0))\n          \t+ tex(t, uv + vec2( 0.0,  +y));\n\n\treturn v / 3.0;\n}\n\nfloat aastep3x3(float t, vec2 uv)\n{\n\tfloat x = dFdx(uv.x) * 1.0 / 3.0;\n\tfloat y = dFdy(uv.y) * 1.0 / 3.0;\n\n\tfloat v = tex(t, uv + vec2(  -x, -y)) + tex(t, uv + vec2(  -x, 0.0)) + tex(t, uv + vec2(  -x, +y))\n\t      \t+ tex(t, uv + vec2( 0.0, -y)) + tex(t, uv + vec2( 0.0, 0.0)) + tex(t, uv + vec2( 0.0, +y))\n            + tex(t, uv + vec2(  +x, -y)) + tex(t, uv + vec2(  +x, 0.0)) + tex(t, uv + vec2(  +x, +y));\n\n\treturn v / 9.0;\n}\n\nfloat aastep4x4(float t, vec2 uv)\n{\n    float x0 = dFdx(uv.x);\n    float y0 = dFdx(uv.y);\n\tfloat x1 = x0 * 1.0 / 8.0;\n\tfloat y1 = y0 * 1.0 / 8.0;\n\tfloat x2 = x0 * 3.0 / 8.0;\n\tfloat y2 = y0 * 3.0 / 8.0;\n\n\tfloat v = tex(t, uv + vec2(-x2,-y2)) + tex(t, uv + vec2(-x2,-y1))\n            + tex(t, uv + vec2(-x2,+y1)) + tex(t, uv + vec2(-x2,+y2))\n\n\t        + tex(t, uv + vec2(-x1,-y2)) + tex(t, uv + vec2(-x1,-y1))\n\t        + tex(t, uv + vec2(-x1,+y1)) + tex(t, uv + vec2(-x1,+y2))\n\n\t      \t+ tex(t, uv + vec2(+x1,-y2)) + tex(t, uv + vec2(+x1,-y1))\n\t        + tex(t, uv + vec2(+x1,+y1)) + tex(t, uv + vec2(+x1,+y2))\n\n\t        + tex(t, uv + vec2(+x2,-y2)) + tex(t, uv + vec2(+x2,-y1))\n\t        + tex(t, uv + vec2(+x2,+y1)) + tex(t, uv + vec2(+x2,+y2));\n\n\treturn v / 16.0;\n}\n\n// vec4 subpix(float r, float g, float b, vec4 fore, vec4 back)\n// {\n// \treturn vec4(mix(back.rgb, fore.rgb, vec3(r, g, b)), mix(back.a, fore.a, (r + b + g) / 3.0));\n// }\n\n#endif\n\nvoid main(void)\n{\n    /** @todo mipmap access? */\n\n    float a = 0.0;\n    /* When using multiframe sampling, might not be necessary and even tends to add more blur */\n#ifdef AASTEP\n    if(u_aaSampling == 0) {         // LabelRenderPass.Sampling.None\n#endif\n\n        a = step   (0.5, texture(u_glyphs, v_uv)[channel]);\n\n#ifdef AASTEP\n    } else if(u_aaSampling == 1) {  // LabelRenderPass.Sampling.Smooth\n        a = tex    (0.5, v_uv);\n    } else if(u_aaSampling == 2) {  // LabelRenderPass.Sampling.Horizontal3\n        a = aastep3h(0.5, v_uv);\n    } else if(u_aaSampling == 3) {  // LabelRenderPass.Sampling.Vertical3\n        a = aastep3v(0.5, v_uv);\n    } else if(u_aaSampling == 4) {  // LabelRenderPass.Sampling.Grid3x3\n        a = aastep3x3(0.5, v_uv);\n    } else if(u_aaSampling == 5) {  // LabelRenderPass.Sampling.Grid4x4\n        a = aastep4x4(0.5, v_uv);\n    }\n#endif\n\n    /**\n     * @todo - design decision: Don't discard fragments?, as we might need them for an id-buffer for\n     * clicking-interaction. Furthermore, using if-statement and discard can slow down performance:\n     * it's bad for IMR, TBR, TBDR and early-Z optimization\n     * https://stackoverflow.com/questions/8509051/is-discard-bad-for-program-performance-in-opengl\n     */\n    if(a <= 0.0) {\n        discard;\n    }\n    fragColor = vec4(u_color.rgb, u_color.a * a);\n\n    /* use when pre-multiplied color is required. */\n    /* fragColor = vec4(u_color.rgb * u_color.a * a, u_color.a * a); */\n}\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(122);t.GLTFLoader=r.GLTFLoader;var i=n(64);t.GLTFPbrMaterial=i.GLTFPbrMaterial,t.GLTFShaderFlags=i.GLTFShaderFlags;var o=n(65);t.GLTFPrimitive=o.GLTFPrimitive;var a=n(63);t.GLTFMesh=a.GLTFMesh},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n((function(t){t(e.value)})).then(a,s)}u((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(123),s=n(124),u=n(63),c=n(64),l=n(65),f=n(0),h=n(5),d=n(53),p=n(8),_=n(24),m=n(56),v=n(9),g=n(4),b=function(){function e(e){this._context=e;var t=this._context.gl;this._resourceManager=new d.ResourceManager(this._context),this._scenes=new Array;var r=new v.Shader(this._context,t.VERTEX_SHADER,"gltf_default.vert");r.initialize(n(125));var i=new v.Shader(this._context,t.FRAGMENT_SHADER,"gltf_default.frag");i.initialize(n(126)),this._pbrProgram=new p.Program(this._context,"GLTFPbrProgram"),this._pbrProgram.initialize([r,i])}return e.prototype.loadTextures=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o,a,u,c,l,h,d,p,_,m,v,b,y,x;return i(this,(function(i){switch(i.label){case 0:if(t=this._context.gl,n=e.gltf.textures,r=e.gltf.images,o=e.gltf.samplers,!n||!r)return[2];a=0,u=0,c=n,i.label=1;case 1:return u<c.length?void 0===(l=c[u]).source?(f.log(f.LogLevel.Warning,"The GLTF model does not specify a texture source. Possibly it uses an unsupported extension."),a++,[3,3]):(h=l.source,d=r[h],p=this._sceneName+"_texture_"+a,_=void 0===d.name?d.uri:d.name,[4,e.imageData.get(h)]):[3,4];case 2:m=i.sent(),s.GLTFHelper.isPowerOfTwo(m.width)&&s.GLTFHelper.isPowerOfTwo(m.height)||((v=document.createElement("canvas")).width=s.GLTFHelper.nextHighestPowerOfTwo(m.width),v.height=s.GLTFHelper.nextHighestPowerOfTwo(m.height),void 0===(b=v.getContext("2d"))&&f.log(f.LogLevel.Error,"Failed to create context while trying to resize non power of two texture"),b.drawImage(m,0,0,v.width,v.height),m=v),(y=new g.Texture2D(this._context,_)).initialize(m.width,m.height,t.RGBA8,t.RGBA,t.UNSIGNED_BYTE),y.data(m),void 0===o||void 0===l.sampler?(y.wrap(t.REPEAT,t.REPEAT),y.filter(t.LINEAR,t.LINEAR)):(x=o[l.sampler],y.wrap(x.wrapS||t.REPEAT,x.wrapT||t.REPEAT),y.filter(x.magFilter||t.LINEAR,x.minFilter||t.LINEAR),x.minFilter!==t.NEAREST_MIPMAP_NEAREST&&x.minFilter!==t.LINEAR_MIPMAP_NEAREST&&x.minFilter!==t.NEAREST_MIPMAP_LINEAR&&x.minFilter!==t.LINEAR_MIPMAP_LINEAR||y.generateMipMap()),this._resourceManager.add(y,[_,p]),a++,i.label=3;case 3:return u++,[3,1];case 4:return[2]}}))}))},e.prototype.getTexture=function(e){var t=this._sceneName+"_texture_"+e,n=this._resourceManager.get(t);if(void 0!==n)return n;f.log(f.LogLevel.Warning,"Texture with index "+e+" could not be located.")},e.prototype.loadMaterials=function(e){return r(this,void 0,void 0,(function(){var t,n,r,a,s,u,l,h,d,p,_,m,v;return i(this,(function(i){if(this._pbrDefaultMaterial=new c.GLTFPbrMaterial(this._context,"DefaultMaterial"),this._resourceManager.add(this._pbrDefaultMaterial,[this._pbrDefaultMaterial.name]),!(t=e.gltf.materials))return[2];for(n=0,r=0,a=t;r<a.length;r++)s=a[r],u=this._sceneName+"_material_"+n,l=new c.GLTFPbrMaterial(this._context,s.name),void 0!==(h=s.normalTexture)&&(l.normalTexture=this.getTexture(h.index),l.normalTexCoord=h.texCoord||0,l.normalScale=h.scale||1),void 0!==(d=s.occlusionTexture)&&(l.occlusionTexture=this.getTexture(d.index),l.occlusionTexCoord=d.texCoord||0),void 0!==(p=s.emissiveTexture)&&(l.emissiveTexture=this.getTexture(p.index),l.emissiveTexCoord=p.texCoord||0),l.emissiveFactor=o.vec3.fromValues(0,0,0),void 0!==s.emissiveFactor&&(l.emissiveFactor=o.vec3.fromValues.apply(void 0,s.emissiveFactor)),l.alphaMode=c.GLTFAlphaMode.OPAQUE,"MASK"===s.alphaMode?(l.alphaMode=c.GLTFAlphaMode.MASK,void 0===s.alphaCutoff&&f.log(f.LogLevel.Warning,"Material "+s.name+" has alphaMode MASK but does not specify an alphaCutoff"),l.alphaCutoff=s.alphaCutoff):"BLEND"===s.alphaMode&&(l.alphaMode=c.GLTFAlphaMode.BLEND),l.isDoubleSided=s.doubleSided||!1,void 0===(_=s.pbrMetallicRoughness)&&f.log(f.LogLevel.Warning,"Model contains a material without PBR information"),void 0!==(m=_.baseColorTexture)&&(l.baseColorTexture=this.getTexture(m.index),l.baseColorTexCoord=m.texCoord||0),void 0!==(v=_.metallicRoughnessTexture)&&(l.metallicRoughnessTexture=this.getTexture(v.index),l.metallicRoughnessTexCoord=v.texCoord||0),l.baseColorFactor=o.vec4.fromValues(1,1,1,1),void 0!==_.baseColorFactor&&(l.baseColorFactor=o.vec4.fromValues.apply(void 0,_.baseColorFactor)),l.metallicFactor=1,void 0!==_.metallicFactor&&(l.metallicFactor=_.metallicFactor),l.roughnessFactor=1,void 0!==_.roughnessFactor&&(l.roughnessFactor=_.roughnessFactor),this._resourceManager.add(l,[s.name,u]),n++;return[2]}))}))},e.prototype.inferBufferUsage=function(e,t){var n=this._context.gl,r=e.gltf.meshes,i=e.gltf.accessors;if(void 0===r||void 0===i)return f.log(f.LogLevel.Error,"Asset does not include any meshes or accessors"),n.ARRAY_BUFFER;for(var o=0,a=r;o<a.length;o++)for(var s=0,u=a[o].primitives;s<u.length;s++){var c=u[s].indices;if(void 0!==c){var l=i[c].bufferView;if(void 0!==l&&l===t)return n.ELEMENT_ARRAY_BUFFER}}return n.ARRAY_BUFFER},e.prototype.loadBuffers=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o,a,s,u,c,l,d,p,_,m,v,g,b,y;return i(this,(function(i){switch(i.label){case 0:if(t=this._context.gl,n=e.gltf.bufferViews,r=e.gltf.accessors,!n)return f.log(f.LogLevel.Warning,"The asset does not include any buffer view information."),[2];if(!r)return f.log(f.LogLevel.Warning,"The asset does not include any accessor information."),[2];o=0,a=0,s=n,i.label=1;case 1:return a<s.length?(u=s[a],g=this._sceneName+"_bufferView_"+o,[4,e.bufferViewData(o)]):[3,4];case 2:y=i.sent(),void 0===(c=u.target)&&(c=this.inferBufferUsage(e,o)),(b=new h.Buffer(this._context,g)).initialize(c),b.data(y,t.STATIC_DRAW),this._resourceManager.add(b,[g]),o++,i.label=3;case 3:return a++,[3,1];case 4:l=0,d=0,p=r,i.label=5;case 5:return d<p.length?(_=p[d],m=_.bufferView,v=_.sparse,void 0!==m&&void 0===v?[3,7]:(g=this._sceneName+"_accessor_"+l,b=new h.Buffer(this._context,g),[4,e.accessorData(l)])):[3,9];case 6:y=i.sent(),b.initialize(t.ARRAY_BUFFER),b.data(y,t.STATIC_DRAW),this._resourceManager.add(b,[g]),i.label=7;case 7:l++,i.label=8;case 8:return d++,[3,5];case 9:return[2]}}))}))},e.prototype.loadMeshes=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o,a,s,c,l,h,d,p;return i(this,(function(i){switch(i.label){case 0:if(t=new Array,void 0===(n=e.gltf.meshes))return f.log(f.LogLevel.Warning,"The asset does not contain any mesh information"),[2,t];r=0,o=0,a=n,i.label=1;case 1:if(!(o<a.length))return[3,7];s=a[o],c=new u.GLTFMesh,l=0,h=s.primitives,i.label=2;case 2:return l<h.length?(d=h[l],[4,this.loadPrimitive(e,d,r)]):[3,5];case 3:void 0!==(p=i.sent())&&c.addPrimitive(p),r++,i.label=4;case 4:return l++,[3,2];case 5:t.push(c),i.label=6;case 6:return o++,[3,1];case 7:return[2,t]}}))}))},e.prototype.loadPrimitive=function(e,t,n){return r(this,void 0,void 0,(function(){var r,o,u,h,d,p,_,m,v,g,b,y,x,E,T,w,A,M,O,R,S,P,L,F,I;return i(this,(function(i){if(r=this._context.gl,o=e.gltf.accessors,u=e.gltf.bufferViews,void 0===o)return f.log(f.LogLevel.Error,"GLTF asset does not have any accessors."),[2];if(void 0===u)return f.log(f.LogLevel.Error,"GLTF asset does not have any buffer views."),[2];for(y in h=t.mode,d=this._sceneName+"_primitive_"+n,h||(h=4),p=s.GLTFHelper.modeToEnum(r,h),_=new Array,m=this._pbrDefaultMaterial,void 0!==t.material&&(v=this._sceneName+"_material_"+t.material,void 0!==(g=this._resourceManager.get(v))?m=g:f.log(f.LogLevel.Warning,"Material "+v+" could not be found.")),b=0,t.attributes)x=s.GLTFHelper.nameToAttributeIndex(y),"NORMAL"===y&&(b|=c.GLTFShaderFlags.HAS_NORMALS),"TANGENT"===y&&(b|=c.GLTFShaderFlags.HAS_TANGENTS),"COLOR_0"===y&&(b|=c.GLTFShaderFlags.HAS_COLORS),"TEXCOORD_0"!==y&&"TEXCOORD_1"!==y&&"TEXCOORD_2"!==y||(b|=c.GLTFShaderFlags.HAS_UV),E=t.attributes[y],S=o[E],P=S.bufferView,T=S.sparse,F=void 0,w=0,void 0===P||void 0!==T?(A=this._sceneName+"_accessor_"+E,F=this._resourceManager.get(A)):(M=u[P],L=this._sceneName+"_bufferView_"+P,F=this._resourceManager.get(L),w=M.byteStride||0),(O=new l.VertexBinding).buffer=F,O.attributeIndex=x,O.numVertices=S.count,O.normalized=S.normalized||!1,O.size=a.GLTF_ELEMENTS_PER_TYPE[S.type],O.offset=S.byteOffset||0,O.stride=w,O.type=S.componentType,_.push(O);return void 0!==t.indices&&(S=o[t.indices],void 0===!(P=S.bufferView)&&f.log(f.LogLevel.Error,"Accessor does not reference a BufferView."),L=this._sceneName+"_bufferView_"+P,F=this._resourceManager.get(L),(R=new l.IndexBinding).buffer=F,R.numIndices=S.count,R.offset=S.byteOffset||0,R.type=S.componentType),(I=new l.GLTFPrimitive(this._context,_,R,p,m,b)).initialize(),this._resourceManager.add(I,[d]),[2,I]}))}))},e.prototype.generateScenes=function(e,t){return r(this,void 0,void 0,(function(){var n,r,a,s,u,c,l,h,d,p,v,g,b,y,x,E,T,w,A,M,O,R,S,P,L,F,I,C,N,j,D,B,U,z;return i(this,(function(i){if(n=e.gltf.nodes,r=e.gltf.scenes,!n||!r)return f.log(f.LogLevel.Warning,"The asset does not contain any nodes or scene information."),[2];for(a=new Map,s=0,u=0,c=n;u<c.length;u++){if(U=c[u],l=U.name||"node_"+s,N=new m.SceneNode(l),a.set(s,N),U.matrix?(v=o.mat4.fromValues.apply(void 0,U.matrix),g=new _.TransformComponent(v),N.addComponent(g)):(U.translation||U.rotation||U.scale)&&(h=o.quat.create(),U.rotation&&(h=o.quat.fromValues.apply(void 0,U.rotation)),d=o.vec3.create(),U.translation&&(d=o.vec3.fromValues.apply(void 0,U.translation)),p=o.vec3.fromValues(1,1,1),U.scale&&(p=o.vec3.fromValues.apply(void 0,U.scale)),v=o.mat4.fromRotationTranslationScale(o.mat4.create(),h,d,p),g=new _.TransformComponent(v),N.addComponent(g)),void 0!==U.mesh)for(b=t[U.mesh],y=0,x=b.primitives;y<x.length;y++)E=x[y],(T=new _.GeometryComponent).material=E.material,T.geometry=E,N.addComponent(T);(U.skin||U.weights)&&f.log(f.LogLevel.Info,"Imported GLTF assets uses skins, which are not supported yet."),s++}for(s=0,w=0,A=n;w<A.length;w++){if(U=A[w],N=a.get(s),f.assert(void 0!==N,"Scene node could not be found."),U.children)for(M=0,O=U.children;M<O.length;M++)R=O[M],(S=a.get(R))||f.log(f.LogLevel.Error,"Model references a node that does not exist."),N.addNode(S);s++}for(P=0,L=0,F=r;L<F.length;L++){if(I=F[L],C=I.name||"scene_"+P,N=new m.SceneNode(C),I.nodes)for(j=0,D=I.nodes;j<D.length;j++)B=D[j],(U=a.get(B))||f.log(f.LogLevel.Error,"Scene references a node that does not exist."),N.addNode(U);else f.log(f.LogLevel.Warning,"Scene "+C+" does not contain any nodes.");this._scenes.push(N),P++}return void 0!==(z=e.gltf.scene)&&(this._defaultScene=this._scenes[z]),[2]}))}))},e.prototype.loadAsset=function(e){return r(this,void 0,void 0,(function(){var t,n,r=this;return i(this,(function(i){switch(i.label){case 0:return[4,(new a.GltfLoader).load(e)];case 1:return t=i.sent(),n=t.gltf,this._sceneName="scene",n.scenes&&n.scene&&n.scenes[n.scene].name&&(this._sceneName=n.scenes[n.scene].name),[4,this.loadTextures(t).then((function(){return r.loadMaterials(t)})).then((function(){return r.loadBuffers(t)})).then((function(){return r.loadMeshes(t)})).then((function(e){return r.generateScenes(t,e)}))];case 2:return i.sent(),[2]}}))}))},e.prototype.uninitialize=function(){this._scenes=[],this._defaultScene=void 0,this._resourceManager.uninitialize()},Object.defineProperty(e.prototype,"pbrProgram",{get:function(){return this._pbrProgram},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scenes",{get:function(){return this._scenes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"defaultScene",{get:function(){return void 0!==this._defaultScene?this._defaultScene:void 0!==this._scenes&&this._scenes.length>0?this._scenes[0]:(f.log(f.LogLevel.Warning,"Default scene was requested, but none is available."),new m.SceneNode("EmptyScene"))},enumerable:!0,configurable:!0}),e}();t.GLTFLoader=b},function(e,t){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoadingManager=class{constructor(){this.urlModifier=void 0,this.onStart=void 0,this.onProgress=void 0,this.onLoad=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0}itemStart(e){this.itemsTotal++,!this.isLoading&&this.onStart&&this.onStart(e,this.itemsLoaded,this.itemsTotal),this.isLoading=!0}itemEnd(e){this.itemsLoaded++,this.onProgress&&this.onProgress(e,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,this.onLoad&&this.onLoad())}itemError(e){this.onError&&this.onError(e)}resolveURL(e){return this.urlModifier?this.urlModifier(e):e}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n((function(t){t(e.value)})).then(a,s)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),o=n(0);t.GLTF_COMPONENT_TYPE_ARRAYS={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},t.GLTF_ELEMENTS_PER_TYPE={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},t.GltfAsset=class{constructor(e,t,n,r=new o.LoadingManager){this.gltf=e,this.glbData=n,this.bufferData=new a(this,t,r),this.imageData=new s(this,t,r)}bufferViewData(e){return r(this,void 0,void 0,(function*(){if(!this.gltf.bufferViews)throw new Error("No buffer views found.");const t=this.gltf.bufferViews[e],n=yield this.bufferData.get(t.buffer),r=t.byteLength||0,i=t.byteOffset||0,o=n.buffer,a=n.byteOffset;return new Uint8Array(o,a+i,r)}))}accessorData(e){return r(this,void 0,void 0,(function*(){if(!this.gltf.accessors)throw new Error("No accessors views found.");const n=this.gltf.accessors[e],r=t.GLTF_ELEMENTS_PER_TYPE[n.type];let i;if(void 0!==n.bufferView)i=yield this.bufferViewData(n.bufferView);else{const e=t.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType].BYTES_PER_ELEMENT*r*n.count;i=new Uint8Array(e)}if(n.sparse){const{count:e,indices:o,values:a}=n.sparse;let s=t.GLTF_COMPONENT_TYPE_ARRAYS[o.componentType],u=yield this.bufferViewData(o.bufferView);const c=new s(u.buffer,u.byteOffset+(o.byteOffset||0),e);s=t.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType],u=yield this.bufferViewData(a.bufferView);const l=new s((yield this.bufferViewData(a.bufferView)).buffer,u.byteOffset+(a.byteOffset||0),e*r);n.bufferView&&(i=new Uint8Array(i));const f=new t.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType](i.buffer);for(let t=0;t<e;t++)for(let e=0;e<r;e++)f[r*c[t]+e]=l[r*t+e]}return i}))}preFetchAll(){return r(this,void 0,void 0,(function*(){return Promise.all([this.bufferData.preFetchAll(),this.imageData.preFetchAll()])}))}};class a{constructor(e,t,n){this.bufferCache=[],this.asset=e,this.baseUri=t,this.manager=n,this.loader=new i.FileLoader(n),this.loader.responseType="arraybuffer"}get(e){return r(this,void 0,void 0,(function*(){if(void 0!==this.bufferCache[e])return this.bufferCache[e];const t=this.asset.gltf;if(!t.buffers)throw new Error("No buffers found.");const n=t.buffers[e];if(void 0===n.uri){if(0!==e)throw new Error("GLB container is required to be the first buffer");if(void 0===this.asset.glbData)throw new Error("invalid gltf: buffer has no uri nor is there a GLB buffer");return this.asset.glbData.binaryChunk}const r=u(n.uri,this.baseUri),i=yield this.loader.load(r),o=new Uint8Array(i);return this.bufferCache[e]=o,o}))}preFetchAll(){return r(this,void 0,void 0,(function*(){const e=this.asset.gltf.buffers;return e?Promise.all(e.map((e,t)=>this.get(t))):[]}))}}t.BufferData=a;class s{constructor(e,t,n){this.crossOrigin="anonymous",this.imageCache=[],this.asset=e,this.baseUri=t,this.manager=n}get(e){return r(this,void 0,void 0,(function*(){if(void 0!==this.imageCache[e])return this.imageCache[e];const t=this.asset.gltf;if(!t.images)throw new Error("No images found.");const n=t.images[e];let r,i=!1;if(void 0!==n.bufferView){const e=yield this.asset.bufferViewData(n.bufferView);i=!0;const t=new Blob([e],{type:n.mimeType});r=URL.createObjectURL(t)}else{if(void 0===n.uri)throw new Error("Invalid glTF: image must either have a `uri` or a `bufferView`");r=this.manager.resolveURL(u(n.uri,this.baseUri))}const o=new Image;return o.crossOrigin=this.crossOrigin,new Promise((t,n)=>{o.onerror=()=>{n("Failed to load "+r),this.manager.itemEnd(r),this.manager.itemError(r)},o.onload=()=>{i&&URL.revokeObjectURL(r),this.imageCache[e]=o,t(o),this.manager.itemEnd(r)},o.src=r,this.manager.itemStart(r)})}))}preFetchAll(){return r(this,void 0,void 0,(function*(){const e=this.asset.gltf.images;return e?Promise.all(e.map((e,t)=>this.get(t))):[]}))}}function u(e,t){return"string"!=typeof e||""===e?"":/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e}t.ImageData=s,t.resolveURL=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoaderUtils=class{static decodeText(e){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);let t="";for(const n of e)t+=String.fromCharCode(n);return decodeURIComponent(escape(t))}static extractUrlBase(e){const t=e.split("/");return 1===t.length?"./":(t.pop(),t.join("/")+"/")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileLoader=class{constructor(e){this.runningRequests={},this.manager=e}load(e,t){if(void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e),this.runningRequests[e])return this.runningRequests[e];const n=new Promise((n,r)=>{const i=new XMLHttpRequest;i.open("GET",e,!0);const o=this;i.onload=function(t){const a=this.response;0===this.status?(console.warn("FileLoader: HTTP Status 0 received."),n(a),o.manager.itemEnd(e)):200===this.status?(n(a),o.manager.itemEnd(e)):(r({url:e,status:this.status,statusText:i.statusText}),o.manager.itemEnd(e),o.manager.itemError(e)),delete o.runningRequests[e]},i.onprogress=e=>{t&&t(e)},i.onerror=function(t){r({url:e,status:this.status,statusText:i.statusText}),o.manager.itemEnd(e),o.manager.itemError(e),delete o.runningRequests[e]},this.responseType&&(i.responseType=this.responseType),this.withCredentials&&(i.withCredentials=this.withCredentials),this.mimeType&&i.overrideMimeType&&i.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const e in this.requestHeaders)i.setRequestHeader(e,this.requestHeaders[e]);i.send(null),this.manager.itemStart(e)});return this.runningRequests[e]=n,n}setRequestHeader(e,t){return this.requestHeaders[e]=t,this}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.BINARY_HEADER_MAGIC="glTF";t.GLTFBinaryData=class{constructor(e){const n=new DataView(e,0,12),i=r.LoaderUtils.decodeText(new Uint8Array(e,0,4)),o=n.getUint32(4,!0);if(n.getUint32(8,!0),i!==t.BINARY_HEADER_MAGIC)throw new Error("Unsupported glTF-Binary header.");if(o<2)throw new Error("Unsupported legacy binary file detected.");const a=new DataView(e,12);let s=0;for(;s<a.byteLength;){const t=a.getUint32(s,!0);s+=4;const n=a.getUint32(s,!0);if(s+=4,1313821514===n){const n=new Uint8Array(e,12+s,t);this.json=r.LoaderUtils.decodeText(n)}else if(5130562===n){const n=12+s;this.binaryChunk=new Uint8Array(e,n,t)}s+=t}if(null===this.json)throw new Error("glTF-Binary: JSON content not found.")}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n((function(t){t(e.value)})).then(a,s)}u((r=r.apply(e,t||[])).next())}))};function i(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0});const o=n(3),a=n(5),s=n(1),u=n(2),c=n(0),l=n(4);t.gltf=l,i(n(1)),i(n(0)),t.GltfLoader=class{constructor(e){this.manager=e||new c.LoadingManager}load(e,t){return r(this,void 0,void 0,(function*(){const n=u.LoaderUtils.extractUrlBase(e),r=new o.FileLoader(this.manager);r.responseType="arraybuffer";const i=yield r.load(e,t);return yield this.parse(i,n)}))}loadFromFiles(e){return r(this,void 0,void 0,(function*(){let t,n;for(const[r,i]of e)i.name.match(/\.(gltf|glb)$/)&&(t=i,n=r.replace(i.name,""));if(!t)throw new Error("No .gltf or .glb asset found.");const r="string"==typeof t?t:URL.createObjectURL(t),i=u.LoaderUtils.extractUrlBase(r),o=[];this.manager.urlModifier=t=>{const r=n+t.replace(i,"").replace(/^(\.?\/)/,"");if(e.has(r)){const t=e.get(r),n=URL.createObjectURL(t);return o.push(n),n}return t};const a=yield this.load(r);return yield a.preFetchAll(),URL.revokeObjectURL(r),o.forEach(URL.revokeObjectURL),a}))}parse(e,t){return r(this,void 0,void 0,(function*(){let n,r=void 0;n="string"==typeof e?e:u.LoaderUtils.decodeText(new Uint8Array(e,0,4))===a.BINARY_HEADER_MAGIC?(r=new a.GLTFBinaryData(e)).json:u.LoaderUtils.decodeText(new Uint8Array(e));const i=JSON.parse(n);if(void 0===i.asset||i.asset.version[0]<2)throw new Error("Unsupported asset. glTF versions >=2.0 are supported.");return new s.GltfAsset(i,t,r,this.manager)}))}}},function(e,t,n){e.exports=n(6)}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(){}return e.modeToEnum=function(e,t){return(t<0||t>6)&&r.log(r.LogLevel.Error,"Specified draw mode is "+t+" but is required to be between 0 and 6"),0===t?e.POINTS:1===t?e.LINES:2===t?e.LINE_LOOP:3===t?e.LINE_STRIP:4===t?e.TRIANGLES:5===t?e.TRIANGLE_STRIP:6===t?e.TRIANGLE_FAN:e.TRIANGLES},e.nameToAttributeIndex=function(e){return"POSITION"===e?0:"NORMAL"===e?1:"TANGENT"===e?2:"TEXCOORD_0"===e?3:"TEXCOORD_1"===e?4:"TEXCOORD_2"===e?5:"JOINTS_0"===e?6:"WEIGHTS_0"===e?7:"COLOR_0"===e?8:(r.log(r.LogLevel.Warning,"Unknown attribute name '"+e+"' encountered.             Possibly this model uses an unsupported extension."),-1)},e.isPowerOfTwo=function(e){return 0==(e&e-1)},e.nextHighestPowerOfTwo=function(e){--e;for(var t=1;t<32;t<<=1)e|=e>>t;return e+1},e}();t.GLTFHelper=i},function(e,t){e.exports="precision highp float;\n\n// Adapted from https://github.com/KhronosGroup/glTF-WebGL-PBR\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else\n    #define varying out\n#endif\n\n\nconst int HAS_NORMALS           = 1;\nconst int HAS_TANGENTS          = 1 << 1;\nconst int HAS_UV                = 1 << 2;\nconst int HAS_COLORS            = 1 << 3;\n\n#if __VERSION__ == 100\n    attribute vec4 a_position;\n    attribute vec4 a_normal;\n    attribute vec4 a_tangent;\n    attribute vec2 a_texcoord_0;\n    attribute vec2 a_texcoord_1;\n    attribute vec2 a_texcoord_2;\n    attribute vec4 a_joints;\n    attribute vec4 a_weights;\n    attribute vec4 a_color;\n#else\n    layout (location = 0) in vec4 a_position;\n    layout (location = 1) in vec3 a_normal;\n    layout (location = 2) in vec4 a_tangent;\n    layout (location = 3) in vec2 a_texcoord_0;\n    layout (location = 4) in vec2 a_texcoord_1;\n    layout (location = 5) in vec2 a_texcoord_2;\n    layout (location = 6) in vec4 a_joints;\n    layout (location = 7) in vec4 a_weights;\n    layout (location = 8) in vec4 a_color;\n#endif\n\nuniform mat4 u_model;\nuniform mat4 u_viewProjection;\nuniform mat3 u_normalMatrix;\n\nuniform mediump int u_geometryFlags;\n\nvarying vec2 v_uv[3];\nvarying vec4 v_color;\nvarying vec3 v_position;\n\nvarying mat3 v_TBN;\nvarying vec3 v_normal;\n\nbool checkFlag(int flag) {\n    return (u_geometryFlags & flag) == flag;\n}\n\nvoid main(void)\n{\n    vec4 pos = u_model * a_position;\n    v_position = vec3(pos.xyz) / pos.w;\n\n    if (checkFlag(HAS_NORMALS)) {\n        if (checkFlag(HAS_TANGENTS)) {\n            vec3 normalW = normalize(vec3(u_normalMatrix * a_normal));\n            vec3 tangentW = normalize(vec3(u_model * vec4(a_tangent.xyz, 0.0)));\n            vec3 bitangentW = cross(normalW, tangentW) * a_tangent.w;\n            v_TBN = mat3(tangentW, bitangentW, normalW);\n        } else { // HAS_TANGENTS != 1\n            v_normal = normalize(vec3(u_model * vec4(a_normal.xyz, 0.0)));\n        }\n    }\n\n    if (checkFlag(HAS_UV)) {\n        v_uv[0] = a_texcoord_0;\n        v_uv[1] = a_texcoord_1;\n        v_uv[2] = a_texcoord_2;\n    } else {\n        v_uv[0] = vec2(0., 0.);\n        v_uv[1] = vec2(0., 0.);\n        v_uv[2] = vec2(0., 0.);\n    }\n\n    if (checkFlag(HAS_COLORS)) {\n        v_color = a_color;\n    } else {\n        v_color = vec4(1.0);\n    }\n\n    gl_Position = u_viewProjection * u_model * a_position;\n}\n"},function(e,t){e.exports="precision highp float;\n\n// Adapted from https://github.com/KhronosGroup/glTF-WebGL-PBR\n// References:\n// [1] Real Shading in Unreal Engine 4\n//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n// [2] Physically Based Shading at Disney\n//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\n// [3] README.md - Environment Maps\n//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps\n// [4] \"An Inexpensive BRDF Model for Physically based Rendering\" by Christophe Schlick\n//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n#else\n    layout(location = 0) out vec4 fragColor;\n#endif\n\nconst int HAS_NORMALS           = 1;\nconst int HAS_TANGENTS          = 1 << 1;\nconst int HAS_UV                = 1 << 2;\nconst int HAS_COLORS            = 1 << 3;\nconst int USE_IBL               = 1 << 4;\nconst int HAS_BASECOLORMAP      = 1 << 5;\nconst int HAS_NORMALMAP         = 1 << 6;\nconst int HAS_EMISSIVEMAP       = 1 << 7;\nconst int HAS_METALROUGHNESSMAP = 1 << 8;\nconst int HAS_OCCLUSIONMAP      = 1 << 9;\nconst int USE_TEX_LOD           = 1 << 10;\n\nconst vec3 u_LightDirection = vec3(0.2, 1.0, 0.2);\nconst vec3 u_LightColor = vec3(1, 1, 1);\n\nconst float M_PI = 3.141592653589793;\nconst float c_MinRoughness = 0.04;\n\nuniform sampler2D u_baseColor;\nuniform sampler2D u_metallicRoughness;\nuniform sampler2D u_normal;\nuniform sampler2D u_emissive;\nuniform sampler2D u_occlusion;\n\nuniform samplerCube u_specularEnvironment;\nuniform sampler2D u_brdfLUT;\n\nuniform int u_baseColorTexCoord;\nuniform int u_normalTexCoord;\nuniform int u_metallicRoughnessTexCoord;\nuniform int u_occlusionTexCoord;\nuniform int u_emissiveTexCoord;\n\nuniform vec4 u_baseColorFactor;\nuniform float u_metallicFactor;\nuniform float u_roughnessFactor;\nuniform vec3 u_emissiveFactor;\nuniform float u_normalScale;\n\nuniform mediump int u_geometryFlags;\nuniform mediump int u_pbrFlags;\nuniform vec3 u_eye;\n\nvarying vec2 v_uv[3];\nvarying vec4 v_color;\nvarying vec3 v_position;\n\nvarying mat3 v_TBN;\nvarying vec3 v_normal;\n\n// Encapsulate the various inputs used by the various functions in the shading equation\n// We store values in this struct to simplify the integration of alternative implementations\n// of the shading terms, outlined in the Readme.MD Appendix.\nstruct PBRInfo\n{\n    float NdotL;                  // cos angle between normal and light direction\n    float NdotV;                  // cos angle between normal and view direction\n    float NdotH;                  // cos angle between normal and half vector\n    float LdotH;                  // cos angle between light direction and half vector\n    float VdotH;                  // cos angle between view direction and half vector\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\n    float metalness;              // metallic value at the surface\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\n    vec3 reflectance90;           // reflectance color at grazing angle\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\n    vec3 diffuseColor;            // color contribution from diffuse lighting\n    vec3 specularColor;           // color contribution from specular lighting\n};\n\nbool checkGeometryFlag(int flag) {\n    return (u_geometryFlags & flag) == flag;\n}\n\nbool checkFlag(int flag) {\n    return (u_pbrFlags & flag) == flag;\n}\n\nvec4 SRGBtoLINEAR(vec4 srgbIn)\n{\n    #ifdef MANUAL_SRGB\n    #ifdef SRGB_FAST_APPROXIMATION\n    vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\n    #else //SRGB_FAST_APPROXIMATION\n    vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\n    vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\n    #endif //SRGB_FAST_APPROXIMATION\n    return vec4(linOut,srgbIn.w);;\n    #else //MANUAL_SRGB\n    return srgbIn;\n    #endif //MANUAL_SRGB\n}\n\n// Find the normal for this fragment, pulling either from a predefined normal map\n// or from the interpolated mesh normal and tangent attributes.\nvec3 getNormal()\n{\n    // Retrieve the tangent space matrix\n    mat3 tbn;\n    if (!checkGeometryFlag(HAS_TANGENTS)) {\n        vec3 pos_dx = dFdx(v_position);\n        vec3 pos_dy = dFdy(v_position);\n        vec3 tex_dx = dFdx(vec3(v_uv[0], 0.0));\n        vec3 tex_dy = dFdy(vec3(v_uv[0], 0.0));\n        vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\n        vec3 ng;\n        if (checkGeometryFlag(HAS_NORMALS))\n            ng = normalize(v_normal);\n        else\n            ng = cross(pos_dx, pos_dy);\n\n            t = normalize(t - ng * dot(ng, t));\n            vec3 b = normalize(cross(ng, t));\n            tbn = mat3(t, b, ng);\n        }\n    else { // HAS_TANGENTS\n        tbn = v_TBN;\n    }\n\n    vec3 n;\n    if (checkFlag(HAS_NORMALMAP)) {\n        n = texture(u_normal, v_uv[u_normalTexCoord]).rgb;\n        n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_normalScale, u_normalScale, 1.0)));\n    } else {\n        // The tbn matrix is linearly interpolated, so we need to re-normalize\n        n = normalize(tbn[2].xyz);\n    }\n\n    // reverse backface normals\n    n *= (2.0 * float(gl_FrontFacing) - 1.0);\n\n    return n;\n}\n\n// Basic Lambertian diffuse\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\n// See also [1], Equation 1\nvec3 diffuse(PBRInfo pbrInputs)\n{\n    return pbrInputs.diffuseColor / M_PI;\n}\n\n // The following equation models the Fresnel reflectance term of the spec equation (aka F())\n// Implementation of fresnel from [4], Equation 15\nvec3 specularReflection(PBRInfo pbrInputs)\n{\n    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\n}\n\n // This calculates the specular geometric attenuation (aka G()),\n// where rougher material will reflect less light back to the viewer.\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\n// alphaRoughness as input as originally proposed in [2].\nfloat geometricOcclusion(PBRInfo pbrInputs)\n{\n    float NdotL = pbrInputs.NdotL;\n    float NdotV = pbrInputs.NdotV;\n    float r = pbrInputs.alphaRoughness;\n\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\n    return attenuationL * attenuationV;\n}\n\n // The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\n// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\nfloat microfacetDistribution(PBRInfo pbrInputs)\n{\n    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\n    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\n    return roughnessSq / (M_PI * f * f);\n}\n\nvec3 getIBLContribution(vec3 n, vec3 v, PBRInfo pbrInfo)\n{\n    float NdotV = clamp(dot(n, v), 0.0, 1.0);\n\n    // TODO: pass uniform for mip count\n    const float MIP_COUNT = 8.0;\n    float lod = clamp(pbrInfo.perceptualRoughness * MIP_COUNT, 0.0, MIP_COUNT);\n    vec3 reflection = normalize(reflect(-v, n));\n\n    vec2 brdfSamplePoint = vec2(NdotV, pbrInfo.perceptualRoughness);\n    vec2 brdf = texture(u_brdfLUT, brdfSamplePoint).rg;\n\n    // vec4 diffuseSample = textureCube(u_DiffuseEnvSampler, n);\n    vec4 specularSample = textureLod(u_specularEnvironment, reflection, lod);\n\n    // vec3 diffuseLight = SRGBtoLINEAR(diffuseSample).rgb;\n    vec3 specularLight = SRGBtoLINEAR(specularSample).rgb;\n\n    // vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;\n    vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);\n\n    return specular;\n    // return diffuse + specular;\n}\n\nvoid main(void)\n{\n    float perceptualRoughness = u_roughnessFactor;\n    float metallic = u_metallicFactor;\n    if (checkFlag(HAS_METALROUGHNESSMAP)) {\n        // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\n        // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\n        vec4 mrSample = texture(u_metallicRoughness, v_uv[u_metallicRoughnessTexCoord]);\n        perceptualRoughness = mrSample.g * perceptualRoughness;\n        metallic = mrSample.b * metallic;\n    }\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\n    metallic = clamp(metallic, 0.0, 1.0);\n    // Roughness is authored as perceptual roughness; as is convention,\n    // convert to material roughness by squaring the perceptual roughness [2].\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\n\n     // The albedo may be defined from a base texture or a flat color\n    vec4 baseColor;\n    if (checkFlag(HAS_BASECOLORMAP)) {\n        baseColor = SRGBtoLINEAR(texture(u_baseColor, v_uv[u_baseColorTexCoord])) * u_baseColorFactor;\n    } else {\n        baseColor = u_baseColorFactor;\n    }\n\n    // spec: COLOR_0 ... acts as an additional linear multiplier to baseColor\n    // TODO!: distinguish vec3/vec4 colors...\n    baseColor *= vec4(v_color.rgb, 1.0);\n\n    vec3 f0 = vec3(0.04);\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\n    diffuseColor *= 1.0 - metallic;\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\n\n    // Compute reflectance.\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\n    vec3 specularEnvironmentR0 = specularColor.rgb;\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\n\n    vec3 n = getNormal();                         // normal at surface point\n    vec3 v = normalize(u_eye - v_position);        // Vector from surface point to camera\n    vec3 l = normalize(u_LightDirection);          // Vector from surface point to light\n    vec3 h = normalize(l+v);                       // Half vector between both l and v\n    vec3 reflection = -normalize(reflect(v, n));\n\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\n    float NdotV = abs(dot(n, v)) + 0.001;\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\n\n    PBRInfo pbrInputs = PBRInfo(\n        NdotL,\n        NdotV,\n        NdotH,\n        LdotH,\n        VdotH,\n        perceptualRoughness,\n        metallic,\n        specularEnvironmentR0,\n        specularEnvironmentR90,\n        alphaRoughness,\n        diffuseColor,\n        specularColor\n    );\n\n     // Calculate the shading terms for the microfacet specular shading model\n    vec3 F = specularReflection(pbrInputs);\n    float G = geometricOcclusion(pbrInputs);\n    float D = microfacetDistribution(pbrInputs);\n\n     // Calculation of analytical lighting contribution\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\n    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);\n    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\n    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);\n\n    vec3 environmentLight = getIBLContribution(n, v, pbrInputs);\n    color += environmentLight;\n\n    if (checkFlag(HAS_EMISSIVEMAP)) {\n        vec3 emissive = SRGBtoLINEAR(texture(u_emissive, v_uv[u_emissiveTexCoord])).rgb * u_emissiveFactor;\n        color += emissive;\n    }\n\n    // NOTE: the spec mandates to ignore any alpha value in 'OPAQUE' mode\n    float alpha = 1.0;\n    // float alpha = mix(1.0, baseColor.a, u_AlphaBlend);\n    // if (u_AlphaCutoff > 0.0) {\n    //     alpha = step(u_AlphaCutoff, baseColor.a);\n    // }\n    fragColor = vec4(pow(color, vec3(1.0/2.2)), alpha);\n}\n"},function(e,t,n){"use strict";var r,i=n(1),o=n(3),a=n(0);!function(e){function t(e,t,n){void 0===n&&(n=1);var r=i.vec2.subtract(o.v2(),t,e);if(!i.vec2.equals(r,i.vec2.fromValues(0,0))){var a=i.vec2.squaredLength(r),s=2*i.vec2.dot(r,e),u=s*s-4*a*(i.vec2.squaredLength(e)-n*n);if(!(u<0)){var c=Math.sqrt(u),l=Math.min((-s+c)/(2*a),(-s-c)/(2*a)),f=i.vec2.scale(o.v2(),r,l);return i.vec2.add(f,f,e)}}}function n(e,t,n,r){var a=e,s=i.vec2.sub(o.v2(),t,e),u=n,c=i.vec2.sub(o.v2(),r,n),l=i.vec2.cross(o.v3(),s,c)[2];if(0!==l){var f=i.vec2.sub(o.v2(),u,a),h=i.vec2.cross(o.v3(),f,i.vec2.scale(o.v2(),s,1/l))[2],d=i.vec2.cross(o.v3(),f,i.vec2.scale(o.v2(),c,1/l))[2];if(!(h<0||h>1||d<0))return[i.vec2.add(o.v2(),u,i.vec2.scale(o.v2(),c,h)),d]}}function r(e,t,n,r){void 0===n&&(n=[0,0,0]),void 0===r&&(r=[0,1,0]);var a=i.vec3.normalize(o.v3(),i.vec3.subtract(o.v3(),t,e)),s=i.vec3.dot(a,r);if(!(i.vec3.equals(a,[0,0,0])||s>=0)){var u=i.vec3.dot(i.vec3.subtract(o.v3(),n,e),r)/s;return i.vec3.add(o.v3(),i.vec3.scale(o.v3(),a,u),e)}}function s(e,t,n){var r=i.vec3.subtract(o.v3(),t,e),a=i.vec3.squaredLength(r);if(0===a)return 0;var s=i.vec3.subtract(o.v3(),n,e);return i.vec3.dot(s,r)/a}e.rayCircleIntersection=t,e.pointSquareIntersection=function(e,t){void 0===t&&(t=1);var n=o.abs2(o.v2(),e);return n[0]>=n[1]?i.vec2.fromValues(o.sign(e[0])*t,e[1]/n[0]*t):i.vec2.fromValues(e[0]/n[1]*t,o.sign(e[1])*t)},e.raySquareIntersection=function(e,t,r){void 0===r&&(r=1);for(var o=[i.vec2.fromValues(-r,+r),i.vec2.fromValues(-r,-r),i.vec2.fromValues(+r,-r),i.vec2.fromValues(+r,+r)],a=new Array,s=0;s<4;++s){var u=n(e,t,o[s],o[(s+1)%4]);u&&a.push(u[1])}return a},e.rayLineIntersection=n,e.rayPlaneIntersection=r,e.raySphereIntersection=function(e,t,n,r){void 0===n&&(n=i.vec3.fromValues(0,0,0)),void 0===r&&(r=1);var a=i.vec3.subtract(o.v3(),e,n),s=i.vec3.normalize(o.v3(),i.vec3.subtract(o.v3(),t,e)),u=i.vec3.dot(s,a),c=u*u-i.vec3.squaredLength(a)+r*r;if(!(c<=0))return i.vec3.add(o.v3(),e,i.vec3.scale(o.v3(),s,-u-Math.sqrt(c)))},e.rayPlaneIntersection_tube=function(e,n,o){void 0===o&&(o=1);var a=r(e,n);if(void 0!==a&&i.vec3.length(a)<o)return a;var s=t(i.vec2.fromValues(e[0],e[2]),i.vec2.fromValues(n[0],n[2]),o);return s?i.vec3.fromValues(s[0],0,s[1]):void 0},e.isPointWithinSquare=function(e,t){void 0===t&&(t=1);var n=o.abs2(o.v2(),e);return n[0]<=t&&n[1]<=t},e.isPointWithinNDC=function(e,t){var n=i.vec3.transformMat4(o.v3(),t,e),r=o.abs3(o.v3(),n);return r[0]<=1&&r[1]<=1&&n[2]>=0&&n[2]<=1},e.distancePointToRay=s,e.eyeWithPointInView=function(e,t){var n=i.vec3.subtract(o.v3(),e.center,e.eye),r=i.vec3.normalize(o.v3(),n),u=i.vec3.normalize(o.v3(),i.vec3.cross(o.v3(),r,e.up)),c=i.vec3.normalize(o.v3(),i.vec3.cross(o.v3(),u,r)),l=s(e.eye,e.center,t),f=i.vec3.add(o.v3(),e.eye,i.vec3.scale(o.v3(),n,l)),h=i.vec3.subtract(o.v3(),t,f),d=Math.abs(i.vec3.dot(h,u))/e.aspect,p=Math.abs(i.vec3.dot(h,c)),_=Math.max(d,p)/Math.tan(e.fovy*a.DEG2RAD*.5);return i.vec3.subtract(o.v3(),f,i.vec3.scale(o.v3(),r,_))}}(r||(r={})),e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(66),i=n(129);!function(e){e.TestRenderer=i.TestRenderer,e.TestNavigation=r.TestNavigation}(t.debug||(t.debug={}))},function(e,t,n){"use strict";var r,i,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=n(0),s=n(50),u=n(48),c=n(51),l=n(41),f=n(14),h=n(16),d=n(8),p=n(21),_=n(43),m=n(9),v=n(4),g=n(66);!function(e){var t=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._extensions=!1,t}return o(t,e),t.prototype.onInitialize=function(e,t,r){var i=this,o=this._context.gl,_=this._context.gl2facade;!1===this._extensions&&this._context.isWebGL1&&(a.assert(this._context.supportsStandardDerivatives,"expected OES_standard_derivatives support"),this._context.standardDerivatives,this._extensions=!0);var b=new m.Shader(this._context,o.VERTEX_SHADER,"testrenderer.vert");b.initialize(n(130));var y=new m.Shader(this._context,o.FRAGMENT_SHADER,"testrenderer.frag");y.initialize(n(131)),this._program=new d.Program(this._context),this._program.initialize([b,y]),this._uNdcOffset=this._program.uniform("u_ndcOffset"),this._uFrameNumber=this._program.uniform("u_frameNumber"),this._ndcTriangle=new h.NdcFillingTriangle(this._context);var x=this._program.attribute("a_vertex",0);return this._ndcTriangle.initialize(x),this._ndcOffsetKernel=new u.AntiAliasingKernel(this._multiFrameNumber),this._defaultFBO=new l.DefaultFramebuffer(this._context,"DefaultFBO"),this._defaultFBO.initialize(),this._colorRenderTexture=new v.Texture2D(this._context,"ColorRenderTexture"),this._depthRenderbuffer=new p.Renderbuffer(this._context,"DepthRenderbuffer"),this._intermediateFBO=new f.Framebuffer(this._context,"IntermediateFBO"),this._accumulate=new s.AccumulatePass(this._context),this._accumulate.initialize(this._ndcTriangle),this._accumulate.precision=this._framePrecision,this._accumulate.texture=this._colorRenderTexture,this._blit=new c.BlitPass(this._context),this._blit.initialize(this._ndcTriangle),this._blit.readBuffer=_.COLOR_ATTACHMENT0,this._blit.drawBuffer=o.BACK,this._blit.target=this._defaultFBO,this._testNavigation=new g.TestNavigation((function(){return i.invalidate()}),r),!0},t.prototype.onUninitialize=function(){e.prototype.uninitialize.call(this),this._uNdcOffset=-1,this._uFrameNumber=-1,this._program.uninitialize(),this._ndcTriangle.uninitialize(),this._intermediateFBO.uninitialize(),this._defaultFBO.uninitialize(),this._colorRenderTexture.uninitialize(),this._depthRenderbuffer.uninitialize(),this._blit.uninitialize(),this._accumulate.uninitialize()},t.prototype.onUpdate=function(){this._testNavigation.update();var e=this._testNavigation.altered;return this._testNavigation.reset(),!(!e&&!this._altered.any)&&e},t.prototype.onPrepare=function(){var e=this._context.gl,t=this._context.gl2facade;this._intermediateFBO.initialized?this._altered.frameSize&&this._intermediateFBO.resize(this._frameSize[0],this._frameSize[1]):(this._colorRenderTexture.initialize(this._frameSize[0],this._frameSize[1],this._context.isWebGL2?e.RGBA8:e.RGBA,e.RGBA,e.UNSIGNED_BYTE),this._depthRenderbuffer.initialize(this._frameSize[0],this._frameSize[1],e.DEPTH_COMPONENT16),this._intermediateFBO.initialize([[t.COLOR_ATTACHMENT0,this._colorRenderTexture],[e.DEPTH_ATTACHMENT,this._depthRenderbuffer]])),this._altered.multiFrameNumber&&(this._ndcOffsetKernel.width=this._multiFrameNumber),this._altered.framePrecision&&(this._accumulate.precision=this._framePrecision),this._altered.clearColor&&this._intermediateFBO.clearColor(this._clearColor),this._accumulate.update(),this._altered.reset()},t.prototype.onFrame=function(e){var t=this._context.gl;t.viewport(0,0,this._frameSize[0],this._frameSize[1]),this._program.bind();var n=this._ndcOffsetKernel.get(e);n[0]=2*n[0]/this._frameSize[0],n[1]=2*n[1]/this._frameSize[1],t.uniform2fv(this._uNdcOffset,n),t.uniform1i(this._uFrameNumber,e),this._intermediateFBO.clear(t.COLOR_BUFFER_BIT,!0,!1),this._ndcTriangle.bind(),this._ndcTriangle.draw(),this._intermediateFBO.unbind(),this._accumulate.frame(e)},t.prototype.onSwap=function(){this._blit.framebuffer=this._accumulate.framebuffer?this._accumulate.framebuffer:this._blit.framebuffer=this._intermediateFBO,this._blit.frame()},t}(_.Renderer);e.TestRenderer=t}(i||(i={})),e.exports=i},function(e,t){e.exports="\nprecision lowp float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else\n    #define varying out\n#endif\n\n\nvoid ndcOffset(inout vec4 vertex, in vec2 offset) {\n    vertex.xy = offset * vec2(vertex.w) + vertex.xy;\n}\n\n\n\n#if __VERSION__ == 100\n    attribute vec2 a_vertex;\n#else \n    layout(location = 0) in vec2 a_vertex;\n#endif\n\nuniform vec2 u_ndcOffset;\n\nvarying vec2 v_uv;\n\n\nvoid main(void)\n{\n    v_uv = a_vertex.xy * 0.5 + 0.5;\n\n    vec4 vertex = vec4(a_vertex, 0.0, 1.0);\n    ndcOffset(vertex, u_ndcOffset);\n\n    gl_Position = vertex;\n}\n"},function(e,t){e.exports="\nprecision lowp float;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n    #extension GL_OES_standard_derivatives : enable\n#else \n    layout(location = 0) out vec4 fragColor;\n#endif\n\nuniform int u_frameNumber;\n\nvarying vec2 v_uv;\n\n\nvoid main(void)\n{\n    vec3 color = vec3(28.0 / 255.0, 117.0 / 255.0, 188.0 / 255.0);\n    color += (vec3(0.0, v_uv) - 0.5) * 0.125;\n\n    vec2 awidth = fwidth(v_uv) * (sin(float(u_frameNumber) * 0.1) * 7.0 + 8.0);\n    vec2 cstep = abs(step(awidth, v_uv) - step(awidth, 1.0 - v_uv));\n    if(!any(bvec2(cstep))) {\n        discard;\n    }\n    fragColor = vec4(color, 1.0); \n}\n"},function(e,t,n){"use strict";var r;!function(e){var t=function(){function e(e,t){if(this._blockListenerByEvent=new Map,this._element=e,void 0!==t)for(var n=0,r=t;n<r.length;n++){var i=r[n];this.block(i)}}return e.prototype.block=function(e){this._blockListenerByEvent.has(e)||(this._blockListenerByEvent.set(e,(function(e){return e.preventDefault(),e.stopPropagation(),!1})),this._element.addEventListener(e,this._blockListenerByEvent.get(e)))},e.prototype.unblock=function(e){this._blockListenerByEvent.has(e)&&(this._element.removeEventListener(e,this._blockListenerByEvent.get(e)),this._blockListenerByEvent.delete(e))},e}();e.EventBlocker=t}(r||(r={})),e.exports=r},function(e,t,n){"use strict";var r,i=n(0);!function(e){var t=function(){function e(){}return e.queryAndCacheAPI=function(){if(void 0===e._exit){for(var t=window.document,n=[t.exitFullScreen,t.msExitFullscreen,t.mozCancelFullScreen,t.webkitExitFullscreen,void 0],r=0;r<n.length&&void 0===n[r];++r);switch(r){case 0:e._exit=function(){return t.exitFullScreen()},e._request=function(e){return e.requestFullscreen()},e._element=function(){return t.fullscreenElement},e._event="fullscreenchange";break;case 1:e._exit=function(){return t.msExitFullscreen()},e._request=function(e){return e.msRequestFullscreen()},e._element=function(){return t.msFullscreenElement},e._event="msfullscreenchange";break;case 2:e._exit=function(){return t.mozCancelFullScreen()},e._request=function(e){return e.mozRequestFullScreen()},e._element=function(){return t.mozFullScreenElement},e._event="mozfullscreenchange";break;case 3:e._exit=function(){return t.webkitExitFullscreen()},e._request=function(e){return e.webkitRequestFullscreen()},e._element=function(){return t.webkitFullscreenElement},e._event="webkitfullscreenchange";break;default:i.assert(!1,"none of the following fullscreen apis was found: native, ms, moz, or webkit")}}},e.active=function(){return void 0!==e._element()&&null!==e._element()},e.toggle=function(t,n){if(void 0!==t){e.queryAndCacheAPI();var r=e.active();if(!r){var i=getComputedStyle(t);e._size[0]=i.width,e._size[1]=i.height}n&&n(),r?(e._callback=void 0,window.removeEventListener(e._event,e.removeEventListener),t.style.width=e._size[0],t.style.height=e._size[1]):(e._callback=n,window.addEventListener(e._event,e.addEventListener)),r?e._exit():e._request(t)}},e._size=["0","0"],e.addEventListener=function(){window.removeEventListener(e._event,e.addEventListener),window.addEventListener(e._event,e.removeEventListener)},e.removeEventListener=function(){e._callback&&(e._callback(),e._callback=void 0),window.removeEventListener(e._event,e.removeEventListener)},e}();e.Fullscreen=t}(r||(r={})),e.exports=r}])},function(e,t,n){"use strict";n.r(t),n.d(t,"Observable",(function(){return T})),n.d(t,"ConnectableObservable",(function(){return F})),n.d(t,"GroupedObservable",(function(){return C})),n.d(t,"observable",(function(){return b})),n.d(t,"Subject",(function(){return R})),n.d(t,"BehaviorSubject",(function(){return j})),n.d(t,"ReplaySubject",(function(){return ne})),n.d(t,"AsyncSubject",(function(){return ie})),n.d(t,"asap",(function(){return de})),n.d(t,"asapScheduler",(function(){return he})),n.d(t,"async",(function(){return _e})),n.d(t,"asyncScheduler",(function(){return pe})),n.d(t,"queue",(function(){return G})),n.d(t,"queueScheduler",(function(){return k})),n.d(t,"animationFrame",(function(){return ge})),n.d(t,"animationFrameScheduler",(function(){return ve})),n.d(t,"VirtualTimeScheduler",(function(){return be})),n.d(t,"VirtualAction",(function(){return ye})),n.d(t,"Scheduler",(function(){return U})),n.d(t,"Subscription",(function(){return d})),n.d(t,"Subscriber",(function(){return m})),n.d(t,"Notification",(function(){return J})),n.d(t,"NotificationKind",(function(){return W})),n.d(t,"pipe",(function(){return x})),n.d(t,"noop",(function(){return xe})),n.d(t,"identity",(function(){return y})),n.d(t,"isObservable",(function(){return Ee})),n.d(t,"ArgumentOutOfRangeError",(function(){return Te})),n.d(t,"EmptyError",(function(){return we})),n.d(t,"ObjectUnsubscribedError",(function(){return A})),n.d(t,"UnsubscriptionError",(function(){return h})),n.d(t,"TimeoutError",(function(){return Ae})),n.d(t,"bindCallback",(function(){return Se})),n.d(t,"bindNodeCallback",(function(){return Fe})),n.d(t,"combineLatest",(function(){return He})),n.d(t,"concat",(function(){return it})),n.d(t,"defer",(function(){return ot})),n.d(t,"empty",(function(){return V})),n.d(t,"forkJoin",(function(){return at})),n.d(t,"from",(function(){return Ke})),n.d(t,"fromEvent",(function(){return ut})),n.d(t,"fromEventPattern",(function(){return ct})),n.d(t,"generate",(function(){return lt})),n.d(t,"iif",(function(){return ht})),n.d(t,"interval",(function(){return pt})),n.d(t,"merge",(function(){return mt})),n.d(t,"never",(function(){return gt})),n.d(t,"of",(function(){return $})),n.d(t,"onErrorResumeNext",(function(){return bt})),n.d(t,"pairs",(function(){return yt})),n.d(t,"partition",(function(){return Mt})),n.d(t,"race",(function(){return Ot})),n.d(t,"range",(function(){return Pt})),n.d(t,"throwError",(function(){return Z})),n.d(t,"timer",(function(){return Ft})),n.d(t,"using",(function(){return Ct})),n.d(t,"zip",(function(){return Nt})),n.d(t,"scheduled",(function(){return Ye})),n.d(t,"EMPTY",(function(){return q})),n.d(t,"NEVER",(function(){return vt})),n.d(t,"config",(function(){return s}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function o(e){return"function"==typeof e}var a=!1,s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack;a=e},get useDeprecatedSynchronousErrorHandling(){return a}};function u(e){setTimeout((function(){throw e}),0)}var c={closed:!0,next:function(e){},error:function(e){if(s.useDeprecatedSynchronousErrorHandling)throw e;u(e)},complete:function(){}},l=function(){return Array.isArray||function(e){return e&&"number"==typeof e.length}}();function f(e){return null!==e&&"object"==typeof e}var h=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),d=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}return e.prototype.unsubscribe=function(){var t;if(!this.closed){var n=this._parentOrParents,r=this._ctorUnsubscribe,i=this._unsubscribe,a=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof e)n.remove(this);else if(null!==n)for(var s=0;s<n.length;++s){n[s].remove(this)}if(o(i)){r&&(this._unsubscribe=void 0);try{i.call(this)}catch(e){t=e instanceof h?p(e.errors):[e]}}if(l(a)){s=-1;for(var u=a.length;++s<u;){var c=a[s];if(f(c))try{c.unsubscribe()}catch(e){t=t||[],e instanceof h?t=t.concat(p(e.errors)):t.push(e)}}}if(t)throw new h(t)}},e.prototype.add=function(t){var n=t;if(!t)return e.EMPTY;switch(typeof t){case"function":n=new e(t);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof e)){var r=n;(n=new e)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof e){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}();function p(e){return e.reduce((function(e,t){return e.concat(t instanceof h?t.errors:t)}),[])}var _=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),m=function(e){function t(n,r,i){var o=e.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=c;break;case 1:if(!n){o.destination=c;break}if("object"==typeof n){n instanceof t?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new v(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new v(o,n,r,i)}return o}return i(t,e),t.prototype[_]=function(){return this},t.create=function(e,n,r){var i=new t(e,n,r);return i.syncErrorThrowable=!1,i},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},t}(d),v=function(e){function t(t,n,r,i){var a,s=e.call(this)||this;s._parentSubscriber=t;var u=s;return o(n)?a=n:n&&(a=n.next,r=n.error,i=n.complete,n!==c&&(o((u=Object.create(n)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=a,s._error=r,s._complete=i,s}return i(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;s.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,n=s.useDeprecatedSynchronousErrorHandling;if(this._error)n&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)n?(t.syncErrorValue=e,t.syncErrorThrown=!0):u(e),this.unsubscribe();else{if(this.unsubscribe(),n)throw e;u(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};s.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw e;u(e)}},t.prototype.__tryOrSetError=function(e,t,n){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,n)}catch(t){return s.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(u(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(m);function g(e){for(;e;){var t=e,n=t.closed,r=t.destination,i=t.isStopped;if(n||i)return!1;e=r&&r instanceof m?r:null}return!0}var b=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function y(e){return e}function x(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return E(e)}function E(e){return 0===e.length?y:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var T=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r=this.operator,i=function(e,t,n){if(e){if(e instanceof m)return e;if(e[_])return e[_]()}return e||t||n?new m(e,t,n):new m(c)}(e,t,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||s.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),s.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){s.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),g(e)?e.error(t):console.warn(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=w(t))((function(t,r){var i;i=n.subscribe((function(t){try{e(t)}catch(e){r(e),i&&i.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[b]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:E(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=w(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function w(e){if(e||(e=s.Promise||Promise),!e)throw new Error("no Promise impl found");return e}var A=function(){function e(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return e.prototype=Object.create(Error.prototype),e}(),M=function(e){function t(t,n){var r=e.call(this)||this;return r.subject=t,r.subscriber=n,r.closed=!1,r}return i(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var n=t.indexOf(this.subscriber);-1!==n&&t.splice(n,1)}}},t}(d),O=function(e){function t(t){var n=e.call(this,t)||this;return n.destination=t,n}return i(t,e),t}(m),R=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return i(t,e),t.prototype[_]=function(){return new O(this)},t.prototype.lift=function(e){var t=new S(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new A;if(!this.isStopped)for(var t=this.observers,n=t.length,r=t.slice(),i=0;i<n;i++)r[i].next(e)},t.prototype.error=function(e){if(this.closed)throw new A;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),i=0;i<n;i++)r[i].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new A;this.isStopped=!0;for(var e=this.observers,t=e.length,n=e.slice(),r=0;r<t;r++)n[r].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new A;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new A;return this.hasError?(e.error(this.thrownError),d.EMPTY):this.isStopped?(e.complete(),d.EMPTY):(this.observers.push(e),new M(this,e))},t.prototype.asObservable=function(){var e=new T;return e.source=this,e},t.create=function(e,t){return new S(e,t)},t}(T),S=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return i(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):d.EMPTY},t}(R);var P=function(){function e(e){this.connectable=e}return e.prototype.call=function(e,t){var n=this.connectable;n._refCount++;var r=new L(e,n),i=t.subscribe(r);return r.closed||(r.connection=n.connect()),i},e}(),L=function(e){function t(t,n){var r=e.call(this,t)||this;return r.connectable=n,r}return i(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else{var n=this.connection,r=e._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},t}(m),F=function(e){function t(t,n){var r=e.call(this)||this;return r.source=t,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return i(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype.connect=function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new d).add(this.source.subscribe(new I(this.getSubject(),this))),e.closed&&(this._connection=null,e=d.EMPTY)),e},t.prototype.refCount=function(){return(e=this).lift(new P(e));var e},t}(T),I=function(e){function t(t,n){var r=e.call(this,t)||this;return r.connectable=n,r}return i(t,e),t.prototype._error=function(t){this._unsubscribe(),e.prototype._error.call(this,t)},t.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),e.prototype._complete.call(this)},t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe()}},t}(O);var C=function(e){function t(t,n,r){var i=e.call(this)||this;return i.key=t,i.groupSubject=n,i.refCountSubscription=r,i}return i(t,e),t.prototype._subscribe=function(e){var t=new d,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&t.add(new N(n)),t.add(r.subscribe(e)),t},t}(T),N=function(e){function t(t){var n=e.call(this)||this;return n.parent=t,t.count++,n}return i(t,e),t.prototype.unsubscribe=function(){var t=this.parent;t.closed||this.closed||(e.prototype.unsubscribe.call(this),t.count-=1,0===t.count&&t.attemptedToUnsubscribe&&t.unsubscribe())},t}(d),j=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return i(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return n&&!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new A;return this._value},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(R),D=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return i(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return t;clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n=!1,r=void 0;try{this.work(e)}catch(e){n=!0,r=!!e&&e||new Error(e)}if(n)return this.unsubscribe(),r},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,n=t.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},t}(function(e){function t(t,n){return e.call(this)||this}return i(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(d)),B=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r}return i(t,e),t.prototype.schedule=function(t,n){return void 0===n&&(n=0),n>0?e.prototype.schedule.call(this,t,n):(this.delay=n,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,n){return n>0||this.closed?e.prototype.execute.call(this,t,n):this._execute(t,n)},t.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?e.prototype.requestAsyncId.call(this,t,n,r):t.flush(this)},t}(D),U=function(){function e(t,n){void 0===n&&(n=e.now),this.SchedulerAction=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(n,t)},e.now=function(){return Date.now()},e}(),z=function(e){function t(n,r){void 0===r&&(r=U.now);var i=e.call(this,n,(function(){return t.delegate&&t.delegate!==i?t.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(t,e),t.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),t.delegate&&t.delegate!==this?t.delegate.schedule(n,r,i):e.prototype.schedule.call(this,n,r,i)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var n;this.active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(U),k=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(z))(B),G=k,q=new T((function(e){return e.complete()}));function V(e){return e?function(e){return new T((function(t){return e.schedule((function(){return t.complete()}))}))}(e):q}function H(e){return e&&"function"==typeof e.schedule}var W,X=function(e){return function(t){for(var n=0,r=e.length;n<r&&!t.closed;n++)t.next(e[n]);t.complete()}};function Y(e,t){return new T((function(n){var r=new d,i=0;return r.add(t.schedule((function(){i!==e.length?(n.next(e[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function K(e,t){return t?Y(e,t):new T(X(e))}function $(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[e.length-1];return H(n)?(e.pop(),Y(e,n)):K(e)}function Z(e,t){return new T(t?function(n){return t.schedule(Q,0,{error:e,subscriber:n})}:function(t){return t.error(e)})}function Q(e){var t=e.error;e.subscriber.error(t)}W||(W={});var J=function(){function e(e,t,n){this.kind=e,this.value=t,this.error=n,this.hasValue="N"===e}return e.prototype.observe=function(e){switch(this.kind){case"N":return e.next&&e.next(this.value);case"E":return e.error&&e.error(this.error);case"C":return e.complete&&e.complete()}},e.prototype.do=function(e,t,n){switch(this.kind){case"N":return e&&e(this.value);case"E":return t&&t(this.error);case"C":return n&&n()}},e.prototype.accept=function(e,t,n){return e&&"function"==typeof e.next?this.observe(e):this.do(e,t,n)},e.prototype.toObservable=function(){switch(this.kind){case"N":return $(this.value);case"E":return Z(this.error);case"C":return V()}throw new Error("unexpected notification kind value")},e.createNext=function(t){return void 0!==t?new e("N",t):e.undefinedValueNotification},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e.undefinedValueNotification=new e("N",void 0),e}();var ee=function(e){function t(t,n,r){void 0===r&&(r=0);var i=e.call(this,t)||this;return i.scheduler=n,i.delay=r,i}return i(t,e),t.dispatch=function(e){var t=e.notification,n=e.destination;t.observe(n),this.unsubscribe()},t.prototype.scheduleMessage=function(e){this.destination.add(this.scheduler.schedule(t.dispatch,this.delay,new te(e,this.destination)))},t.prototype._next=function(e){this.scheduleMessage(J.createNext(e))},t.prototype._error=function(e){this.scheduleMessage(J.createError(e)),this.unsubscribe()},t.prototype._complete=function(){this.scheduleMessage(J.createComplete()),this.unsubscribe()},t}(m),te=function(){return function(e,t){this.notification=e,this.destination=t}}(),ne=function(e){function t(t,n,r){void 0===t&&(t=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=e.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=t<1?1:t,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(t,e),t.prototype.nextInfiniteTimeWindow=function(t){if(!this.isStopped){var n=this._events;n.push(t),n.length>this._bufferSize&&n.shift()}e.prototype.next.call(this,t)},t.prototype.nextTimeWindow=function(t){this.isStopped||(this._events.push(new re(this._getNow(),t)),this._trimBufferThenGetEvents()),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){var t,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new A;if(this.isStopped||this.hasError?t=d.EMPTY:(this.observers.push(e),t=new M(this,e)),i&&e.add(e=new ee(e,i)),n)for(var a=0;a<o&&!e.closed;a++)e.next(r[a]);else for(a=0;a<o&&!e.closed;a++)e.next(r[a].value);return this.hasError?e.error(this.thrownError):this.isStopped&&e.complete(),t},t.prototype._getNow=function(){return(this.scheduler||G).now()},t.prototype._trimBufferThenGetEvents=function(){for(var e=this._getNow(),t=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(e-r[o].time<n);)o++;return i>t&&(o=Math.max(o,i-t)),o>0&&r.splice(0,o),r},t}(R),re=function(){return function(e,t){this.time=e,this.value=t}}(),ie=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.value=null,t.hasNext=!1,t.hasCompleted=!1,t}return i(t,e),t.prototype._subscribe=function(t){return this.hasError?(t.error(this.thrownError),d.EMPTY):this.hasCompleted&&this.hasNext?(t.next(this.value),t.complete(),d.EMPTY):e.prototype._subscribe.call(this,t)},t.prototype.next=function(e){this.hasCompleted||(this.value=e,this.hasNext=!0)},t.prototype.error=function(t){this.hasCompleted||e.prototype.error.call(this,t)},t.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&e.prototype.next.call(this,this.value),e.prototype.complete.call(this)},t}(R),oe=1,ae=function(){return Promise.resolve()}(),se={};function ue(e){return e in se&&(delete se[e],!0)}var ce=function(e){var t=oe++;return se[t]=!0,ae.then((function(){return ue(t)&&e()})),t},le=function(e){ue(e)},fe=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r}return i(t,e),t.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),null!==r&&r>0?e.prototype.requestAsyncId.call(this,t,n,r):(t.actions.push(this),t.scheduled||(t.scheduled=ce(t.flush.bind(t,null))))},t.prototype.recycleAsyncId=function(t,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,n,r);0===t.actions.length&&(le(n),t.scheduled=void 0)},t}(D),he=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,n=this.actions,r=-1,i=n.length;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while(++r<i&&(e=n.shift()));if(this.active=!1,t){for(;++r<i&&(e=n.shift());)e.unsubscribe();throw t}},t}(z))(fe),de=he,pe=new z(D),_e=pe,me=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r}return i(t,e),t.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),null!==r&&r>0?e.prototype.requestAsyncId.call(this,t,n,r):(t.actions.push(this),t.scheduled||(t.scheduled=requestAnimationFrame((function(){return t.flush(null)}))))},t.prototype.recycleAsyncId=function(t,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,n,r);0===t.actions.length&&(cancelAnimationFrame(n),t.scheduled=void 0)},t}(D),ve=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,n=this.actions,r=-1,i=n.length;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while(++r<i&&(e=n.shift()));if(this.active=!1,t){for(;++r<i&&(e=n.shift());)e.unsubscribe();throw t}},t}(z))(me),ge=ve,be=function(e){function t(t,n){void 0===t&&(t=ye),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=e.call(this,t,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return i(t,e),t.prototype.flush=function(){for(var e,t,n=this.actions,r=this.maxFrames;(t=n[0])&&t.delay<=r&&(n.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=n.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(z),ye=function(e){function t(t,n,r){void 0===r&&(r=t.index+=1);var i=e.call(this,t,n)||this;return i.scheduler=t,i.work=n,i.index=r,i.active=!0,i.index=t.index=r,i}return i(t,e),t.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return e.prototype.schedule.call(this,n,r);this.active=!1;var i=new t(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},t.prototype.requestAsyncId=function(e,n,r){void 0===r&&(r=0),this.delay=e.frame+r;var i=e.actions;return i.push(this),i.sort(t.sortActions),!0},t.prototype.recycleAsyncId=function(e,t,n){void 0===n&&(n=0)},t.prototype._execute=function(t,n){if(!0===this.active)return e.prototype._execute.call(this,t,n)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(D);function xe(){}function Ee(e){return!!e&&(e instanceof T||"function"==typeof e.lift&&"function"==typeof e.subscribe)}var Te=function(){function e(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return e.prototype=Object.create(Error.prototype),e}(),we=function(){function e(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return e.prototype=Object.create(Error.prototype),e}(),Ae=function(){function e(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return e.prototype=Object.create(Error.prototype),e}();function Me(e,t){return function(n){if("function"!=typeof e)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new Oe(e,t))}}var Oe=function(){function e(e,t){this.project=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new Re(e,this.project,this.thisArg))},e}(),Re=function(e){function t(t,n,r){var i=e.call(this,t)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(t,e),t.prototype._next=function(e){var t;try{t=this.project.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(m);function Se(e,t,n){if(t){if(!H(t))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Se(e,n).apply(void 0,r).pipe(Me((function(e){return l(e)?t.apply(void 0,e):t(e)})))};n=t}return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i,o=this,a={context:o,subject:i,callbackFunc:e,scheduler:n};return new T((function(r){if(n){var s={args:t,subscriber:r,params:a};return n.schedule(Pe,0,s)}if(!i){i=new ie;try{e.apply(o,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i.next(e.length<=1?e[0]:e),i.complete()}]))}catch(e){g(i)?i.error(e):console.warn(e)}}return i.subscribe(r)}))}}function Pe(e){var t=this,n=e.args,r=e.subscriber,i=e.params,o=i.callbackFunc,a=i.context,s=i.scheduler,u=i.subject;if(!u){u=i.subject=new ie;try{o.apply(a,n.concat([function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=e.length<=1?e[0]:e;t.add(s.schedule(Le,0,{value:r,subject:u}))}]))}catch(e){u.error(e)}}this.add(u.subscribe(r))}function Le(e){var t=e.value,n=e.subject;n.next(t),n.complete()}function Fe(e,t,n){if(t){if(!H(t))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Fe(e,n).apply(void 0,r).pipe(Me((function(e){return l(e)?t.apply(void 0,e):t(e)})))};n=t}return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i={subject:void 0,args:t,callbackFunc:e,scheduler:n,context:this};return new T((function(r){var o=i.context,a=i.subject;if(n)return n.schedule(Ie,0,{params:i,subscriber:r,context:o});if(!a){a=i.subject=new ie;try{e.apply(o,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.shift();n?a.error(n):(a.next(e.length<=1?e[0]:e),a.complete())}]))}catch(e){g(a)?a.error(e):console.warn(e)}}return a.subscribe(r)}))}}function Ie(e){var t=this,n=e.params,r=e.subscriber,i=e.context,o=n.callbackFunc,a=n.args,s=n.scheduler,u=n.subject;if(!u){u=n.subject=new ie;try{o.apply(i,a.concat([function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=e.shift();if(r)t.add(s.schedule(Ne,0,{err:r,subject:u}));else{var i=e.length<=1?e[0]:e;t.add(s.schedule(Ce,0,{value:i,subject:u}))}}]))}catch(e){this.add(s.schedule(Ne,0,{err:e,subject:u}))}}this.add(u.subscribe(r))}function Ce(e){var t=e.value,n=e.subject;n.next(t),n.complete()}function Ne(e){var t=e.err;e.subject.error(t)}var je=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.notifyNext=function(e,t,n,r,i){this.destination.next(t)},t.prototype.notifyError=function(e,t){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(m),De=function(e){function t(t,n,r){var i=e.call(this)||this;return i.parent=t,i.outerValue=n,i.outerIndex=r,i.index=0,i}return i(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},t.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},t}(m);function Be(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Ue=Be(),ze=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function ke(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}var Ge=function(e){if(e&&"function"==typeof e[b])return r=e,function(e){var t=r[b]();if("function"!=typeof t.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return t.subscribe(e)};if(ze(e))return X(e);if(ke(e))return n=e,function(e){return n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,u),e};if(e&&"function"==typeof e[Ue])return t=e,function(e){for(var n=t[Ue]();;){var r=void 0;try{r=n.next()}catch(t){return e.error(t),e}if(r.done){e.complete();break}if(e.next(r.value),e.closed)break}return"function"==typeof n.return&&e.add((function(){n.return&&n.return()})),e};var t,n,r,i=f(e)?"an invalid object":"'"+e+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function qe(e,t,n,r,i){if(void 0===i&&(i=new De(e,n,r)),!i.closed)return t instanceof T?t.subscribe(i):Ge(t)(i)}var Ve={};function He(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=void 0,r=void 0;return H(e[e.length-1])&&(r=e.pop()),"function"==typeof e[e.length-1]&&(n=e.pop()),1===e.length&&l(e[0])&&(e=e[0]),K(e,r).lift(new We(n))}var We=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new Xe(e,this.resultSelector))},e}(),Xe=function(e){function t(t,n){var r=e.call(this,t)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return i(t,e),t.prototype._next=function(e){this.values.push(Ve),this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{this.active=t,this.toRespond=t;for(var n=0;n<t;n++){var r=e[n];this.add(qe(this,r,void 0,n))}}},t.prototype.notifyComplete=function(e){0==(this.active-=1)&&this.destination.complete()},t.prototype.notifyNext=function(e,t,n){var r=this.values,i=r[n],o=this.toRespond?i===Ve?--this.toRespond:this.toRespond:0;r[n]=t,0===o&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))},t.prototype._tryResultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(je);function Ye(e,t){if(null!=e){if(function(e){return e&&"function"==typeof e[b]}(e))return function(e,t){return new T((function(n){var r=new d;return r.add(t.schedule((function(){var i=e[b]();r.add(i.subscribe({next:function(e){r.add(t.schedule((function(){return n.next(e)})))},error:function(e){r.add(t.schedule((function(){return n.error(e)})))},complete:function(){r.add(t.schedule((function(){return n.complete()})))}}))}))),r}))}(e,t);if(ke(e))return function(e,t){return new T((function(n){var r=new d;return r.add(t.schedule((function(){return e.then((function(e){r.add(t.schedule((function(){n.next(e),r.add(t.schedule((function(){return n.complete()})))})))}),(function(e){r.add(t.schedule((function(){return n.error(e)})))}))}))),r}))}(e,t);if(ze(e))return Y(e,t);if(function(e){return e&&"function"==typeof e[Ue]}(e)||"string"==typeof e)return function(e,t){if(!e)throw new Error("Iterable cannot be null");return new T((function(n){var r,i=new d;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(t.schedule((function(){r=e[Ue](),i.add(t.schedule((function(){if(!n.closed){var e,t;try{var i=r.next();e=i.value,t=i.done}catch(e){return void n.error(e)}t?n.complete():(n.next(e),this.schedule())}})))}))),i}))}(e,t)}throw new TypeError((null!==e&&typeof e||e)+" is not observable")}function Ke(e,t){return t?Ye(e,t):e instanceof T?e:new T(Ge(e))}var $e=function(e){function t(t){var n=e.call(this)||this;return n.parent=t,n}return i(t,e),t.prototype._next=function(e){this.parent.notifyNext(e)},t.prototype._error=function(e){this.parent.notifyError(e),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},t}(m),Ze=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyError=function(e){this.destination.error(e)},t.prototype.notifyComplete=function(){this.destination.complete()},t}(m);function Qe(e,t){if(!t.closed)return e instanceof T?e.subscribe(t):Ge(e)(t)}function Je(e,t,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof t?function(r){return r.pipe(Je((function(n,r){return Ke(e(n,r)).pipe(Me((function(e,i){return t(n,e,r,i)})))}),n))}:("number"==typeof t&&(n=t),function(t){return t.lift(new et(e,n))})}var et=function(){function e(e,t){void 0===t&&(t=Number.POSITIVE_INFINITY),this.project=e,this.concurrent=t}return e.prototype.call=function(e,t){return t.subscribe(new tt(e,this.project,this.concurrent))},e}(),tt=function(e){function t(t,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=e.call(this,t)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(t,e),t.prototype._next=function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e)},t.prototype._tryNext=function(e){var t,n=this.index++;try{t=this.project(e,n)}catch(e){return void this.destination.error(e)}this.active++,this._innerSub(t)},t.prototype._innerSub=function(e){var t=new $e(this),n=this.destination;n.add(t);var r=Qe(e,t);r!==t&&n.add(r)},t.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyComplete=function(){var e=this.buffer;this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},t}(Ze);function nt(e){return void 0===e&&(e=Number.POSITIVE_INFINITY),Je(y,e)}function rt(){return nt(1)}function it(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return rt()($.apply(void 0,e))}function ot(e){return new T((function(t){var n;try{n=e()}catch(e){return void t.error(e)}return(n?Ke(n):V()).subscribe(t)}))}function at(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){var n=e[0];if(l(n))return st(n,null);if(f(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return st(r.map((function(e){return n[e]})),r)}}if("function"==typeof e[e.length-1]){var i=e.pop();return st(e=1===e.length&&l(e[0])?e[0]:e,null).pipe(Me((function(e){return i.apply(void 0,e)})))}return st(e,null)}function st(e,t){return new T((function(n){var r=e.length;if(0!==r)for(var i=new Array(r),o=0,a=0,s=function(s){var u=Ke(e[s]),c=!1;n.add(u.subscribe({next:function(e){c||(c=!0,a++),i[s]=e},error:function(e){return n.error(e)},complete:function(){++o!==r&&c||(a===r&&n.next(t?t.reduce((function(e,t,n){return e[t]=i[n],e}),{}):i),n.complete())}}))},u=0;u<r;u++)s(u);else n.complete()}))}function ut(e,t,n,r){return o(n)&&(r=n,n=void 0),r?ut(e,t,n).pipe(Me((function(e){return l(e)?r.apply(void 0,e):r(e)}))):new T((function(r){!function e(t,n,r,i,o){var a;if(function(e){return e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener}(t)){var s=t;t.addEventListener(n,r,o),a=function(){return s.removeEventListener(n,r,o)}}else if(function(e){return e&&"function"==typeof e.on&&"function"==typeof e.off}(t)){var u=t;t.on(n,r),a=function(){return u.off(n,r)}}else if(function(e){return e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener}(t)){var c=t;t.addListener(n,r),a=function(){return c.removeListener(n,r)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var l=0,f=t.length;l<f;l++)e(t[l],n,r,i,o)}i.add(a)}(e,t,(function(e){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(e)}),r,n)}))}function ct(e,t,n){return n?ct(e,t).pipe(Me((function(e){return l(e)?n.apply(void 0,e):n(e)}))):new T((function(n){var r,i=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.next(1===e.length?e[0]:e)};try{r=e(i)}catch(e){return void n.error(e)}if(o(t))return function(){return t(i,r)}}))}function lt(e,t,n,r,i){var o,a;if(1==arguments.length){var s=e;a=s.initialState,t=s.condition,n=s.iterate,o=s.resultSelector||y,i=s.scheduler}else void 0===r||H(r)?(a=e,o=y,i=r):(a=e,o=r);return new T((function(e){var r=a;if(i)return i.schedule(ft,0,{subscriber:e,iterate:n,condition:t,resultSelector:o,state:r});for(;;){if(t){var s=void 0;try{s=t(r)}catch(t){return void e.error(t)}if(!s){e.complete();break}}var u=void 0;try{u=o(r)}catch(t){return void e.error(t)}if(e.next(u),e.closed)break;try{r=n(r)}catch(t){return void e.error(t)}}}))}function ft(e){var t=e.subscriber,n=e.condition;if(!t.closed){if(e.needIterate)try{e.state=e.iterate(e.state)}catch(e){return void t.error(e)}else e.needIterate=!0;if(n){var r=void 0;try{r=n(e.state)}catch(e){return void t.error(e)}if(!r)return void t.complete();if(t.closed)return}var i;try{i=e.resultSelector(e.state)}catch(e){return void t.error(e)}if(!t.closed&&(t.next(i),!t.closed))return this.schedule(e)}}function ht(e,t,n){return void 0===t&&(t=q),void 0===n&&(n=q),ot((function(){return e()?t:n}))}function dt(e){return!l(e)&&e-parseFloat(e)+1>=0}function pt(e,t){return void 0===e&&(e=0),void 0===t&&(t=_e),(!dt(e)||e<0)&&(e=0),t&&"function"==typeof t.schedule||(t=_e),new T((function(n){return n.add(t.schedule(_t,e,{subscriber:n,counter:0,period:e})),n}))}function _t(e){var t=e.subscriber,n=e.counter,r=e.period;t.next(n),this.schedule({subscriber:t,counter:n+1,period:r},r)}function mt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Number.POSITIVE_INFINITY,r=null,i=e[e.length-1];return H(i)?(r=e.pop(),e.length>1&&"number"==typeof e[e.length-1]&&(n=e.pop())):"number"==typeof i&&(n=e.pop()),null===r&&1===e.length&&e[0]instanceof T?e[0]:nt(n)(K(e,r))}var vt=new T(xe);function gt(){return vt}function bt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(0===e.length)return q;var n=e[0],r=e.slice(1);return 1===e.length&&l(n)?bt.apply(void 0,n):new T((function(e){var t=function(){return e.add(bt.apply(void 0,r).subscribe(e))};return Ke(n).subscribe({next:function(t){e.next(t)},error:t,complete:t})}))}function yt(e,t){return new T(t?function(n){var r=Object.keys(e),i=new d;return i.add(t.schedule(xt,0,{keys:r,index:0,subscriber:n,subscription:i,obj:e})),i}:function(t){for(var n=Object.keys(e),r=0;r<n.length&&!t.closed;r++){var i=n[r];e.hasOwnProperty(i)&&t.next([i,e[i]])}t.complete()})}function xt(e){var t=e.keys,n=e.index,r=e.subscriber,i=e.subscription,o=e.obj;if(!r.closed)if(n<t.length){var a=t[n];r.next([a,o[a]]),i.add(this.schedule({keys:t,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}function Et(e,t){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=e,n.thisArg=t,n}function Tt(e,t){return function(n){return n.lift(new wt(e,t))}}var wt=function(){function e(e,t){this.predicate=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new At(e,this.predicate,this.thisArg))},e}(),At=function(e){function t(t,n,r){var i=e.call(this,t)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(t,e),t.prototype._next=function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}t&&this.destination.next(e)},t}(m);function Mt(e,t,n){return[Tt(t,n)(new T(Ge(e))),Tt(Et(t,n))(new T(Ge(e)))]}function Ot(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){if(!l(e[0]))return e[0];e=e[0]}return K(e,void 0).lift(new Rt)}var Rt=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new St(e))},e}(),St=function(e){function t(t){var n=e.call(this,t)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i(t,e),t.prototype._next=function(e){this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{for(var n=0;n<t&&!this.hasFirst;n++){var r=qe(this,e[n],void 0,n);this.subscriptions&&this.subscriptions.push(r),this.add(r)}this.observables=null}},t.prototype.notifyNext=function(e,t,n){if(!this.hasFirst){this.hasFirst=!0;for(var r=0;r<this.subscriptions.length;r++)if(r!==n){var i=this.subscriptions[r];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(t)},t}(je);function Pt(e,t,n){return void 0===e&&(e=0),new T((function(r){void 0===t&&(t=e,e=0);var i=0,o=e;if(n)return n.schedule(Lt,0,{index:i,count:t,start:e,subscriber:r});for(;;){if(i++>=t){r.complete();break}if(r.next(o++),r.closed)break}}))}function Lt(e){var t=e.start,n=e.index,r=e.count,i=e.subscriber;n>=r?i.complete():(i.next(t),i.closed||(e.index=n+1,e.start=t+1,this.schedule(e)))}function Ft(e,t,n){void 0===e&&(e=0);var r=-1;return dt(t)?r=Number(t)<1?1:Number(t):H(t)&&(n=t),H(n)||(n=_e),new T((function(t){var i=dt(e)?e:+e-n.now();return n.schedule(It,i,{index:0,period:r,subscriber:t})}))}function It(e){var t=e.index,n=e.period,r=e.subscriber;if(r.next(t),!r.closed){if(-1===n)return r.complete();e.index=t+1,this.schedule(e,n)}}function Ct(e,t){return new T((function(n){var r,i;try{r=e()}catch(e){return void n.error(e)}try{i=t(r)}catch(e){return void n.error(e)}var o=(i?Ke(i):q).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}function Nt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[e.length-1];return"function"==typeof n&&e.pop(),K(e,void 0).lift(new jt(n))}var jt=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new Dt(e,this.resultSelector))},e}(),Dt=function(e){function t(t,n,r){void 0===r&&(r=Object.create(null));var i=e.call(this,t)||this;return i.resultSelector=n,i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:void 0,i}return i(t,e),t.prototype._next=function(e){var t=this.iterators;l(e)?t.push(new Ut(e)):"function"==typeof e[Ue]?t.push(new Bt(e[Ue]())):t.push(new zt(this.destination,this,e))},t.prototype._complete=function(){var e=this.iterators,t=e.length;if(this.unsubscribe(),0!==t){this.active=t;for(var n=0;n<t;n++){var r=e[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe());else this.active--}}else this.destination.complete()},t.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},t.prototype.checkIterators=function(){for(var e=this.iterators,t=e.length,n=this.destination,r=0;r<t;r++){if("function"==typeof(a=e[r]).hasValue&&!a.hasValue())return}var i=!1,o=[];for(r=0;r<t;r++){var a,s=(a=e[r]).next();if(a.hasCompleted()&&(i=!0),s.done)return void n.complete();o.push(s.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},t.prototype._tryresultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(m),Bt=function(){function e(e){this.iterator=e,this.nextResult=e.next()}return e.prototype.hasValue=function(){return!0},e.prototype.next=function(){var e=this.nextResult;return this.nextResult=this.iterator.next(),e},e.prototype.hasCompleted=function(){var e=this.nextResult;return Boolean(e&&e.done)},e}(),Ut=function(){function e(e){this.array=e,this.index=0,this.length=0,this.length=e.length}return e.prototype[Ue]=function(){return this},e.prototype.next=function(e){var t=this.index++,n=this.array;return t<this.length?{value:n[t],done:!1}:{value:null,done:!0}},e.prototype.hasValue=function(){return this.array.length>this.index},e.prototype.hasCompleted=function(){return this.array.length===this.index},e}(),zt=function(e){function t(t,n,r){var i=e.call(this,t)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(t,e),t.prototype[Ue]=function(){return this},t.prototype.next=function(){var e=this.buffer;return 0===e.length&&this.isComplete?{value:null,done:!0}:{value:e.shift(),done:!1}},t.prototype.hasValue=function(){return this.buffer.length>0},t.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},t.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},t.prototype.notifyNext=function(e){this.buffer.push(e),this.parent.checkIterators()},t.prototype.subscribe=function(){return Qe(this.observable,new $e(this))},t}(Ze)},function(e,t,n){"use strict";n.r(t),n.d(t,"glMatrix",(function(){return r})),n.d(t,"mat2",(function(){return i})),n.d(t,"mat2d",(function(){return o})),n.d(t,"mat3",(function(){return a})),n.d(t,"mat4",(function(){return s})),n.d(t,"quat",(function(){return l})),n.d(t,"quat2",(function(){return f})),n.d(t,"vec2",(function(){return h})),n.d(t,"vec3",(function(){return u})),n.d(t,"vec4",(function(){return c}));var r={};n.r(r),n.d(r,"EPSILON",(function(){return d})),n.d(r,"ARRAY_TYPE",(function(){return p})),n.d(r,"RANDOM",(function(){return _})),n.d(r,"setMatrixArrayType",(function(){return m})),n.d(r,"toRadian",(function(){return g})),n.d(r,"equals",(function(){return b}));var i={};n.r(i),n.d(i,"create",(function(){return y})),n.d(i,"clone",(function(){return x})),n.d(i,"copy",(function(){return E})),n.d(i,"identity",(function(){return T})),n.d(i,"fromValues",(function(){return w})),n.d(i,"set",(function(){return A})),n.d(i,"transpose",(function(){return M})),n.d(i,"invert",(function(){return O})),n.d(i,"adjoint",(function(){return R})),n.d(i,"determinant",(function(){return S})),n.d(i,"multiply",(function(){return P})),n.d(i,"rotate",(function(){return L})),n.d(i,"scale",(function(){return F})),n.d(i,"fromRotation",(function(){return I})),n.d(i,"fromScaling",(function(){return C})),n.d(i,"str",(function(){return N})),n.d(i,"frob",(function(){return j})),n.d(i,"LDU",(function(){return D})),n.d(i,"add",(function(){return B})),n.d(i,"subtract",(function(){return U})),n.d(i,"exactEquals",(function(){return z})),n.d(i,"equals",(function(){return k})),n.d(i,"multiplyScalar",(function(){return G})),n.d(i,"multiplyScalarAndAdd",(function(){return q})),n.d(i,"mul",(function(){return V})),n.d(i,"sub",(function(){return H}));var o={};n.r(o),n.d(o,"create",(function(){return W})),n.d(o,"clone",(function(){return X})),n.d(o,"copy",(function(){return Y})),n.d(o,"identity",(function(){return K})),n.d(o,"fromValues",(function(){return $})),n.d(o,"set",(function(){return Z})),n.d(o,"invert",(function(){return Q})),n.d(o,"determinant",(function(){return J})),n.d(o,"multiply",(function(){return ee})),n.d(o,"rotate",(function(){return te})),n.d(o,"scale",(function(){return ne})),n.d(o,"translate",(function(){return re})),n.d(o,"fromRotation",(function(){return ie})),n.d(o,"fromScaling",(function(){return oe})),n.d(o,"fromTranslation",(function(){return ae})),n.d(o,"str",(function(){return se})),n.d(o,"frob",(function(){return ue})),n.d(o,"add",(function(){return ce})),n.d(o,"subtract",(function(){return le})),n.d(o,"multiplyScalar",(function(){return fe})),n.d(o,"multiplyScalarAndAdd",(function(){return he})),n.d(o,"exactEquals",(function(){return de})),n.d(o,"equals",(function(){return pe})),n.d(o,"mul",(function(){return _e})),n.d(o,"sub",(function(){return me}));var a={};n.r(a),n.d(a,"create",(function(){return ve})),n.d(a,"fromMat4",(function(){return ge})),n.d(a,"clone",(function(){return be})),n.d(a,"copy",(function(){return ye})),n.d(a,"fromValues",(function(){return xe})),n.d(a,"set",(function(){return Ee})),n.d(a,"identity",(function(){return Te})),n.d(a,"transpose",(function(){return we})),n.d(a,"invert",(function(){return Ae})),n.d(a,"adjoint",(function(){return Me})),n.d(a,"determinant",(function(){return Oe})),n.d(a,"multiply",(function(){return Re})),n.d(a,"translate",(function(){return Se})),n.d(a,"rotate",(function(){return Pe})),n.d(a,"scale",(function(){return Le})),n.d(a,"fromTranslation",(function(){return Fe})),n.d(a,"fromRotation",(function(){return Ie})),n.d(a,"fromScaling",(function(){return Ce})),n.d(a,"fromMat2d",(function(){return Ne})),n.d(a,"fromQuat",(function(){return je})),n.d(a,"normalFromMat4",(function(){return De})),n.d(a,"projection",(function(){return Be})),n.d(a,"str",(function(){return Ue})),n.d(a,"frob",(function(){return ze})),n.d(a,"add",(function(){return ke})),n.d(a,"subtract",(function(){return Ge})),n.d(a,"multiplyScalar",(function(){return qe})),n.d(a,"multiplyScalarAndAdd",(function(){return Ve})),n.d(a,"exactEquals",(function(){return He})),n.d(a,"equals",(function(){return We})),n.d(a,"mul",(function(){return Xe})),n.d(a,"sub",(function(){return Ye}));var s={};n.r(s),n.d(s,"create",(function(){return Ke})),n.d(s,"clone",(function(){return $e})),n.d(s,"copy",(function(){return Ze})),n.d(s,"fromValues",(function(){return Qe})),n.d(s,"set",(function(){return Je})),n.d(s,"identity",(function(){return et})),n.d(s,"transpose",(function(){return tt})),n.d(s,"invert",(function(){return nt})),n.d(s,"adjoint",(function(){return rt})),n.d(s,"determinant",(function(){return it})),n.d(s,"multiply",(function(){return ot})),n.d(s,"translate",(function(){return at})),n.d(s,"scale",(function(){return st})),n.d(s,"rotate",(function(){return ut})),n.d(s,"rotateX",(function(){return ct})),n.d(s,"rotateY",(function(){return lt})),n.d(s,"rotateZ",(function(){return ft})),n.d(s,"fromTranslation",(function(){return ht})),n.d(s,"fromScaling",(function(){return dt})),n.d(s,"fromRotation",(function(){return pt})),n.d(s,"fromXRotation",(function(){return _t})),n.d(s,"fromYRotation",(function(){return mt})),n.d(s,"fromZRotation",(function(){return vt})),n.d(s,"fromRotationTranslation",(function(){return gt})),n.d(s,"fromQuat2",(function(){return bt})),n.d(s,"getTranslation",(function(){return yt})),n.d(s,"getScaling",(function(){return xt})),n.d(s,"getRotation",(function(){return Et})),n.d(s,"fromRotationTranslationScale",(function(){return Tt})),n.d(s,"fromRotationTranslationScaleOrigin",(function(){return wt})),n.d(s,"fromQuat",(function(){return At})),n.d(s,"frustum",(function(){return Mt})),n.d(s,"perspective",(function(){return Ot})),n.d(s,"perspectiveFromFieldOfView",(function(){return Rt})),n.d(s,"ortho",(function(){return St})),n.d(s,"lookAt",(function(){return Pt})),n.d(s,"targetTo",(function(){return Lt})),n.d(s,"str",(function(){return Ft})),n.d(s,"frob",(function(){return It})),n.d(s,"add",(function(){return Ct})),n.d(s,"subtract",(function(){return Nt})),n.d(s,"multiplyScalar",(function(){return jt})),n.d(s,"multiplyScalarAndAdd",(function(){return Dt})),n.d(s,"exactEquals",(function(){return Bt})),n.d(s,"equals",(function(){return Ut})),n.d(s,"mul",(function(){return zt})),n.d(s,"sub",(function(){return kt}));var u={};n.r(u),n.d(u,"create",(function(){return Gt})),n.d(u,"clone",(function(){return qt})),n.d(u,"length",(function(){return Vt})),n.d(u,"fromValues",(function(){return Ht})),n.d(u,"copy",(function(){return Wt})),n.d(u,"set",(function(){return Xt})),n.d(u,"add",(function(){return Yt})),n.d(u,"subtract",(function(){return Kt})),n.d(u,"multiply",(function(){return $t})),n.d(u,"divide",(function(){return Zt})),n.d(u,"ceil",(function(){return Qt})),n.d(u,"floor",(function(){return Jt})),n.d(u,"min",(function(){return en})),n.d(u,"max",(function(){return tn})),n.d(u,"round",(function(){return nn})),n.d(u,"scale",(function(){return rn})),n.d(u,"scaleAndAdd",(function(){return on})),n.d(u,"distance",(function(){return an})),n.d(u,"squaredDistance",(function(){return sn})),n.d(u,"squaredLength",(function(){return un})),n.d(u,"negate",(function(){return cn})),n.d(u,"inverse",(function(){return ln})),n.d(u,"normalize",(function(){return fn})),n.d(u,"dot",(function(){return hn})),n.d(u,"cross",(function(){return dn})),n.d(u,"lerp",(function(){return pn})),n.d(u,"hermite",(function(){return _n})),n.d(u,"bezier",(function(){return mn})),n.d(u,"random",(function(){return vn})),n.d(u,"transformMat4",(function(){return gn})),n.d(u,"transformMat3",(function(){return bn})),n.d(u,"transformQuat",(function(){return yn})),n.d(u,"rotateX",(function(){return xn})),n.d(u,"rotateY",(function(){return En})),n.d(u,"rotateZ",(function(){return Tn})),n.d(u,"angle",(function(){return wn})),n.d(u,"zero",(function(){return An})),n.d(u,"str",(function(){return Mn})),n.d(u,"exactEquals",(function(){return On})),n.d(u,"equals",(function(){return Rn})),n.d(u,"sub",(function(){return Pn})),n.d(u,"mul",(function(){return Ln})),n.d(u,"div",(function(){return Fn})),n.d(u,"dist",(function(){return In})),n.d(u,"sqrDist",(function(){return Cn})),n.d(u,"len",(function(){return Nn})),n.d(u,"sqrLen",(function(){return jn})),n.d(u,"forEach",(function(){return Dn}));var c={};n.r(c),n.d(c,"create",(function(){return Bn})),n.d(c,"clone",(function(){return Un})),n.d(c,"fromValues",(function(){return zn})),n.d(c,"copy",(function(){return kn})),n.d(c,"set",(function(){return Gn})),n.d(c,"add",(function(){return qn})),n.d(c,"subtract",(function(){return Vn})),n.d(c,"multiply",(function(){return Hn})),n.d(c,"divide",(function(){return Wn})),n.d(c,"ceil",(function(){return Xn})),n.d(c,"floor",(function(){return Yn})),n.d(c,"min",(function(){return Kn})),n.d(c,"max",(function(){return $n})),n.d(c,"round",(function(){return Zn})),n.d(c,"scale",(function(){return Qn})),n.d(c,"scaleAndAdd",(function(){return Jn})),n.d(c,"distance",(function(){return er})),n.d(c,"squaredDistance",(function(){return tr})),n.d(c,"length",(function(){return nr})),n.d(c,"squaredLength",(function(){return rr})),n.d(c,"negate",(function(){return ir})),n.d(c,"inverse",(function(){return or})),n.d(c,"normalize",(function(){return ar})),n.d(c,"dot",(function(){return sr})),n.d(c,"cross",(function(){return ur})),n.d(c,"lerp",(function(){return cr})),n.d(c,"random",(function(){return lr})),n.d(c,"transformMat4",(function(){return fr})),n.d(c,"transformQuat",(function(){return hr})),n.d(c,"zero",(function(){return dr})),n.d(c,"str",(function(){return pr})),n.d(c,"exactEquals",(function(){return _r})),n.d(c,"equals",(function(){return mr})),n.d(c,"sub",(function(){return vr})),n.d(c,"mul",(function(){return gr})),n.d(c,"div",(function(){return br})),n.d(c,"dist",(function(){return yr})),n.d(c,"sqrDist",(function(){return xr})),n.d(c,"len",(function(){return Er})),n.d(c,"sqrLen",(function(){return Tr})),n.d(c,"forEach",(function(){return wr}));var l={};n.r(l),n.d(l,"create",(function(){return Ar})),n.d(l,"identity",(function(){return Mr})),n.d(l,"setAxisAngle",(function(){return Or})),n.d(l,"getAxisAngle",(function(){return Rr})),n.d(l,"getAngle",(function(){return Sr})),n.d(l,"multiply",(function(){return Pr})),n.d(l,"rotateX",(function(){return Lr})),n.d(l,"rotateY",(function(){return Fr})),n.d(l,"rotateZ",(function(){return Ir})),n.d(l,"calculateW",(function(){return Cr})),n.d(l,"exp",(function(){return Nr})),n.d(l,"ln",(function(){return jr})),n.d(l,"pow",(function(){return Dr})),n.d(l,"slerp",(function(){return Br})),n.d(l,"random",(function(){return Ur})),n.d(l,"invert",(function(){return zr})),n.d(l,"conjugate",(function(){return kr})),n.d(l,"fromMat3",(function(){return Gr})),n.d(l,"fromEuler",(function(){return qr})),n.d(l,"str",(function(){return Vr})),n.d(l,"clone",(function(){return Zr})),n.d(l,"fromValues",(function(){return Qr})),n.d(l,"copy",(function(){return Jr})),n.d(l,"set",(function(){return ei})),n.d(l,"add",(function(){return ti})),n.d(l,"mul",(function(){return ni})),n.d(l,"scale",(function(){return ri})),n.d(l,"dot",(function(){return ii})),n.d(l,"lerp",(function(){return oi})),n.d(l,"length",(function(){return ai})),n.d(l,"len",(function(){return si})),n.d(l,"squaredLength",(function(){return ui})),n.d(l,"sqrLen",(function(){return ci})),n.d(l,"normalize",(function(){return li})),n.d(l,"exactEquals",(function(){return fi})),n.d(l,"equals",(function(){return hi})),n.d(l,"rotationTo",(function(){return di})),n.d(l,"sqlerp",(function(){return pi})),n.d(l,"setAxes",(function(){return _i}));var f={};n.r(f),n.d(f,"create",(function(){return mi})),n.d(f,"clone",(function(){return vi})),n.d(f,"fromValues",(function(){return gi})),n.d(f,"fromRotationTranslationValues",(function(){return bi})),n.d(f,"fromRotationTranslation",(function(){return yi})),n.d(f,"fromTranslation",(function(){return xi})),n.d(f,"fromRotation",(function(){return Ei})),n.d(f,"fromMat4",(function(){return Ti})),n.d(f,"copy",(function(){return wi})),n.d(f,"identity",(function(){return Ai})),n.d(f,"set",(function(){return Mi})),n.d(f,"getReal",(function(){return Oi})),n.d(f,"getDual",(function(){return Ri})),n.d(f,"setReal",(function(){return Si})),n.d(f,"setDual",(function(){return Pi})),n.d(f,"getTranslation",(function(){return Li})),n.d(f,"translate",(function(){return Fi})),n.d(f,"rotateX",(function(){return Ii})),n.d(f,"rotateY",(function(){return Ci})),n.d(f,"rotateZ",(function(){return Ni})),n.d(f,"rotateByQuatAppend",(function(){return ji})),n.d(f,"rotateByQuatPrepend",(function(){return Di})),n.d(f,"rotateAroundAxis",(function(){return Bi})),n.d(f,"add",(function(){return Ui})),n.d(f,"multiply",(function(){return zi})),n.d(f,"mul",(function(){return ki})),n.d(f,"scale",(function(){return Gi})),n.d(f,"dot",(function(){return qi})),n.d(f,"lerp",(function(){return Vi})),n.d(f,"invert",(function(){return Hi})),n.d(f,"conjugate",(function(){return Wi})),n.d(f,"length",(function(){return Xi})),n.d(f,"len",(function(){return Yi})),n.d(f,"squaredLength",(function(){return Ki})),n.d(f,"sqrLen",(function(){return $i})),n.d(f,"normalize",(function(){return Zi})),n.d(f,"str",(function(){return Qi})),n.d(f,"exactEquals",(function(){return Ji})),n.d(f,"equals",(function(){return eo}));var h={};n.r(h),n.d(h,"create",(function(){return to})),n.d(h,"clone",(function(){return no})),n.d(h,"fromValues",(function(){return ro})),n.d(h,"copy",(function(){return io})),n.d(h,"set",(function(){return oo})),n.d(h,"add",(function(){return ao})),n.d(h,"subtract",(function(){return so})),n.d(h,"multiply",(function(){return uo})),n.d(h,"divide",(function(){return co})),n.d(h,"ceil",(function(){return lo})),n.d(h,"floor",(function(){return fo})),n.d(h,"min",(function(){return ho})),n.d(h,"max",(function(){return po})),n.d(h,"round",(function(){return _o})),n.d(h,"scale",(function(){return mo})),n.d(h,"scaleAndAdd",(function(){return vo})),n.d(h,"distance",(function(){return go})),n.d(h,"squaredDistance",(function(){return bo})),n.d(h,"length",(function(){return yo})),n.d(h,"squaredLength",(function(){return xo})),n.d(h,"negate",(function(){return Eo})),n.d(h,"inverse",(function(){return To})),n.d(h,"normalize",(function(){return wo})),n.d(h,"dot",(function(){return Ao})),n.d(h,"cross",(function(){return Mo})),n.d(h,"lerp",(function(){return Oo})),n.d(h,"random",(function(){return Ro})),n.d(h,"transformMat2",(function(){return So})),n.d(h,"transformMat2d",(function(){return Po})),n.d(h,"transformMat3",(function(){return Lo})),n.d(h,"transformMat4",(function(){return Fo})),n.d(h,"rotate",(function(){return Io})),n.d(h,"angle",(function(){return Co})),n.d(h,"zero",(function(){return No})),n.d(h,"str",(function(){return jo})),n.d(h,"exactEquals",(function(){return Do})),n.d(h,"equals",(function(){return Bo})),n.d(h,"len",(function(){return Uo})),n.d(h,"sub",(function(){return zo})),n.d(h,"mul",(function(){return ko})),n.d(h,"div",(function(){return Go})),n.d(h,"dist",(function(){return qo})),n.d(h,"sqrDist",(function(){return Vo})),n.d(h,"sqrLen",(function(){return Ho})),n.d(h,"forEach",(function(){return Wo}));var d=1e-6,p="undefined"!=typeof Float32Array?Float32Array:Array,_=Math.random;function m(e){p=e}var v=Math.PI/180;function g(e){return e*v}function b(e,t){return Math.abs(e-t)<=d*Math.max(1,Math.abs(e),Math.abs(t))}function y(){var e=new p(4);return p!=Float32Array&&(e[1]=0,e[2]=0),e[0]=1,e[3]=1,e}function x(e){var t=new p(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function E(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function T(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}function w(e,t,n,r){var i=new p(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=r,i}function A(e,t,n,r,i){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e}function M(e,t){if(e===t){var n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}function O(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n*o-i*r;return a?(a=1/a,e[0]=o*a,e[1]=-r*a,e[2]=-i*a,e[3]=n*a,e):null}function R(e,t){var n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}function S(e){return e[0]*e[3]-e[2]*e[1]}function P(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1],c=n[2],l=n[3];return e[0]=r*s+o*u,e[1]=i*s+a*u,e[2]=r*c+o*l,e[3]=i*c+a*l,e}function L(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u+o*s,e[1]=i*u+a*s,e[2]=r*-s+o*u,e[3]=i*-s+a*u,e}function F(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1];return e[0]=r*s,e[1]=i*s,e[2]=o*u,e[3]=a*u,e}function I(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=-n,e[3]=r,e}function C(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}function N(e){return"mat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function j(e){return Math.hypot(e[0],e[1],e[2],e[3])}function D(e,t,n,r){return e[2]=r[2]/r[0],n[0]=r[0],n[1]=r[1],n[3]=r[3]-e[2]*n[1],[e,t,n]}function B(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}function U(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}function z(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function k(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=t[0],s=t[1],u=t[2],c=t[3];return Math.abs(n-a)<=d*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-s)<=d*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-u)<=d*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-c)<=d*Math.max(1,Math.abs(o),Math.abs(c))}function G(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}function q(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var V=P,H=U;function W(){var e=new p(6);return p!=Float32Array&&(e[1]=0,e[2]=0,e[4]=0,e[5]=0),e[0]=1,e[3]=1,e}function X(e){var t=new p(6);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function Y(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function K(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}function $(e,t,n,r,i,o){var a=new p(6);return a[0]=e,a[1]=t,a[2]=n,a[3]=r,a[4]=i,a[5]=o,a}function Z(e,t,n,r,i,o,a){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e}function Q(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=n*o-r*i;return u?(u=1/u,e[0]=o*u,e[1]=-r*u,e[2]=-i*u,e[3]=n*u,e[4]=(i*s-o*a)*u,e[5]=(r*a-n*s)*u,e):null}function J(e){return e[0]*e[3]-e[1]*e[2]}function ee(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=n[0],l=n[1],f=n[2],h=n[3],d=n[4],p=n[5];return e[0]=r*c+o*l,e[1]=i*c+a*l,e[2]=r*f+o*h,e[3]=i*f+a*h,e[4]=r*d+o*p+s,e[5]=i*d+a*p+u,e}function te(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=Math.sin(n),l=Math.cos(n);return e[0]=r*l+o*c,e[1]=i*l+a*c,e[2]=r*-c+o*l,e[3]=i*-c+a*l,e[4]=s,e[5]=u,e}function ne(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=n[0],l=n[1];return e[0]=r*c,e[1]=i*c,e[2]=o*l,e[3]=a*l,e[4]=s,e[5]=u,e}function re(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=n[0],l=n[1];return e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=r*c+o*l+s,e[5]=i*c+a*l+u,e}function ie(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=-n,e[3]=r,e[4]=0,e[5]=0,e}function oe(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}function ae(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}function se(e){return"mat2d("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+")"}function ue(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],1)}function ce(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}function le(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}function fe(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}function he(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e}function de(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}function pe(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=t[0],c=t[1],l=t[2],f=t[3],h=t[4],p=t[5];return Math.abs(n-u)<=d*Math.max(1,Math.abs(n),Math.abs(u))&&Math.abs(r-c)<=d*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(i-l)<=d*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(o-f)<=d*Math.max(1,Math.abs(o),Math.abs(f))&&Math.abs(a-h)<=d*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(s-p)<=d*Math.max(1,Math.abs(s),Math.abs(p))}var _e=ee,me=le;function ve(){var e=new p(9);return p!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[5]=0,e[6]=0,e[7]=0),e[0]=1,e[4]=1,e[8]=1,e}function ge(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function be(e){var t=new p(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function ye(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function xe(e,t,n,r,i,o,a,s,u){var c=new p(9);return c[0]=e,c[1]=t,c[2]=n,c[3]=r,c[4]=i,c[5]=o,c[6]=a,c[7]=s,c[8]=u,c}function Ee(e,t,n,r,i,o,a,s,u,c){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e[6]=s,e[7]=u,e[8]=c,e}function Te(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function we(e,t){if(e===t){var n=t[1],r=t[2],i=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=r,e[7]=i}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function Ae(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=l*a-s*c,h=-l*o+s*u,d=c*o-a*u,p=n*f+r*h+i*d;return p?(p=1/p,e[0]=f*p,e[1]=(-l*r+i*c)*p,e[2]=(s*r-i*a)*p,e[3]=h*p,e[4]=(l*n-i*u)*p,e[5]=(-s*n+i*o)*p,e[6]=d*p,e[7]=(-c*n+r*u)*p,e[8]=(a*n-r*o)*p,e):null}function Me(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8];return e[0]=a*l-s*c,e[1]=i*c-r*l,e[2]=r*s-i*a,e[3]=s*u-o*l,e[4]=n*l-i*u,e[5]=i*o-n*s,e[6]=o*c-a*u,e[7]=r*u-n*c,e[8]=n*a-r*o,e}function Oe(e){var t=e[0],n=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],u=e[7],c=e[8];return t*(c*o-a*u)+n*(-c*i+a*s)+r*(u*i-o*s)}function Re(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=n[0],d=n[1],p=n[2],_=n[3],m=n[4],v=n[5],g=n[6],b=n[7],y=n[8];return e[0]=h*r+d*a+p*c,e[1]=h*i+d*s+p*l,e[2]=h*o+d*u+p*f,e[3]=_*r+m*a+v*c,e[4]=_*i+m*s+v*l,e[5]=_*o+m*u+v*f,e[6]=g*r+b*a+y*c,e[7]=g*i+b*s+y*l,e[8]=g*o+b*u+y*f,e}function Se(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=n[0],d=n[1];return e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=s,e[5]=u,e[6]=h*r+d*a+c,e[7]=h*i+d*s+l,e[8]=h*o+d*u+f,e}function Pe(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=Math.sin(n),d=Math.cos(n);return e[0]=d*r+h*a,e[1]=d*i+h*s,e[2]=d*o+h*u,e[3]=d*a-h*r,e[4]=d*s-h*i,e[5]=d*u-h*o,e[6]=c,e[7]=l,e[8]=f,e}function Le(e,t,n){var r=n[0],i=n[1];return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=i*t[3],e[4]=i*t[4],e[5]=i*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function Fe(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}function Ie(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=-n,e[4]=r,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ce(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ne(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}function je(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n+n,s=r+r,u=i+i,c=n*a,l=r*a,f=r*s,h=i*a,d=i*s,p=i*u,_=o*a,m=o*s,v=o*u;return e[0]=1-f-p,e[3]=l-v,e[6]=h+m,e[1]=l+v,e[4]=1-c-p,e[7]=d-_,e[2]=h-m,e[5]=d+_,e[8]=1-c-f,e}function De(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=t[9],h=t[10],d=t[11],p=t[12],_=t[13],m=t[14],v=t[15],g=n*s-r*a,b=n*u-i*a,y=n*c-o*a,x=r*u-i*s,E=r*c-o*s,T=i*c-o*u,w=l*_-f*p,A=l*m-h*p,M=l*v-d*p,O=f*m-h*_,R=f*v-d*_,S=h*v-d*m,P=g*S-b*R+y*O+x*M-E*A+T*w;return P?(P=1/P,e[0]=(s*S-u*R+c*O)*P,e[1]=(u*M-a*S-c*A)*P,e[2]=(a*R-s*M+c*w)*P,e[3]=(i*R-r*S-o*O)*P,e[4]=(n*S-i*M+o*A)*P,e[5]=(r*M-n*R-o*w)*P,e[6]=(_*T-m*E+v*x)*P,e[7]=(m*y-p*T-v*b)*P,e[8]=(p*E-_*y+v*g)*P,e):null}function Be(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function Ue(e){return"mat3("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+")"}function ze(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8])}function ke(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}function Ge(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}function qe(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}function Ve(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e}function He(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}function We(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],l=e[8],f=t[0],h=t[1],p=t[2],_=t[3],m=t[4],v=t[5],g=t[6],b=t[7],y=t[8];return Math.abs(n-f)<=d*Math.max(1,Math.abs(n),Math.abs(f))&&Math.abs(r-h)<=d*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(i-p)<=d*Math.max(1,Math.abs(i),Math.abs(p))&&Math.abs(o-_)<=d*Math.max(1,Math.abs(o),Math.abs(_))&&Math.abs(a-m)<=d*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(s-v)<=d*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(u-g)<=d*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(c-b)<=d*Math.max(1,Math.abs(c),Math.abs(b))&&Math.abs(l-y)<=d*Math.max(1,Math.abs(l),Math.abs(y))}var Xe=Re,Ye=Ge;function Ke(){var e=new p(16);return p!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function $e(e){var t=new p(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Ze(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Qe(e,t,n,r,i,o,a,s,u,c,l,f,h,d,_,m){var v=new p(16);return v[0]=e,v[1]=t,v[2]=n,v[3]=r,v[4]=i,v[5]=o,v[6]=a,v[7]=s,v[8]=u,v[9]=c,v[10]=l,v[11]=f,v[12]=h,v[13]=d,v[14]=_,v[15]=m,v}function Je(e,t,n,r,i,o,a,s,u,c,l,f,h,d,p,_,m){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e[6]=s,e[7]=u,e[8]=c,e[9]=l,e[10]=f,e[11]=h,e[12]=d,e[13]=p,e[14]=_,e[15]=m,e}function et(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function tt(e,t){if(e===t){var n=t[1],r=t[2],i=t[3],o=t[6],a=t[7],s=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=o,e[11]=t[14],e[12]=i,e[13]=a,e[14]=s}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function nt(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=t[9],h=t[10],d=t[11],p=t[12],_=t[13],m=t[14],v=t[15],g=n*s-r*a,b=n*u-i*a,y=n*c-o*a,x=r*u-i*s,E=r*c-o*s,T=i*c-o*u,w=l*_-f*p,A=l*m-h*p,M=l*v-d*p,O=f*m-h*_,R=f*v-d*_,S=h*v-d*m,P=g*S-b*R+y*O+x*M-E*A+T*w;return P?(P=1/P,e[0]=(s*S-u*R+c*O)*P,e[1]=(i*R-r*S-o*O)*P,e[2]=(_*T-m*E+v*x)*P,e[3]=(h*E-f*T-d*x)*P,e[4]=(u*M-a*S-c*A)*P,e[5]=(n*S-i*M+o*A)*P,e[6]=(m*y-p*T-v*b)*P,e[7]=(l*T-h*y+d*b)*P,e[8]=(a*R-s*M+c*w)*P,e[9]=(r*M-n*R-o*w)*P,e[10]=(p*E-_*y+v*g)*P,e[11]=(f*y-l*E-d*g)*P,e[12]=(s*A-a*O-u*w)*P,e[13]=(n*O-r*A+i*w)*P,e[14]=(_*b-p*x-m*g)*P,e[15]=(l*x-f*b+h*g)*P,e):null}function rt(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],l=t[8],f=t[9],h=t[10],d=t[11],p=t[12],_=t[13],m=t[14],v=t[15];return e[0]=s*(h*v-d*m)-f*(u*v-c*m)+_*(u*d-c*h),e[1]=-(r*(h*v-d*m)-f*(i*v-o*m)+_*(i*d-o*h)),e[2]=r*(u*v-c*m)-s*(i*v-o*m)+_*(i*c-o*u),e[3]=-(r*(u*d-c*h)-s*(i*d-o*h)+f*(i*c-o*u)),e[4]=-(a*(h*v-d*m)-l*(u*v-c*m)+p*(u*d-c*h)),e[5]=n*(h*v-d*m)-l*(i*v-o*m)+p*(i*d-o*h),e[6]=-(n*(u*v-c*m)-a*(i*v-o*m)+p*(i*c-o*u)),e[7]=n*(u*d-c*h)-a*(i*d-o*h)+l*(i*c-o*u),e[8]=a*(f*v-d*_)-l*(s*v-c*_)+p*(s*d-c*f),e[9]=-(n*(f*v-d*_)-l*(r*v-o*_)+p*(r*d-o*f)),e[10]=n*(s*v-c*_)-a*(r*v-o*_)+p*(r*c-o*s),e[11]=-(n*(s*d-c*f)-a*(r*d-o*f)+l*(r*c-o*s)),e[12]=-(a*(f*m-h*_)-l*(s*m-u*_)+p*(s*h-u*f)),e[13]=n*(f*m-h*_)-l*(r*m-i*_)+p*(r*h-i*f),e[14]=-(n*(s*m-u*_)-a*(r*m-i*_)+p*(r*u-i*s)),e[15]=n*(s*h-u*f)-a*(r*h-i*f)+l*(r*u-i*s),e}function it(e){var t=e[0],n=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],u=e[7],c=e[8],l=e[9],f=e[10],h=e[11],d=e[12],p=e[13],_=e[14],m=e[15];return(t*a-n*o)*(f*m-h*_)-(t*s-r*o)*(l*m-h*p)+(t*u-i*o)*(l*_-f*p)+(n*s-r*a)*(c*m-h*d)-(n*u-i*a)*(c*_-f*d)+(r*u-i*s)*(c*p-l*d)}function ot(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=t[9],d=t[10],p=t[11],_=t[12],m=t[13],v=t[14],g=t[15],b=n[0],y=n[1],x=n[2],E=n[3];return e[0]=b*r+y*s+x*f+E*_,e[1]=b*i+y*u+x*h+E*m,e[2]=b*o+y*c+x*d+E*v,e[3]=b*a+y*l+x*p+E*g,b=n[4],y=n[5],x=n[6],E=n[7],e[4]=b*r+y*s+x*f+E*_,e[5]=b*i+y*u+x*h+E*m,e[6]=b*o+y*c+x*d+E*v,e[7]=b*a+y*l+x*p+E*g,b=n[8],y=n[9],x=n[10],E=n[11],e[8]=b*r+y*s+x*f+E*_,e[9]=b*i+y*u+x*h+E*m,e[10]=b*o+y*c+x*d+E*v,e[11]=b*a+y*l+x*p+E*g,b=n[12],y=n[13],x=n[14],E=n[15],e[12]=b*r+y*s+x*f+E*_,e[13]=b*i+y*u+x*h+E*m,e[14]=b*o+y*c+x*d+E*v,e[15]=b*a+y*l+x*p+E*g,e}function at(e,t,n){var r,i,o,a,s,u,c,l,f,h,d,p,_=n[0],m=n[1],v=n[2];return t===e?(e[12]=t[0]*_+t[4]*m+t[8]*v+t[12],e[13]=t[1]*_+t[5]*m+t[9]*v+t[13],e[14]=t[2]*_+t[6]*m+t[10]*v+t[14],e[15]=t[3]*_+t[7]*m+t[11]*v+t[15]):(r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=t[8],h=t[9],d=t[10],p=t[11],e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=s,e[5]=u,e[6]=c,e[7]=l,e[8]=f,e[9]=h,e[10]=d,e[11]=p,e[12]=r*_+s*m+f*v+t[12],e[13]=i*_+u*m+h*v+t[13],e[14]=o*_+c*m+d*v+t[14],e[15]=a*_+l*m+p*v+t[15]),e}function st(e,t,n){var r=n[0],i=n[1],o=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*o,e[9]=t[9]*o,e[10]=t[10]*o,e[11]=t[11]*o,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ut(e,t,n,r){var i,o,a,s,u,c,l,f,h,p,_,m,v,g,b,y,x,E,T,w,A,M,O,R,S=r[0],P=r[1],L=r[2],F=Math.hypot(S,P,L);return F<d?null:(S*=F=1/F,P*=F,L*=F,i=Math.sin(n),a=1-(o=Math.cos(n)),s=t[0],u=t[1],c=t[2],l=t[3],f=t[4],h=t[5],p=t[6],_=t[7],m=t[8],v=t[9],g=t[10],b=t[11],y=S*S*a+o,x=P*S*a+L*i,E=L*S*a-P*i,T=S*P*a-L*i,w=P*P*a+o,A=L*P*a+S*i,M=S*L*a+P*i,O=P*L*a-S*i,R=L*L*a+o,e[0]=s*y+f*x+m*E,e[1]=u*y+h*x+v*E,e[2]=c*y+p*x+g*E,e[3]=l*y+_*x+b*E,e[4]=s*T+f*w+m*A,e[5]=u*T+h*w+v*A,e[6]=c*T+p*w+g*A,e[7]=l*T+_*w+b*A,e[8]=s*M+f*O+m*R,e[9]=u*M+h*O+v*R,e[10]=c*M+p*O+g*R,e[11]=l*M+_*O+b*R,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function ct(e,t,n){var r=Math.sin(n),i=Math.cos(n),o=t[4],a=t[5],s=t[6],u=t[7],c=t[8],l=t[9],f=t[10],h=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=o*i+c*r,e[5]=a*i+l*r,e[6]=s*i+f*r,e[7]=u*i+h*r,e[8]=c*i-o*r,e[9]=l*i-a*r,e[10]=f*i-s*r,e[11]=h*i-u*r,e}function lt(e,t,n){var r=Math.sin(n),i=Math.cos(n),o=t[0],a=t[1],s=t[2],u=t[3],c=t[8],l=t[9],f=t[10],h=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*i-c*r,e[1]=a*i-l*r,e[2]=s*i-f*r,e[3]=u*i-h*r,e[8]=o*r+c*i,e[9]=a*r+l*i,e[10]=s*r+f*i,e[11]=u*r+h*i,e}function ft(e,t,n){var r=Math.sin(n),i=Math.cos(n),o=t[0],a=t[1],s=t[2],u=t[3],c=t[4],l=t[5],f=t[6],h=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*i+c*r,e[1]=a*i+l*r,e[2]=s*i+f*r,e[3]=u*i+h*r,e[4]=c*i-o*r,e[5]=l*i-a*r,e[6]=f*i-s*r,e[7]=h*i-u*r,e}function ht(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}function dt(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function pt(e,t,n){var r,i,o,a=n[0],s=n[1],u=n[2],c=Math.hypot(a,s,u);return c<d?null:(a*=c=1/c,s*=c,u*=c,r=Math.sin(t),o=1-(i=Math.cos(t)),e[0]=a*a*o+i,e[1]=s*a*o+u*r,e[2]=u*a*o-s*r,e[3]=0,e[4]=a*s*o-u*r,e[5]=s*s*o+i,e[6]=u*s*o+a*r,e[7]=0,e[8]=a*u*o+s*r,e[9]=s*u*o-a*r,e[10]=u*u*o+i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)}function _t(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function mt(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function vt(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function gt(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=r+r,u=i+i,c=o+o,l=r*s,f=r*u,h=r*c,d=i*u,p=i*c,_=o*c,m=a*s,v=a*u,g=a*c;return e[0]=1-(d+_),e[1]=f+g,e[2]=h-v,e[3]=0,e[4]=f-g,e[5]=1-(l+_),e[6]=p+m,e[7]=0,e[8]=h+v,e[9]=p-m,e[10]=1-(l+d),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function bt(e,t){var n=new p(3),r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=r*r+i*i+o*o+a*a;return f>0?(n[0]=2*(s*a+l*r+u*o-c*i)/f,n[1]=2*(u*a+l*i+c*r-s*o)/f,n[2]=2*(c*a+l*o+s*i-u*r)/f):(n[0]=2*(s*a+l*r+u*o-c*i),n[1]=2*(u*a+l*i+c*r-s*o),n[2]=2*(c*a+l*o+s*i-u*r)),gt(e,t,n),e}function yt(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function xt(e,t){var n=t[0],r=t[1],i=t[2],o=t[4],a=t[5],s=t[6],u=t[8],c=t[9],l=t[10];return e[0]=Math.hypot(n,r,i),e[1]=Math.hypot(o,a,s),e[2]=Math.hypot(u,c,l),e}function Et(e,t){var n=new p(3);xt(n,t);var r=1/n[0],i=1/n[1],o=1/n[2],a=t[0]*r,s=t[1]*i,u=t[2]*o,c=t[4]*r,l=t[5]*i,f=t[6]*o,h=t[8]*r,d=t[9]*i,_=t[10]*o,m=a+l+_,v=0;return m>0?(v=2*Math.sqrt(m+1),e[3]=.25*v,e[0]=(f-d)/v,e[1]=(h-u)/v,e[2]=(s-c)/v):a>l&&a>_?(v=2*Math.sqrt(1+a-l-_),e[3]=(f-d)/v,e[0]=.25*v,e[1]=(s+c)/v,e[2]=(h+u)/v):l>_?(v=2*Math.sqrt(1+l-a-_),e[3]=(h-u)/v,e[0]=(s+c)/v,e[1]=.25*v,e[2]=(f+d)/v):(v=2*Math.sqrt(1+_-a-l),e[3]=(s-c)/v,e[0]=(h+u)/v,e[1]=(f+d)/v,e[2]=.25*v),e}function Tt(e,t,n,r){var i=t[0],o=t[1],a=t[2],s=t[3],u=i+i,c=o+o,l=a+a,f=i*u,h=i*c,d=i*l,p=o*c,_=o*l,m=a*l,v=s*u,g=s*c,b=s*l,y=r[0],x=r[1],E=r[2];return e[0]=(1-(p+m))*y,e[1]=(h+b)*y,e[2]=(d-g)*y,e[3]=0,e[4]=(h-b)*x,e[5]=(1-(f+m))*x,e[6]=(_+v)*x,e[7]=0,e[8]=(d+g)*E,e[9]=(_-v)*E,e[10]=(1-(f+p))*E,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function wt(e,t,n,r,i){var o=t[0],a=t[1],s=t[2],u=t[3],c=o+o,l=a+a,f=s+s,h=o*c,d=o*l,p=o*f,_=a*l,m=a*f,v=s*f,g=u*c,b=u*l,y=u*f,x=r[0],E=r[1],T=r[2],w=i[0],A=i[1],M=i[2],O=(1-(_+v))*x,R=(d+y)*x,S=(p-b)*x,P=(d-y)*E,L=(1-(h+v))*E,F=(m+g)*E,I=(p+b)*T,C=(m-g)*T,N=(1-(h+_))*T;return e[0]=O,e[1]=R,e[2]=S,e[3]=0,e[4]=P,e[5]=L,e[6]=F,e[7]=0,e[8]=I,e[9]=C,e[10]=N,e[11]=0,e[12]=n[0]+w-(O*w+P*A+I*M),e[13]=n[1]+A-(R*w+L*A+C*M),e[14]=n[2]+M-(S*w+F*A+N*M),e[15]=1,e}function At(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n+n,s=r+r,u=i+i,c=n*a,l=r*a,f=r*s,h=i*a,d=i*s,p=i*u,_=o*a,m=o*s,v=o*u;return e[0]=1-f-p,e[1]=l+v,e[2]=h-m,e[3]=0,e[4]=l-v,e[5]=1-c-p,e[6]=d+_,e[7]=0,e[8]=h+m,e[9]=d-_,e[10]=1-c-f,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Mt(e,t,n,r,i,o,a){var s=1/(n-t),u=1/(i-r),c=1/(o-a);return e[0]=2*o*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*o*u,e[6]=0,e[7]=0,e[8]=(n+t)*s,e[9]=(i+r)*u,e[10]=(a+o)*c,e[11]=-1,e[12]=0,e[13]=0,e[14]=a*o*2*c,e[15]=0,e}function Ot(e,t,n,r,i){var o,a=1/Math.tan(t/2);return e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(o=1/(r-i),e[10]=(i+r)*o,e[14]=2*i*r*o):(e[10]=-1,e[14]=-2*r),e}function Rt(e,t,n,r){var i=Math.tan(t.upDegrees*Math.PI/180),o=Math.tan(t.downDegrees*Math.PI/180),a=Math.tan(t.leftDegrees*Math.PI/180),s=Math.tan(t.rightDegrees*Math.PI/180),u=2/(a+s),c=2/(i+o);return e[0]=u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=c,e[6]=0,e[7]=0,e[8]=-(a-s)*u*.5,e[9]=(i-o)*c*.5,e[10]=r/(n-r),e[11]=-1,e[12]=0,e[13]=0,e[14]=r*n/(n-r),e[15]=0,e}function St(e,t,n,r,i,o,a){var s=1/(t-n),u=1/(r-i),c=1/(o-a);return e[0]=-2*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*c,e[11]=0,e[12]=(t+n)*s,e[13]=(i+r)*u,e[14]=(a+o)*c,e[15]=1,e}function Pt(e,t,n,r){var i,o,a,s,u,c,l,f,h,p,_=t[0],m=t[1],v=t[2],g=r[0],b=r[1],y=r[2],x=n[0],E=n[1],T=n[2];return Math.abs(_-x)<d&&Math.abs(m-E)<d&&Math.abs(v-T)<d?et(e):(l=_-x,f=m-E,h=v-T,i=b*(h*=p=1/Math.hypot(l,f,h))-y*(f*=p),o=y*(l*=p)-g*h,a=g*f-b*l,(p=Math.hypot(i,o,a))?(i*=p=1/p,o*=p,a*=p):(i=0,o=0,a=0),s=f*a-h*o,u=h*i-l*a,c=l*o-f*i,(p=Math.hypot(s,u,c))?(s*=p=1/p,u*=p,c*=p):(s=0,u=0,c=0),e[0]=i,e[1]=s,e[2]=l,e[3]=0,e[4]=o,e[5]=u,e[6]=f,e[7]=0,e[8]=a,e[9]=c,e[10]=h,e[11]=0,e[12]=-(i*_+o*m+a*v),e[13]=-(s*_+u*m+c*v),e[14]=-(l*_+f*m+h*v),e[15]=1,e)}function Lt(e,t,n,r){var i=t[0],o=t[1],a=t[2],s=r[0],u=r[1],c=r[2],l=i-n[0],f=o-n[1],h=a-n[2],d=l*l+f*f+h*h;d>0&&(l*=d=1/Math.sqrt(d),f*=d,h*=d);var p=u*h-c*f,_=c*l-s*h,m=s*f-u*l;return(d=p*p+_*_+m*m)>0&&(p*=d=1/Math.sqrt(d),_*=d,m*=d),e[0]=p,e[1]=_,e[2]=m,e[3]=0,e[4]=f*m-h*_,e[5]=h*p-l*m,e[6]=l*_-f*p,e[7]=0,e[8]=l,e[9]=f,e[10]=h,e[11]=0,e[12]=i,e[13]=o,e[14]=a,e[15]=1,e}function Ft(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"}function It(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function Ct(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}function Nt(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}function jt(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}function Dt(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e[9]=t[9]+n[9]*r,e[10]=t[10]+n[10]*r,e[11]=t[11]+n[11]*r,e[12]=t[12]+n[12]*r,e[13]=t[13]+n[13]*r,e[14]=t[14]+n[14]*r,e[15]=t[15]+n[15]*r,e}function Bt(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}function Ut(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],l=e[8],f=e[9],h=e[10],p=e[11],_=e[12],m=e[13],v=e[14],g=e[15],b=t[0],y=t[1],x=t[2],E=t[3],T=t[4],w=t[5],A=t[6],M=t[7],O=t[8],R=t[9],S=t[10],P=t[11],L=t[12],F=t[13],I=t[14],C=t[15];return Math.abs(n-b)<=d*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-y)<=d*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(i-x)<=d*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(o-E)<=d*Math.max(1,Math.abs(o),Math.abs(E))&&Math.abs(a-T)<=d*Math.max(1,Math.abs(a),Math.abs(T))&&Math.abs(s-w)<=d*Math.max(1,Math.abs(s),Math.abs(w))&&Math.abs(u-A)<=d*Math.max(1,Math.abs(u),Math.abs(A))&&Math.abs(c-M)<=d*Math.max(1,Math.abs(c),Math.abs(M))&&Math.abs(l-O)<=d*Math.max(1,Math.abs(l),Math.abs(O))&&Math.abs(f-R)<=d*Math.max(1,Math.abs(f),Math.abs(R))&&Math.abs(h-S)<=d*Math.max(1,Math.abs(h),Math.abs(S))&&Math.abs(p-P)<=d*Math.max(1,Math.abs(p),Math.abs(P))&&Math.abs(_-L)<=d*Math.max(1,Math.abs(_),Math.abs(L))&&Math.abs(m-F)<=d*Math.max(1,Math.abs(m),Math.abs(F))&&Math.abs(v-I)<=d*Math.max(1,Math.abs(v),Math.abs(I))&&Math.abs(g-C)<=d*Math.max(1,Math.abs(g),Math.abs(C))}var zt=ot,kt=Nt;function Gt(){var e=new p(3);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function qt(e){var t=new p(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Vt(e){var t=e[0],n=e[1],r=e[2];return Math.hypot(t,n,r)}function Ht(e,t,n){var r=new p(3);return r[0]=e,r[1]=t,r[2]=n,r}function Wt(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Xt(e,t,n,r){return e[0]=t,e[1]=n,e[2]=r,e}function Yt(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}function Kt(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}function $t(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}function Zt(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}function Qt(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}function Jt(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}function en(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}function tn(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}function nn(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e}function rn(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}function on(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e}function an(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return Math.hypot(n,r,i)}function sn(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return n*n+r*r+i*i}function un(e){var t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}function cn(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function ln(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function fn(e,t){var n=t[0],r=t[1],i=t[2],o=n*n+r*r+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e}function hn(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function dn(e,t,n){var r=t[0],i=t[1],o=t[2],a=n[0],s=n[1],u=n[2];return e[0]=i*u-o*s,e[1]=o*a-r*u,e[2]=r*s-i*a,e}function pn(e,t,n,r){var i=t[0],o=t[1],a=t[2];return e[0]=i+r*(n[0]-i),e[1]=o+r*(n[1]-o),e[2]=a+r*(n[2]-a),e}function _n(e,t,n,r,i,o){var a=o*o,s=a*(2*o-3)+1,u=a*(o-2)+o,c=a*(o-1),l=a*(3-2*o);return e[0]=t[0]*s+n[0]*u+r[0]*c+i[0]*l,e[1]=t[1]*s+n[1]*u+r[1]*c+i[1]*l,e[2]=t[2]*s+n[2]*u+r[2]*c+i[2]*l,e}function mn(e,t,n,r,i,o){var a=1-o,s=a*a,u=o*o,c=s*a,l=3*o*s,f=3*u*a,h=u*o;return e[0]=t[0]*c+n[0]*l+r[0]*f+i[0]*h,e[1]=t[1]*c+n[1]*l+r[1]*f+i[1]*h,e[2]=t[2]*c+n[2]*l+r[2]*f+i[2]*h,e}function vn(e,t){t=t||1;var n=2*_()*Math.PI,r=2*_()-1,i=Math.sqrt(1-r*r)*t;return e[0]=Math.cos(n)*i,e[1]=Math.sin(n)*i,e[2]=r*t,e}function gn(e,t,n){var r=t[0],i=t[1],o=t[2],a=n[3]*r+n[7]*i+n[11]*o+n[15];return a=a||1,e[0]=(n[0]*r+n[4]*i+n[8]*o+n[12])/a,e[1]=(n[1]*r+n[5]*i+n[9]*o+n[13])/a,e[2]=(n[2]*r+n[6]*i+n[10]*o+n[14])/a,e}function bn(e,t,n){var r=t[0],i=t[1],o=t[2];return e[0]=r*n[0]+i*n[3]+o*n[6],e[1]=r*n[1]+i*n[4]+o*n[7],e[2]=r*n[2]+i*n[5]+o*n[8],e}function yn(e,t,n){var r=n[0],i=n[1],o=n[2],a=n[3],s=t[0],u=t[1],c=t[2],l=i*c-o*u,f=o*s-r*c,h=r*u-i*s,d=i*h-o*f,p=o*l-r*h,_=r*f-i*l,m=2*a;return l*=m,f*=m,h*=m,d*=2,p*=2,_*=2,e[0]=s+l+d,e[1]=u+f+p,e[2]=c+h+_,e}function xn(e,t,n,r){var i=[],o=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],o[0]=i[0],o[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),o[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function En(e,t,n,r){var i=[],o=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],o[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),o[1]=i[1],o[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function Tn(e,t,n,r){var i=[],o=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],o[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),o[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),o[2]=i[2],e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function wn(e,t){var n=e[0],r=e[1],i=e[2],o=t[0],a=t[1],s=t[2],u=Math.sqrt(n*n+r*r+i*i)*Math.sqrt(o*o+a*a+s*s),c=u&&hn(e,t)/u;return Math.acos(Math.min(Math.max(c,-1),1))}function An(e){return e[0]=0,e[1]=0,e[2]=0,e}function Mn(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"}function On(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}function Rn(e,t){var n=e[0],r=e[1],i=e[2],o=t[0],a=t[1],s=t[2];return Math.abs(n-o)<=d*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-a)<=d*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(i-s)<=d*Math.max(1,Math.abs(i),Math.abs(s))}var Sn,Pn=Kt,Ln=$t,Fn=Zt,In=an,Cn=sn,Nn=Vt,jn=un,Dn=(Sn=Gt(),function(e,t,n,r,i,o){var a,s;for(t||(t=3),n||(n=0),s=r?Math.min(r*t+n,e.length):e.length,a=n;a<s;a+=t)Sn[0]=e[a],Sn[1]=e[a+1],Sn[2]=e[a+2],i(Sn,Sn,o),e[a]=Sn[0],e[a+1]=Sn[1],e[a+2]=Sn[2];return e});function Bn(){var e=new p(4);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function Un(e){var t=new p(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function zn(e,t,n,r){var i=new p(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=r,i}function kn(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Gn(e,t,n,r,i){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e}function qn(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}function Vn(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}function Hn(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}function Wn(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}function Xn(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}function Yn(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}function Kn(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}function $n(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}function Zn(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}function Qn(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}function Jn(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e}function er(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],o=t[3]-e[3];return Math.hypot(n,r,i,o)}function tr(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],o=t[3]-e[3];return n*n+r*r+i*i+o*o}function nr(e){var t=e[0],n=e[1],r=e[2],i=e[3];return Math.hypot(t,n,r,i)}function rr(e){var t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i}function ir(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}function or(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}function ar(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n*n+r*r+i*i+o*o;return a>0&&(a=1/Math.sqrt(a)),e[0]=n*a,e[1]=r*a,e[2]=i*a,e[3]=o*a,e}function sr(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function ur(e,t,n,r){var i=n[0]*r[1]-n[1]*r[0],o=n[0]*r[2]-n[2]*r[0],a=n[0]*r[3]-n[3]*r[0],s=n[1]*r[2]-n[2]*r[1],u=n[1]*r[3]-n[3]*r[1],c=n[2]*r[3]-n[3]*r[2],l=t[0],f=t[1],h=t[2],d=t[3];return e[0]=f*c-h*u+d*s,e[1]=-l*c+h*a-d*o,e[2]=l*u-f*a+d*i,e[3]=-l*s+f*o-h*i,e}function cr(e,t,n,r){var i=t[0],o=t[1],a=t[2],s=t[3];return e[0]=i+r*(n[0]-i),e[1]=o+r*(n[1]-o),e[2]=a+r*(n[2]-a),e[3]=s+r*(n[3]-s),e}function lr(e,t){var n,r,i,o,a,s;t=t||1;do{a=(n=2*_()-1)*n+(r=2*_()-1)*r}while(a>=1);do{s=(i=2*_()-1)*i+(o=2*_()-1)*o}while(s>=1);var u=Math.sqrt((1-a)/s);return e[0]=t*n,e[1]=t*r,e[2]=t*i*u,e[3]=t*o*u,e}function fr(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3];return e[0]=n[0]*r+n[4]*i+n[8]*o+n[12]*a,e[1]=n[1]*r+n[5]*i+n[9]*o+n[13]*a,e[2]=n[2]*r+n[6]*i+n[10]*o+n[14]*a,e[3]=n[3]*r+n[7]*i+n[11]*o+n[15]*a,e}function hr(e,t,n){var r=t[0],i=t[1],o=t[2],a=n[0],s=n[1],u=n[2],c=n[3],l=c*r+s*o-u*i,f=c*i+u*r-a*o,h=c*o+a*i-s*r,d=-a*r-s*i-u*o;return e[0]=l*c+d*-a+f*-u-h*-s,e[1]=f*c+d*-s+h*-a-l*-u,e[2]=h*c+d*-u+l*-s-f*-a,e[3]=t[3],e}function dr(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}function pr(e){return"vec4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function _r(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function mr(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=t[0],s=t[1],u=t[2],c=t[3];return Math.abs(n-a)<=d*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-s)<=d*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-u)<=d*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-c)<=d*Math.max(1,Math.abs(o),Math.abs(c))}var vr=Vn,gr=Hn,br=Wn,yr=er,xr=tr,Er=nr,Tr=rr,wr=function(){var e=Bn();return function(t,n,r,i,o,a){var s,u;for(n||(n=4),r||(r=0),u=i?Math.min(i*n+r,t.length):t.length,s=r;s<u;s+=n)e[0]=t[s],e[1]=t[s+1],e[2]=t[s+2],e[3]=t[s+3],o(e,e,a),t[s]=e[0],t[s+1]=e[1],t[s+2]=e[2],t[s+3]=e[3];return t}}();function Ar(){var e=new p(4);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}function Mr(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function Or(e,t,n){n*=.5;var r=Math.sin(n);return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=Math.cos(n),e}function Rr(e,t){var n=2*Math.acos(t[3]),r=Math.sin(n/2);return r>d?(e[0]=t[0]/r,e[1]=t[1]/r,e[2]=t[2]/r):(e[0]=1,e[1]=0,e[2]=0),n}function Sr(e,t){var n=ii(e,t);return Math.acos(2*n*n-1)}function Pr(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1],c=n[2],l=n[3];return e[0]=r*l+a*s+i*c-o*u,e[1]=i*l+a*u+o*s-r*c,e[2]=o*l+a*c+r*u-i*s,e[3]=a*l-r*s-i*u-o*c,e}function Lr(e,t,n){n*=.5;var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u+a*s,e[1]=i*u+o*s,e[2]=o*u-i*s,e[3]=a*u-r*s,e}function Fr(e,t,n){n*=.5;var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u-o*s,e[1]=i*u+a*s,e[2]=o*u+r*s,e[3]=a*u-i*s,e}function Ir(e,t,n){n*=.5;var r=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(n),u=Math.cos(n);return e[0]=r*u+i*s,e[1]=i*u-r*s,e[2]=o*u+a*s,e[3]=a*u-o*s,e}function Cr(e,t){var n=t[0],r=t[1],i=t[2];return e[0]=n,e[1]=r,e[2]=i,e[3]=Math.sqrt(Math.abs(1-n*n-r*r-i*i)),e}function Nr(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=Math.sqrt(n*n+r*r+i*i),s=Math.exp(o),u=a>0?s*Math.sin(a)/a:0;return e[0]=n*u,e[1]=r*u,e[2]=i*u,e[3]=s*Math.cos(a),e}function jr(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=Math.sqrt(n*n+r*r+i*i),s=a>0?Math.atan2(a,o)/a:0;return e[0]=n*s,e[1]=r*s,e[2]=i*s,e[3]=.5*Math.log(n*n+r*r+i*i+o*o),e}function Dr(e,t,n){return jr(e,t),ri(e,e,n),Nr(e,e),e}function Br(e,t,n,r){var i,o,a,s,u,c=t[0],l=t[1],f=t[2],h=t[3],p=n[0],_=n[1],m=n[2],v=n[3];return(o=c*p+l*_+f*m+h*v)<0&&(o=-o,p=-p,_=-_,m=-m,v=-v),1-o>d?(i=Math.acos(o),a=Math.sin(i),s=Math.sin((1-r)*i)/a,u=Math.sin(r*i)/a):(s=1-r,u=r),e[0]=s*c+u*p,e[1]=s*l+u*_,e[2]=s*f+u*m,e[3]=s*h+u*v,e}function Ur(e){var t=_(),n=_(),r=_(),i=Math.sqrt(1-t),o=Math.sqrt(t);return e[0]=i*Math.sin(2*Math.PI*n),e[1]=i*Math.cos(2*Math.PI*n),e[2]=o*Math.sin(2*Math.PI*r),e[3]=o*Math.cos(2*Math.PI*r),e}function zr(e,t){var n=t[0],r=t[1],i=t[2],o=t[3],a=n*n+r*r+i*i+o*o,s=a?1/a:0;return e[0]=-n*s,e[1]=-r*s,e[2]=-i*s,e[3]=o*s,e}function kr(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function Gr(e,t){var n,r=t[0]+t[4]+t[8];if(r>0)n=Math.sqrt(r+1),e[3]=.5*n,n=.5/n,e[0]=(t[5]-t[7])*n,e[1]=(t[6]-t[2])*n,e[2]=(t[1]-t[3])*n;else{var i=0;t[4]>t[0]&&(i=1),t[8]>t[3*i+i]&&(i=2);var o=(i+1)%3,a=(i+2)%3;n=Math.sqrt(t[3*i+i]-t[3*o+o]-t[3*a+a]+1),e[i]=.5*n,n=.5/n,e[3]=(t[3*o+a]-t[3*a+o])*n,e[o]=(t[3*o+i]+t[3*i+o])*n,e[a]=(t[3*a+i]+t[3*i+a])*n}return e}function qr(e,t,n,r){var i=.5*Math.PI/180;t*=i,n*=i,r*=i;var o=Math.sin(t),a=Math.cos(t),s=Math.sin(n),u=Math.cos(n),c=Math.sin(r),l=Math.cos(r);return e[0]=o*u*l-a*s*c,e[1]=a*s*l+o*u*c,e[2]=a*u*c-o*s*l,e[3]=a*u*l+o*s*c,e}function Vr(e){return"quat("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}var Hr,Wr,Xr,Yr,Kr,$r,Zr=Un,Qr=zn,Jr=kn,ei=Gn,ti=qn,ni=Pr,ri=Qn,ii=sr,oi=cr,ai=nr,si=ai,ui=rr,ci=ui,li=ar,fi=_r,hi=mr,di=(Hr=Gt(),Wr=Ht(1,0,0),Xr=Ht(0,1,0),function(e,t,n){var r=hn(t,n);return r<-.999999?(dn(Hr,Wr,t),Nn(Hr)<1e-6&&dn(Hr,Xr,t),fn(Hr,Hr),Or(e,Hr,Math.PI),e):r>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(dn(Hr,t,n),e[0]=Hr[0],e[1]=Hr[1],e[2]=Hr[2],e[3]=1+r,li(e,e))}),pi=(Yr=Ar(),Kr=Ar(),function(e,t,n,r,i,o){return Br(Yr,t,i,o),Br(Kr,n,r,o),Br(e,Yr,Kr,2*o*(1-o)),e}),_i=($r=ve(),function(e,t,n,r){return $r[0]=n[0],$r[3]=n[1],$r[6]=n[2],$r[1]=r[0],$r[4]=r[1],$r[7]=r[2],$r[2]=-t[0],$r[5]=-t[1],$r[8]=-t[2],li(e,Gr(e,$r))});function mi(){var e=new p(8);return p!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0),e[3]=1,e}function vi(e){var t=new p(8);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}function gi(e,t,n,r,i,o,a,s){var u=new p(8);return u[0]=e,u[1]=t,u[2]=n,u[3]=r,u[4]=i,u[5]=o,u[6]=a,u[7]=s,u}function bi(e,t,n,r,i,o,a){var s=new p(8);s[0]=e,s[1]=t,s[2]=n,s[3]=r;var u=.5*i,c=.5*o,l=.5*a;return s[4]=u*r+c*n-l*t,s[5]=c*r+l*e-u*n,s[6]=l*r+u*t-c*e,s[7]=-u*e-c*t-l*n,s}function yi(e,t,n){var r=.5*n[0],i=.5*n[1],o=.5*n[2],a=t[0],s=t[1],u=t[2],c=t[3];return e[0]=a,e[1]=s,e[2]=u,e[3]=c,e[4]=r*c+i*u-o*s,e[5]=i*c+o*a-r*u,e[6]=o*c+r*s-i*a,e[7]=-r*a-i*s-o*u,e}function xi(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=.5*t[0],e[5]=.5*t[1],e[6]=.5*t[2],e[7]=0,e}function Ei(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function Ti(e,t){var n=Ar();Et(n,t);var r=new p(3);return yt(r,t),yi(e,n,r),e}function wi(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}function Ai(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function Mi(e,t,n,r,i,o,a,s,u){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e[4]=o,e[5]=a,e[6]=s,e[7]=u,e}var Oi=Jr;function Ri(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}var Si=Jr;function Pi(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}function Li(e,t){var n=t[4],r=t[5],i=t[6],o=t[7],a=-t[0],s=-t[1],u=-t[2],c=t[3];return e[0]=2*(n*c+o*a+r*u-i*s),e[1]=2*(r*c+o*s+i*a-n*u),e[2]=2*(i*c+o*u+n*s-r*a),e}function Fi(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=.5*n[0],u=.5*n[1],c=.5*n[2],l=t[4],f=t[5],h=t[6],d=t[7];return e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=a*s+i*c-o*u+l,e[5]=a*u+o*s-r*c+f,e[6]=a*c+r*u-i*s+h,e[7]=-r*s-i*u-o*c+d,e}function Ii(e,t,n){var r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=s*a+l*r+u*o-c*i,h=u*a+l*i+c*r-s*o,d=c*a+l*o+s*i-u*r,p=l*a-s*r-u*i-c*o;return Lr(e,t,n),r=e[0],i=e[1],o=e[2],a=e[3],e[4]=f*a+p*r+h*o-d*i,e[5]=h*a+p*i+d*r-f*o,e[6]=d*a+p*o+f*i-h*r,e[7]=p*a-f*r-h*i-d*o,e}function Ci(e,t,n){var r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=s*a+l*r+u*o-c*i,h=u*a+l*i+c*r-s*o,d=c*a+l*o+s*i-u*r,p=l*a-s*r-u*i-c*o;return Fr(e,t,n),r=e[0],i=e[1],o=e[2],a=e[3],e[4]=f*a+p*r+h*o-d*i,e[5]=h*a+p*i+d*r-f*o,e[6]=d*a+p*o+f*i-h*r,e[7]=p*a-f*r-h*i-d*o,e}function Ni(e,t,n){var r=-t[0],i=-t[1],o=-t[2],a=t[3],s=t[4],u=t[5],c=t[6],l=t[7],f=s*a+l*r+u*o-c*i,h=u*a+l*i+c*r-s*o,d=c*a+l*o+s*i-u*r,p=l*a-s*r-u*i-c*o;return Ir(e,t,n),r=e[0],i=e[1],o=e[2],a=e[3],e[4]=f*a+p*r+h*o-d*i,e[5]=h*a+p*i+d*r-f*o,e[6]=d*a+p*o+f*i-h*r,e[7]=p*a-f*r-h*i-d*o,e}function ji(e,t,n){var r=n[0],i=n[1],o=n[2],a=n[3],s=t[0],u=t[1],c=t[2],l=t[3];return e[0]=s*a+l*r+u*o-c*i,e[1]=u*a+l*i+c*r-s*o,e[2]=c*a+l*o+s*i-u*r,e[3]=l*a-s*r-u*i-c*o,s=t[4],u=t[5],c=t[6],l=t[7],e[4]=s*a+l*r+u*o-c*i,e[5]=u*a+l*i+c*r-s*o,e[6]=c*a+l*o+s*i-u*r,e[7]=l*a-s*r-u*i-c*o,e}function Di(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[0],u=n[1],c=n[2],l=n[3];return e[0]=r*l+a*s+i*c-o*u,e[1]=i*l+a*u+o*s-r*c,e[2]=o*l+a*c+r*u-i*s,e[3]=a*l-r*s-i*u-o*c,s=n[4],u=n[5],c=n[6],l=n[7],e[4]=r*l+a*s+i*c-o*u,e[5]=i*l+a*u+o*s-r*c,e[6]=o*l+a*c+r*u-i*s,e[7]=a*l-r*s-i*u-o*c,e}function Bi(e,t,n,r){if(Math.abs(r)<d)return wi(e,t);var i=Math.hypot(n[0],n[1],n[2]);r*=.5;var o=Math.sin(r),a=o*n[0]/i,s=o*n[1]/i,u=o*n[2]/i,c=Math.cos(r),l=t[0],f=t[1],h=t[2],p=t[3];e[0]=l*c+p*a+f*u-h*s,e[1]=f*c+p*s+h*a-l*u,e[2]=h*c+p*u+l*s-f*a,e[3]=p*c-l*a-f*s-h*u;var _=t[4],m=t[5],v=t[6],g=t[7];return e[4]=_*c+g*a+m*u-v*s,e[5]=m*c+g*s+v*a-_*u,e[6]=v*c+g*u+_*s-m*a,e[7]=g*c-_*a-m*s-v*u,e}function Ui(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}function zi(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],s=n[4],u=n[5],c=n[6],l=n[7],f=t[4],h=t[5],d=t[6],p=t[7],_=n[0],m=n[1],v=n[2],g=n[3];return e[0]=r*g+a*_+i*v-o*m,e[1]=i*g+a*m+o*_-r*v,e[2]=o*g+a*v+r*m-i*_,e[3]=a*g-r*_-i*m-o*v,e[4]=r*l+a*s+i*c-o*u+f*g+p*_+h*v-d*m,e[5]=i*l+a*u+o*s-r*c+h*g+p*m+d*_-f*v,e[6]=o*l+a*c+r*u-i*s+d*g+p*v+f*m-h*_,e[7]=a*l-r*s-i*u-o*c+p*g-f*_-h*m-d*v,e}var ki=zi;function Gi(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}var qi=ii;function Vi(e,t,n,r){var i=1-r;return qi(t,n)<0&&(r=-r),e[0]=t[0]*i+n[0]*r,e[1]=t[1]*i+n[1]*r,e[2]=t[2]*i+n[2]*r,e[3]=t[3]*i+n[3]*r,e[4]=t[4]*i+n[4]*r,e[5]=t[5]*i+n[5]*r,e[6]=t[6]*i+n[6]*r,e[7]=t[7]*i+n[7]*r,e}function Hi(e,t){var n=Ki(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}function Wi(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}var Xi=ai,Yi=Xi,Ki=ui,$i=Ki;function Zi(e,t){var n=Ki(t);if(n>0){n=Math.sqrt(n);var r=t[0]/n,i=t[1]/n,o=t[2]/n,a=t[3]/n,s=t[4],u=t[5],c=t[6],l=t[7],f=r*s+i*u+o*c+a*l;e[0]=r,e[1]=i,e[2]=o,e[3]=a,e[4]=(s-r*f)/n,e[5]=(u-i*f)/n,e[6]=(c-o*f)/n,e[7]=(l-a*f)/n}return e}function Qi(e){return"quat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+")"}function Ji(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}function eo(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],l=t[0],f=t[1],h=t[2],p=t[3],_=t[4],m=t[5],v=t[6],g=t[7];return Math.abs(n-l)<=d*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(r-f)<=d*Math.max(1,Math.abs(r),Math.abs(f))&&Math.abs(i-h)<=d*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(o-p)<=d*Math.max(1,Math.abs(o),Math.abs(p))&&Math.abs(a-_)<=d*Math.max(1,Math.abs(a),Math.abs(_))&&Math.abs(s-m)<=d*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(u-v)<=d*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(c-g)<=d*Math.max(1,Math.abs(c),Math.abs(g))}function to(){var e=new p(2);return p!=Float32Array&&(e[0]=0,e[1]=0),e}function no(e){var t=new p(2);return t[0]=e[0],t[1]=e[1],t}function ro(e,t){var n=new p(2);return n[0]=e,n[1]=t,n}function io(e,t){return e[0]=t[0],e[1]=t[1],e}function oo(e,t,n){return e[0]=t,e[1]=n,e}function ao(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}function so(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}function uo(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}function co(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}function lo(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}function fo(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}function ho(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}function po(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}function _o(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}function mo(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}function vo(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e}function go(e,t){var n=t[0]-e[0],r=t[1]-e[1];return Math.hypot(n,r)}function bo(e,t){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r}function yo(e){var t=e[0],n=e[1];return Math.hypot(t,n)}function xo(e){var t=e[0],n=e[1];return t*t+n*n}function Eo(e,t){return e[0]=-t[0],e[1]=-t[1],e}function To(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}function wo(e,t){var n=t[0],r=t[1],i=n*n+r*r;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e}function Ao(e,t){return e[0]*t[0]+e[1]*t[1]}function Mo(e,t,n){var r=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=r,e}function Oo(e,t,n,r){var i=t[0],o=t[1];return e[0]=i+r*(n[0]-i),e[1]=o+r*(n[1]-o),e}function Ro(e,t){t=t||1;var n=2*_()*Math.PI;return e[0]=Math.cos(n)*t,e[1]=Math.sin(n)*t,e}function So(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i,e[1]=n[1]*r+n[3]*i,e}function Po(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i+n[4],e[1]=n[1]*r+n[3]*i+n[5],e}function Lo(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[3]*i+n[6],e[1]=n[1]*r+n[4]*i+n[7],e}function Fo(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[4]*i+n[12],e[1]=n[1]*r+n[5]*i+n[13],e}function Io(e,t,n,r){var i=t[0]-n[0],o=t[1]-n[1],a=Math.sin(r),s=Math.cos(r);return e[0]=i*s-o*a+n[0],e[1]=i*a+o*s+n[1],e}function Co(e,t){var n=e[0],r=e[1],i=t[0],o=t[1],a=Math.sqrt(n*n+r*r)*Math.sqrt(i*i+o*o),s=a&&(n*i+r*o)/a;return Math.acos(Math.min(Math.max(s,-1),1))}function No(e){return e[0]=0,e[1]=0,e}function jo(e){return"vec2("+e[0]+", "+e[1]+")"}function Do(e,t){return e[0]===t[0]&&e[1]===t[1]}function Bo(e,t){var n=e[0],r=e[1],i=t[0],o=t[1];return Math.abs(n-i)<=d*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-o)<=d*Math.max(1,Math.abs(r),Math.abs(o))}var Uo=yo,zo=so,ko=uo,Go=co,qo=go,Vo=bo,Ho=xo,Wo=function(){var e=to();return function(t,n,r,i,o,a){var s,u;for(n||(n=2),r||(r=0),u=i?Math.min(i*n+r,t.length):t.length,s=r;s<u;s+=n)e[0]=t[s],e[1]=t[s+1],o(e,e,a),t[s]=e[0],t[s+1]=e[1];return t}}()}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,